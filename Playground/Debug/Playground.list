
Playground.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bba8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800bd38  0800bd38  0000cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdd0  0800bdd0  0000d080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bdd0  0800bdd0  0000cdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdd8  0800bdd8  0000d080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdd8  0800bdd8  0000cdd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bddc  0800bddc  0000cddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800bde0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d080  2**0
                  CONTENTS
 10 .bss          00004e2c  20000080  20000080  0000d080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004eac  20004eac  0000d080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000238a7  00000000  00000000  0000d0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055dc  00000000  00000000  00030957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca8  00000000  00000000  00035f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001612  00000000  00000000  00037be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000277f3  00000000  00000000  000391f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000269fc  00000000  00000000  000609e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd4f1  00000000  00000000  000873e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001648d2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ba4  00000000  00000000  00164918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0016c4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bd20 	.word	0x0800bd20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800bd20 	.word	0x0800bd20

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004fc:	b480      	push	{r7}
 80004fe:	b085      	sub	sp, #20
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	4a07      	ldr	r2, [pc, #28]	@ (8000528 <vApplicationGetIdleTaskMemory+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	4a06      	ldr	r2, [pc, #24]	@ (800052c <vApplicationGetIdleTaskMemory+0x30>)
 8000512:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2280      	movs	r2, #128	@ 0x80
 8000518:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000009c 	.word	0x2000009c
 800052c:	2000013c 	.word	0x2000013c

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b088      	sub	sp, #32
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fcd1 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 f823 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 f923 	bl	8000788 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000542:	f000 f88d 	bl	8000660 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000546:	f000 f8b9 	bl	80006bc <MX_I2S3_Init>
  MX_SPI1_Init();
 800054a:	f000 f8e7 	bl	800071c <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <main+0x4c>)
 8000550:	1d3c      	adds	r4, r7, #4
 8000552:	461d      	mov	r5, r3
 8000554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000558:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800055c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f008 fc82 	bl	8008e6e <osThreadCreate>
 800056a:	4603      	mov	r3, r0
 800056c:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <main+0x50>)
 800056e:	6013      	str	r3, [r2, #0]


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  create_led_control_task();
 8000570:	f000 fc7c 	bl	8000e6c <create_led_control_task>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f008 fc74 	bl	8008e60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	bf00      	nop
 800057a:	e7fd      	b.n	8000578 <main+0x48>
 800057c:	0800bd44 	.word	0x0800bd44
 8000580:	20000430 	.word	0x20000430

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	@ 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	@ 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f00b faca 	bl	800bb2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000658 <SystemClock_Config+0xd4>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b0:	4a29      	ldr	r2, [pc, #164]	@ (8000658 <SystemClock_Config+0xd4>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <SystemClock_Config+0xd4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <SystemClock_Config+0xd8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a23      	ldr	r2, [pc, #140]	@ (800065c <SystemClock_Config+0xd8>)
 80005ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <SystemClock_Config+0xd8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80005e0:	2303      	movs	r3, #3
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ee:	2310      	movs	r3, #16
 80005f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f2:	2302      	movs	r3, #2
 80005f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000600:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000604:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800060a:	2307      	movs	r3, #7
 800060c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	4618      	mov	r0, r3
 8000614:	f003 fe78 	bl	8004308 <HAL_RCC_OscConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800061e:	f000 f9cd 	bl	80009bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000622:	230f      	movs	r3, #15
 8000624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000626:	2300      	movs	r3, #0
 8000628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800062e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f004 f8d9 	bl	80047f8 <HAL_RCC_ClockConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800064c:	f000 f9b6 	bl	80009bc <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3750      	adds	r7, #80	@ 0x50
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40007000 	.word	0x40007000

08000660 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b12      	ldr	r3, [pc, #72]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000666:	4a13      	ldr	r2, [pc, #76]	@ (80006b4 <MX_I2C1_Init+0x54>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <MX_I2C1_Init+0x58>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800067e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000684:	4b0a      	ldr	r3, [pc, #40]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800068a:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_I2C1_Init+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <MX_I2C1_Init+0x50>)
 800069e:	f003 f84f 	bl	8003740 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 f988 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	2000033c 	.word	0x2000033c
 80006b4:	40005400 	.word	0x40005400
 80006b8:	000186a0 	.word	0x000186a0

080006bc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006c0:	4b13      	ldr	r3, [pc, #76]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c2:	4a14      	ldr	r2, [pc, #80]	@ (8000714 <MX_I2S3_Init+0x58>)
 80006c4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006cc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ce:	4b10      	ldr	r3, [pc, #64]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006da:	4b0d      	ldr	r3, [pc, #52]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006e0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000718 <MX_I2S3_Init+0x5c>)
 80006e6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006e8:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ee:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_I2S3_Init+0x54>)
 80006fc:	f003 f964 	bl	80039c8 <HAL_I2S_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000706:	f000 f959 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000390 	.word	0x20000390
 8000714:	40003c00 	.word	0x40003c00
 8000718:	00017700 	.word	0x00017700

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f004 fbd7 	bl	8004f20 <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f920 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200003d8 	.word	0x200003d8
 8000784:	40013000 	.word	0x40013000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	@ 0x30
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	61bb      	str	r3, [r7, #24]
 80007a2:	4b72      	ldr	r3, [pc, #456]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	4a71      	ldr	r2, [pc, #452]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ae:	4b6f      	ldr	r3, [pc, #444]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	4b6b      	ldr	r3, [pc, #428]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a6a      	ldr	r2, [pc, #424]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b68      	ldr	r3, [pc, #416]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
 80007d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
 80007da:	4b64      	ldr	r3, [pc, #400]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a63      	ldr	r2, [pc, #396]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b61      	ldr	r3, [pc, #388]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b5d      	ldr	r3, [pc, #372]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a5c      	ldr	r2, [pc, #368]	@ (800096c <MX_GPIO_Init+0x1e4>)
 80007fc:	f043 0301 	orr.w	r3, r3, #1
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	4b56      	ldr	r3, [pc, #344]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a55      	ldr	r2, [pc, #340]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b53      	ldr	r3, [pc, #332]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a4e      	ldr	r2, [pc, #312]	@ (800096c <MX_GPIO_Init+0x1e4>)
 8000834:	f043 0308 	orr.w	r3, r3, #8
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <MX_GPIO_Init+0x1e4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0308 	and.w	r3, r3, #8
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2108      	movs	r1, #8
 800084a:	4849      	ldr	r0, [pc, #292]	@ (8000970 <MX_GPIO_Init+0x1e8>)
 800084c:	f000 fe2a 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000850:	2201      	movs	r2, #1
 8000852:	2101      	movs	r1, #1
 8000854:	4847      	ldr	r0, [pc, #284]	@ (8000974 <MX_GPIO_Init+0x1ec>)
 8000856:	f000 fe25 	bl	80014a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800085a:	2200      	movs	r2, #0
 800085c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000860:	4845      	ldr	r0, [pc, #276]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000862:	f000 fe1f 	bl	80014a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	483c      	ldr	r0, [pc, #240]	@ (8000970 <MX_GPIO_Init+0x1e8>)
 800087e:	f000 fc75 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000882:	2301      	movs	r3, #1
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <MX_GPIO_Init+0x1ec>)
 800089a:	f000 fc67 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800089e:	2308      	movs	r3, #8
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ae:	2305      	movs	r3, #5
 80008b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	4619      	mov	r1, r3
 80008b8:	482e      	ldr	r0, [pc, #184]	@ (8000974 <MX_GPIO_Init+0x1ec>)
 80008ba:	f000 fc57 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	2301      	movs	r3, #1
 80008c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008c2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	482a      	ldr	r0, [pc, #168]	@ (800097c <MX_GPIO_Init+0x1f4>)
 80008d4:	f000 fc4a 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008d8:	2304      	movs	r3, #4
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	4825      	ldr	r0, [pc, #148]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 80008ec:	f000 fc3e 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000902:	2305      	movs	r3, #5
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	481c      	ldr	r0, [pc, #112]	@ (8000980 <MX_GPIO_Init+0x1f8>)
 800090e:	f000 fc2d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000912:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000916:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000918:	2301      	movs	r3, #1
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	2300      	movs	r3, #0
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000920:	2300      	movs	r3, #0
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4813      	ldr	r0, [pc, #76]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 800092c:	f000 fc1e 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000930:	2320      	movs	r3, #32
 8000932:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <MX_GPIO_Init+0x1f0>)
 8000944:	f000 fc12 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000948:	2302      	movs	r3, #2
 800094a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800094c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_GPIO_Init+0x1e8>)
 800095e:	f000 fc05 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	@ 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40021000 	.word	0x40021000
 8000974:	40020800 	.word	0x40020800
 8000978:	40020c00 	.word	0x40020c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40020400 	.word	0x40020400

08000984 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800098c:	f00a fd0c 	bl	800b3a8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000990:	2001      	movs	r0, #1
 8000992:	f008 fab8 	bl	8008f06 <osDelay>
 8000996:	e7fb      	b.n	8000990 <StartDefaultTask+0xc>

08000998 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d101      	bne.n	80009ae <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80009aa:	f000 fab9 	bl	8000f20 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40010000 	.word	0x40010000

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009c0:	b672      	cpsid	i
}
 80009c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <Error_Handler+0x8>

080009c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_MspInit+0x54>)
 80009d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d6:	4a11      	ldr	r2, [pc, #68]	@ (8000a1c <HAL_MspInit+0x54>)
 80009d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009de:	4b0f      	ldr	r3, [pc, #60]	@ (8000a1c <HAL_MspInit+0x54>)
 80009e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	603b      	str	r3, [r7, #0]
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <HAL_MspInit+0x54>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <HAL_MspInit+0x54>)
 80009f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <HAL_MspInit+0x54>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a02:	603b      	str	r3, [r7, #0]
 8000a04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	210f      	movs	r1, #15
 8000a0a:	f06f 0001 	mvn.w	r0, #1
 8000a0e:	f000 fb83 	bl	8001118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800

08000a20 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_I2C_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12c      	bne.n	8000a9c <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a5e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a64:	2312      	movs	r3, #18
 8000a66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a70:	2304      	movs	r3, #4
 8000a72:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480c      	ldr	r0, [pc, #48]	@ (8000aac <HAL_I2C_MspInit+0x8c>)
 8000a7c:	f000 fb76 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a07      	ldr	r2, [pc, #28]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <HAL_I2C_MspInit+0x88>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000a9c:	bf00      	nop
 8000a9e:	3728      	adds	r7, #40	@ 0x28
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020400 	.word	0x40020400

08000ab0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a31      	ldr	r2, [pc, #196]	@ (8000ba0 <HAL_I2S_MspInit+0xf0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d15a      	bne.n	8000b96 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000ae4:	23c0      	movs	r3, #192	@ 0xc0
 8000ae6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4618      	mov	r0, r3
 8000af2:	f004 f8d3 	bl	8004c9c <HAL_RCCEx_PeriphCLKConfig>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000afc:	f7ff ff5e 	bl	80009bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b08:	4a26      	ldr	r2, [pc, #152]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b10:	4b24      	ldr	r3, [pc, #144]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b20      	ldr	r3, [pc, #128]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b24:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b40:	4a18      	ldr	r2, [pc, #96]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <HAL_I2S_MspInit+0xf4>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b54:	2310      	movs	r3, #16
 8000b56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b64:	2306      	movs	r3, #6
 8000b66:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <HAL_I2S_MspInit+0xf8>)
 8000b70:	f000 fafc 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b74:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000b78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b82:	2300      	movs	r3, #0
 8000b84:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b86:	2306      	movs	r3, #6
 8000b88:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4806      	ldr	r0, [pc, #24]	@ (8000bac <HAL_I2S_MspInit+0xfc>)
 8000b92:	f000 faeb 	bl	800116c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000b96:	bf00      	nop
 8000b98:	3738      	adds	r7, #56	@ 0x38
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40003c00 	.word	0x40003c00
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	40020800 	.word	0x40020800

08000bb0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	@ (8000c34 <HAL_SPI_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a17      	ldr	r2, [pc, #92]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <HAL_SPI_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c0a:	23e0      	movs	r3, #224	@ 0xe0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <HAL_SPI_MspInit+0x8c>)
 8000c26:	f000 faa1 	bl	800116c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40013000 	.word	0x40013000
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	@ 0x30
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
 8000c54:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <HAL_InitTick+0xd4>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c58:	4a2e      	ldr	r2, [pc, #184]	@ (8000d14 <HAL_InitTick+0xd4>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c60:	4b2c      	ldr	r3, [pc, #176]	@ (8000d14 <HAL_InitTick+0xd4>)
 8000c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c6c:	f107 020c 	add.w	r2, r7, #12
 8000c70:	f107 0310 	add.w	r3, r7, #16
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 ffde 	bl	8004c38 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c7c:	f003 ffc8 	bl	8004c10 <HAL_RCC_GetPCLK2Freq>
 8000c80:	4603      	mov	r3, r0
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c88:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <HAL_InitTick+0xd8>)
 8000c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c8e:	0c9b      	lsrs	r3, r3, #18
 8000c90:	3b01      	subs	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000c96:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <HAL_InitTick+0xe0>)
 8000c98:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c9a:	4b20      	ldr	r3, [pc, #128]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000c9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ca2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cae:	4b1b      	ldr	r3, [pc, #108]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b19      	ldr	r3, [pc, #100]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cba:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000cbc:	f004 f9b9 	bl	8005032 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d11b      	bne.n	8000d06 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cce:	4813      	ldr	r0, [pc, #76]	@ (8000d1c <HAL_InitTick+0xdc>)
 8000cd0:	f004 fa08 	bl	80050e4 <HAL_TIM_Base_Start_IT>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d111      	bne.n	8000d06 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ce2:	2019      	movs	r0, #25
 8000ce4:	f000 fa34 	bl	8001150 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2b0f      	cmp	r3, #15
 8000cec:	d808      	bhi.n	8000d00 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f000 fa10 	bl	8001118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <HAL_InitTick+0xe4>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
 8000cfe:	e002      	b.n	8000d06 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3730      	adds	r7, #48	@ 0x30
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	431bde83 	.word	0x431bde83
 8000d1c:	20000434 	.word	0x20000434
 8000d20:	40010000 	.word	0x40010000
 8000d24:	20000004 	.word	0x20000004

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <NMI_Handler+0x4>

08000d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <HardFault_Handler+0x4>

08000d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <MemManage_Handler+0x4>

08000d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <BusFault_Handler+0x4>

08000d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <UsageFault_Handler+0x4>

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d64:	4802      	ldr	r0, [pc, #8]	@ (8000d70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d66:	f004 fa2d 	bl	80051c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000434 	.word	0x20000434

08000d74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d78:	4802      	ldr	r0, [pc, #8]	@ (8000d84 <OTG_FS_IRQHandler+0x10>)
 8000d7a:	f000 fe8d 	bl	8001a98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20004984 	.word	0x20004984

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	@ (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	@ (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	@ (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	@ (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	@ (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f00a ff2e 	bl	800bc18 <__errno>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	220c      	movs	r2, #12
 8000dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	@ (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	@ (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20020000 	.word	0x20020000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	2000047c 	.word	0x2000047c
 8000df0:	20004eb0 	.word	0x20004eb0

08000df4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df8:	4b06      	ldr	r3, [pc, #24]	@ (8000e14 <SystemInit+0x20>)
 8000dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfe:	4a05      	ldr	r2, [pc, #20]	@ (8000e14 <SystemInit+0x20>)
 8000e00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e1c:	f7ff ffea 	bl	8000df4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e20:	480c      	ldr	r0, [pc, #48]	@ (8000e54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e22:	490d      	ldr	r1, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e24:	4a0d      	ldr	r2, [pc, #52]	@ (8000e5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e28:	e002      	b.n	8000e30 <LoopCopyDataInit>

08000e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2e:	3304      	adds	r3, #4

08000e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e34:	d3f9      	bcc.n	8000e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e36:	4a0a      	ldr	r2, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e38:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e3c:	e001      	b.n	8000e42 <LoopFillZerobss>

08000e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e40:	3204      	adds	r2, #4

08000e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e44:	d3fb      	bcc.n	8000e3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e46:	f00a feed 	bl	800bc24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4a:	f7ff fb71 	bl	8000530 <main>
  bx  lr    
 8000e4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e5c:	0800bde0 	.word	0x0800bde0
  ldr r2, =_sbss
 8000e60:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e64:	20004eac 	.word	0x20004eac

08000e68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC_IRQHandler>
	...

08000e6c <create_led_control_task>:
StackType_t xLedControlTaskStack[LED_CONTROL_TASK_STACK_SIZE];
TaskHandle_t xDefaulTaskHandle = NULL;


void create_led_control_task(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af04      	add	r7, sp, #16

	xDefaulTaskHandle = xTaskCreateStatic(led_control_task_code, /* Function that implements the task. */
 8000e72:	4b09      	ldr	r3, [pc, #36]	@ (8000e98 <create_led_control_task+0x2c>)
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <create_led_control_task+0x30>)
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	22c8      	movs	r2, #200	@ 0xc8
 8000e82:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <create_led_control_task+0x34>)
 8000e84:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <create_led_control_task+0x38>)
 8000e86:	f008 ff39 	bl	8009cfc <xTaskCreateStatic>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ea8 <create_led_control_task+0x3c>)
 8000e8e:	6013      	str	r3, [r2, #0]
			LED_CONTROL_TASK_PRIORITY, /* Priority at which the task is created. */
			xLedControlTaskStack, /* Array to use as the task's stack. */
			&xLedControlTaskBuffer /* Variable to hold the task's data structure. */
	);

}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000480 	.word	0x20000480
 8000e9c:	20000520 	.word	0x20000520
 8000ea0:	0800bd60 	.word	0x0800bd60
 8000ea4:	08000ead 	.word	0x08000ead
 8000ea8:	20000840 	.word	0x20000840

08000eac <led_control_task_code>:


void led_control_task_code(void *pvParameters)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
    /* The parameter value is expected to be 1 as 1 is passed in the
       pvParameters value in the call to xTaskCreateStatic(). */
    configASSERT( ( uint32_t ) pvParameters == 1UL );
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d00b      	beq.n	8000ed2 <led_control_task_code+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ebe:	f383 8811 	msr	BASEPRI, r3
 8000ec2:	f3bf 8f6f 	isb	sy
 8000ec6:	f3bf 8f4f 	dsb	sy
 8000eca:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	e7fd      	b.n	8000ece <led_control_task_code+0x22>

    for( ;; )
    {
        osDelay(1000);
 8000ed2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed6:	f008 f816 	bl	8008f06 <osDelay>
 8000eda:	e7fa      	b.n	8000ed2 <led_control_task_code+0x26>

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f1c <HAL_Init+0x40>)
 8000ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eec:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8000f1c <HAL_Init+0x40>)
 8000ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef8:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a07      	ldr	r2, [pc, #28]	@ (8000f1c <HAL_Init+0x40>)
 8000efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f04:	2003      	movs	r0, #3
 8000f06:	f000 f8fc 	bl	8001102 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0a:	200f      	movs	r0, #15
 8000f0c:	f7ff fe98 	bl	8000c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f10:	f7ff fd5a 	bl	80009c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40023c00 	.word	0x40023c00

08000f20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f24:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x20>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_IncTick+0x24>)
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000008 	.word	0x20000008
 8000f44:	20000844 	.word	0x20000844

08000f48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f4c:	4b03      	ldr	r3, [pc, #12]	@ (8000f5c <HAL_GetTick+0x14>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000844 	.word	0x20000844

08000f60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f68:	f7ff ffee 	bl	8000f48 <HAL_GetTick>
 8000f6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f78:	d005      	beq.n	8000f86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <HAL_Delay+0x44>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f86:	bf00      	nop
 8000f88:	f7ff ffde 	bl	8000f48 <HAL_GetTick>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	68fa      	ldr	r2, [r7, #12]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d8f7      	bhi.n	8000f88 <HAL_Delay+0x28>
  {
  }
}
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff4c 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112a:	f7ff ff61 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 800112e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ffb1 	bl	800109c <NVIC_EncodePriority>
 800113a:	4602      	mov	r2, r0
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff80 	bl	8001048 <__NVIC_SetPriority>
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff54 	bl	800100c <__NVIC_EnableIRQ>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	e16b      	b.n	8001460 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001188:	2201      	movs	r2, #1
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	f040 815a 	bne.w	800145a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0303 	and.w	r3, r3, #3
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d130      	bne.n	8001220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	68da      	ldr	r2, [r3, #12]
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	091b      	lsrs	r3, r3, #4
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	69b9      	ldr	r1, [r7, #24]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80b4 	beq.w	800145a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b60      	ldr	r3, [pc, #384]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 80012fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001300:	6453      	str	r3, [r2, #68]	@ 0x44
 8001302:	4b5d      	ldr	r3, [pc, #372]	@ (8001478 <HAL_GPIO_Init+0x30c>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800130e:	4a5b      	ldr	r2, [pc, #364]	@ (800147c <HAL_GPIO_Init+0x310>)
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	3302      	adds	r3, #2
 8001316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a52      	ldr	r2, [pc, #328]	@ (8001480 <HAL_GPIO_Init+0x314>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x226>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a51      	ldr	r2, [pc, #324]	@ (8001484 <HAL_GPIO_Init+0x318>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x222>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a50      	ldr	r2, [pc, #320]	@ (8001488 <HAL_GPIO_Init+0x31c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x21e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4f      	ldr	r2, [pc, #316]	@ (800148c <HAL_GPIO_Init+0x320>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x21a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4e      	ldr	r2, [pc, #312]	@ (8001490 <HAL_GPIO_Init+0x324>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x216>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a4d      	ldr	r2, [pc, #308]	@ (8001494 <HAL_GPIO_Init+0x328>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x212>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4c      	ldr	r2, [pc, #304]	@ (8001498 <HAL_GPIO_Init+0x32c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4b      	ldr	r2, [pc, #300]	@ (800149c <HAL_GPIO_Init+0x330>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x20a>
 8001372:	2307      	movs	r3, #7
 8001374:	e00e      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001376:	2308      	movs	r3, #8
 8001378:	e00c      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137a:	2306      	movs	r3, #6
 800137c:	e00a      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800137e:	2305      	movs	r3, #5
 8001380:	e008      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001382:	2304      	movs	r3, #4
 8001384:	e006      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001386:	2303      	movs	r3, #3
 8001388:	e004      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138a:	2302      	movs	r3, #2
 800138c:	e002      	b.n	8001394 <HAL_GPIO_Init+0x228>
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_GPIO_Init+0x228>
 8001392:	2300      	movs	r3, #0
 8001394:	69fa      	ldr	r2, [r7, #28]
 8001396:	f002 0203 	and.w	r2, r2, #3
 800139a:	0092      	lsls	r2, r2, #2
 800139c:	4093      	lsls	r3, r2
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013a4:	4935      	ldr	r1, [pc, #212]	@ (800147c <HAL_GPIO_Init+0x310>)
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	089b      	lsrs	r3, r3, #2
 80013aa:	3302      	adds	r3, #2
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013d6:	4a32      	ldr	r2, [pc, #200]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013dc:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001400:	4a27      	ldr	r2, [pc, #156]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	43db      	mvns	r3, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4013      	ands	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d003      	beq.n	800142a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	4313      	orrs	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800142a:	4a1d      	ldr	r2, [pc, #116]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001430:	4b1b      	ldr	r3, [pc, #108]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	43db      	mvns	r3, r3
 800143a:	69ba      	ldr	r2, [r7, #24]
 800143c:	4013      	ands	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001454:	4a12      	ldr	r2, [pc, #72]	@ (80014a0 <HAL_GPIO_Init+0x334>)
 8001456:	69bb      	ldr	r3, [r7, #24]
 8001458:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3301      	adds	r3, #1
 800145e:	61fb      	str	r3, [r7, #28]
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	f67f ae90 	bls.w	8001188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3724      	adds	r7, #36	@ 0x24
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40023800 	.word	0x40023800
 800147c:	40013800 	.word	0x40013800
 8001480:	40020000 	.word	0x40020000
 8001484:	40020400 	.word	0x40020400
 8001488:	40020800 	.word	0x40020800
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021000 	.word	0x40021000
 8001494:	40021400 	.word	0x40021400
 8001498:	40021800 	.word	0x40021800
 800149c:	40021c00 	.word	0x40021c00
 80014a0:	40013c00 	.word	0x40013c00

080014a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014b4:	787b      	ldrb	r3, [r7, #1]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ba:	887a      	ldrh	r2, [r7, #2]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014c2:	887b      	ldrh	r3, [r7, #2]
 80014c4:	041a      	lsls	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	619a      	str	r2, [r3, #24]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80014d6:	b580      	push	{r7, lr}
 80014d8:	b086      	sub	sp, #24
 80014da:	af02      	add	r7, sp, #8
 80014dc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e059      	b.n	800159c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d106      	bne.n	8001508 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f009 ffa4 	bl	800b450 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001516:	d102      	bne.n	800151e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4618      	mov	r0, r3
 8001524:	f004 f89b 	bl	800565e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6818      	ldr	r0, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	7c1a      	ldrb	r2, [r3, #16]
 8001530:	f88d 2000 	strb.w	r2, [sp]
 8001534:	3304      	adds	r3, #4
 8001536:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001538:	f004 f81c 	bl	8005574 <USB_CoreInit>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d005      	beq.n	800154e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2202      	movs	r2, #2
 8001546:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e026      	b.n	800159c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2101      	movs	r1, #1
 8001554:	4618      	mov	r0, r3
 8001556:	f004 f893 	bl	8005680 <USB_SetCurrentMode>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d005      	beq.n	800156c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e017      	b.n	800159c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	7c1a      	ldrb	r2, [r3, #16]
 8001574:	f88d 2000 	strb.w	r2, [sp]
 8001578:	3304      	adds	r3, #4
 800157a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800157c:	f004 fa36 	bl	80059ec <USB_HostInit>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d005      	beq.n	8001592 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2202      	movs	r2, #2
 800158a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e004      	b.n	800159c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2201      	movs	r2, #1
 8001596:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b08b      	sub	sp, #44	@ 0x2c
 80015a8:	af04      	add	r7, sp, #16
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	70fb      	strb	r3, [r7, #3]
 80015b6:	460b      	mov	r3, r1
 80015b8:	70bb      	strb	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80015be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80015c0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d101      	bne.n	80015d0 <HAL_HCD_HC_Init+0x2c>
 80015cc:	2302      	movs	r3, #2
 80015ce:	e09d      	b.n	800170c <HAL_HCD_HC_Init+0x168>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80015d8:	78fa      	ldrb	r2, [r7, #3]
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	4613      	mov	r3, r2
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	1a9b      	subs	r3, r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	440b      	add	r3, r1
 80015e6:	3319      	adds	r3, #25
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3314      	adds	r3, #20
 80015fc:	787a      	ldrb	r2, [r7, #1]
 80015fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001600:	78fa      	ldrb	r2, [r7, #3]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4613      	mov	r3, r2
 8001606:	011b      	lsls	r3, r3, #4
 8001608:	1a9b      	subs	r3, r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	440b      	add	r3, r1
 800160e:	3315      	adds	r3, #21
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001614:	78fa      	ldrb	r2, [r7, #3]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	011b      	lsls	r3, r3, #4
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	440b      	add	r3, r1
 8001622:	3326      	adds	r3, #38	@ 0x26
 8001624:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001628:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800162a:	78fa      	ldrb	r2, [r7, #3]
 800162c:	78bb      	ldrb	r3, [r7, #2]
 800162e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001632:	b2d8      	uxtb	r0, r3
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	011b      	lsls	r3, r3, #4
 800163a:	1a9b      	subs	r3, r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	3316      	adds	r3, #22
 8001642:	4602      	mov	r2, r0
 8001644:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001646:	78fb      	ldrb	r3, [r7, #3]
 8001648:	4619      	mov	r1, r3
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 fbc8 	bl	8001de0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001650:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001654:	2b00      	cmp	r3, #0
 8001656:	da0a      	bge.n	800166e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001658:	78fa      	ldrb	r2, [r7, #3]
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	011b      	lsls	r3, r3, #4
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	3317      	adds	r3, #23
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e009      	b.n	8001682 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800166e:	78fa      	ldrb	r2, [r7, #3]
 8001670:	6879      	ldr	r1, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	1a9b      	subs	r3, r3, r2
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	440b      	add	r3, r1
 800167c:	3317      	adds	r3, #23
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f004 fb14 	bl	8005cb4 <USB_GetHostSpeed>
 800168c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800168e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10b      	bne.n	80016ae <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800169a:	2b01      	cmp	r3, #1
 800169c:	d107      	bne.n	80016ae <HAL_HCD_HC_Init+0x10a>
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d104      	bne.n	80016ae <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	2bbc      	cmp	r3, #188	@ 0xbc
 80016a8:	d901      	bls.n	80016ae <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80016aa:	23bc      	movs	r3, #188	@ 0xbc
 80016ac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	1a9b      	subs	r3, r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	3318      	adds	r3, #24
 80016be:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80016c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	b298      	uxth	r0, r3
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	4613      	mov	r3, r2
 80016ce:	011b      	lsls	r3, r3, #4
 80016d0:	1a9b      	subs	r3, r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	3328      	adds	r3, #40	@ 0x28
 80016d8:	4602      	mov	r2, r0
 80016da:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	787c      	ldrb	r4, [r7, #1]
 80016e6:	78ba      	ldrb	r2, [r7, #2]
 80016e8:	78f9      	ldrb	r1, [r7, #3]
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	4623      	mov	r3, r4
 80016fa:	f004 fb03 	bl	8005d04 <USB_HC_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800170a:	7bfb      	ldrb	r3, [r7, #15]
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}

08001714 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800172a:	2b01      	cmp	r3, #1
 800172c:	d101      	bne.n	8001732 <HAL_HCD_HC_Halt+0x1e>
 800172e:	2302      	movs	r3, #2
 8001730:	e00f      	b.n	8001752 <HAL_HCD_HC_Halt+0x3e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	78fa      	ldrb	r2, [r7, #3]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f004 fe95 	bl	8006472 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	70fb      	strb	r3, [r7, #3]
 800176e:	460b      	mov	r3, r1
 8001770:	70bb      	strb	r3, [r7, #2]
 8001772:	4613      	mov	r3, r2
 8001774:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001776:	78fa      	ldrb	r2, [r7, #3]
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4613      	mov	r3, r2
 800177c:	011b      	lsls	r3, r3, #4
 800177e:	1a9b      	subs	r3, r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	440b      	add	r3, r1
 8001784:	3317      	adds	r3, #23
 8001786:	78ba      	ldrb	r2, [r7, #2]
 8001788:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800178a:	78fa      	ldrb	r2, [r7, #3]
 800178c:	6879      	ldr	r1, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	440b      	add	r3, r1
 8001798:	3326      	adds	r3, #38	@ 0x26
 800179a:	787a      	ldrb	r2, [r7, #1]
 800179c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800179e:	7c3b      	ldrb	r3, [r7, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d114      	bne.n	80017ce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80017a4:	78fa      	ldrb	r2, [r7, #3]
 80017a6:	6879      	ldr	r1, [r7, #4]
 80017a8:	4613      	mov	r3, r2
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	1a9b      	subs	r3, r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	332a      	adds	r3, #42	@ 0x2a
 80017b4:	2203      	movs	r2, #3
 80017b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80017b8:	78fa      	ldrb	r2, [r7, #3]
 80017ba:	6879      	ldr	r1, [r7, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	1a9b      	subs	r3, r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	3319      	adds	r3, #25
 80017c8:	7f3a      	ldrb	r2, [r7, #28]
 80017ca:	701a      	strb	r2, [r3, #0]
 80017cc:	e009      	b.n	80017e2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ce:	78fa      	ldrb	r2, [r7, #3]
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4613      	mov	r3, r2
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	1a9b      	subs	r3, r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	332a      	adds	r3, #42	@ 0x2a
 80017de:	2202      	movs	r2, #2
 80017e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80017e2:	787b      	ldrb	r3, [r7, #1]
 80017e4:	2b03      	cmp	r3, #3
 80017e6:	f200 8102 	bhi.w	80019ee <HAL_HCD_HC_SubmitRequest+0x292>
 80017ea:	a201      	add	r2, pc, #4	@ (adr r2, 80017f0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80017ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f0:	08001801 	.word	0x08001801
 80017f4:	080019d9 	.word	0x080019d9
 80017f8:	080018c5 	.word	0x080018c5
 80017fc:	0800194f 	.word	0x0800194f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001800:	7c3b      	ldrb	r3, [r7, #16]
 8001802:	2b01      	cmp	r3, #1
 8001804:	f040 80f5 	bne.w	80019f2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001808:	78bb      	ldrb	r3, [r7, #2]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d12d      	bne.n	800186a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800180e:	8b3b      	ldrh	r3, [r7, #24]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d109      	bne.n	8001828 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001814:	78fa      	ldrb	r2, [r7, #3]
 8001816:	6879      	ldr	r1, [r7, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	1a9b      	subs	r3, r3, r2
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	440b      	add	r3, r1
 8001822:	333d      	adds	r3, #61	@ 0x3d
 8001824:	2201      	movs	r2, #1
 8001826:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001828:	78fa      	ldrb	r2, [r7, #3]
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4613      	mov	r3, r2
 800182e:	011b      	lsls	r3, r3, #4
 8001830:	1a9b      	subs	r3, r3, r2
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	440b      	add	r3, r1
 8001836:	333d      	adds	r3, #61	@ 0x3d
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10a      	bne.n	8001854 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800183e:	78fa      	ldrb	r2, [r7, #3]
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	1a9b      	subs	r3, r3, r2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	440b      	add	r3, r1
 800184c:	332a      	adds	r3, #42	@ 0x2a
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001852:	e0ce      	b.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001854:	78fa      	ldrb	r2, [r7, #3]
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	011b      	lsls	r3, r3, #4
 800185c:	1a9b      	subs	r3, r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	440b      	add	r3, r1
 8001862:	332a      	adds	r3, #42	@ 0x2a
 8001864:	2202      	movs	r2, #2
 8001866:	701a      	strb	r2, [r3, #0]
      break;
 8001868:	e0c3      	b.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800186a:	78fa      	ldrb	r2, [r7, #3]
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4613      	mov	r3, r2
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	331a      	adds	r3, #26
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	f040 80b8 	bne.w	80019f2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001882:	78fa      	ldrb	r2, [r7, #3]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	4613      	mov	r3, r2
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	1a9b      	subs	r3, r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	333c      	adds	r3, #60	@ 0x3c
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d10a      	bne.n	80018ae <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001898:	78fa      	ldrb	r2, [r7, #3]
 800189a:	6879      	ldr	r1, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	011b      	lsls	r3, r3, #4
 80018a0:	1a9b      	subs	r3, r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	332a      	adds	r3, #42	@ 0x2a
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
      break;
 80018ac:	e0a1      	b.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	1a9b      	subs	r3, r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	440b      	add	r3, r1
 80018bc:	332a      	adds	r3, #42	@ 0x2a
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
      break;
 80018c2:	e096      	b.n	80019f2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d120      	bne.n	800190c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018ca:	78fa      	ldrb	r2, [r7, #3]
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	1a9b      	subs	r3, r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	333d      	adds	r3, #61	@ 0x3d
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d10a      	bne.n	80018f6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e0:	78fa      	ldrb	r2, [r7, #3]
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	011b      	lsls	r3, r3, #4
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	332a      	adds	r3, #42	@ 0x2a
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80018f4:	e07e      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018f6:	78fa      	ldrb	r2, [r7, #3]
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	4613      	mov	r3, r2
 80018fc:	011b      	lsls	r3, r3, #4
 80018fe:	1a9b      	subs	r3, r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	440b      	add	r3, r1
 8001904:	332a      	adds	r3, #42	@ 0x2a
 8001906:	2202      	movs	r2, #2
 8001908:	701a      	strb	r2, [r3, #0]
      break;
 800190a:	e073      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800190c:	78fa      	ldrb	r2, [r7, #3]
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	4613      	mov	r3, r2
 8001912:	011b      	lsls	r3, r3, #4
 8001914:	1a9b      	subs	r3, r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	440b      	add	r3, r1
 800191a:	333c      	adds	r3, #60	@ 0x3c
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10a      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	4613      	mov	r3, r2
 8001928:	011b      	lsls	r3, r3, #4
 800192a:	1a9b      	subs	r3, r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	440b      	add	r3, r1
 8001930:	332a      	adds	r3, #42	@ 0x2a
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
      break;
 8001936:	e05d      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	332a      	adds	r3, #42	@ 0x2a
 8001948:	2202      	movs	r2, #2
 800194a:	701a      	strb	r2, [r3, #0]
      break;
 800194c:	e052      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800194e:	78bb      	ldrb	r3, [r7, #2]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d120      	bne.n	8001996 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001954:	78fa      	ldrb	r2, [r7, #3]
 8001956:	6879      	ldr	r1, [r7, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	333d      	adds	r3, #61	@ 0x3d
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10a      	bne.n	8001980 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800196a:	78fa      	ldrb	r2, [r7, #3]
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	011b      	lsls	r3, r3, #4
 8001972:	1a9b      	subs	r3, r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	440b      	add	r3, r1
 8001978:	332a      	adds	r3, #42	@ 0x2a
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800197e:	e039      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	332a      	adds	r3, #42	@ 0x2a
 8001990:	2202      	movs	r2, #2
 8001992:	701a      	strb	r2, [r3, #0]
      break;
 8001994:	e02e      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001996:	78fa      	ldrb	r2, [r7, #3]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	011b      	lsls	r3, r3, #4
 800199e:	1a9b      	subs	r3, r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	333c      	adds	r3, #60	@ 0x3c
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d10a      	bne.n	80019c2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	4613      	mov	r3, r2
 80019b2:	011b      	lsls	r3, r3, #4
 80019b4:	1a9b      	subs	r3, r3, r2
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	332a      	adds	r3, #42	@ 0x2a
 80019bc:	2200      	movs	r2, #0
 80019be:	701a      	strb	r2, [r3, #0]
      break;
 80019c0:	e018      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c2:	78fa      	ldrb	r2, [r7, #3]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	332a      	adds	r3, #42	@ 0x2a
 80019d2:	2202      	movs	r2, #2
 80019d4:	701a      	strb	r2, [r3, #0]
      break;
 80019d6:	e00d      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019d8:	78fa      	ldrb	r2, [r7, #3]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	4613      	mov	r3, r2
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	1a9b      	subs	r3, r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	440b      	add	r3, r1
 80019e6:	332a      	adds	r3, #42	@ 0x2a
 80019e8:	2200      	movs	r2, #0
 80019ea:	701a      	strb	r2, [r3, #0]
      break;
 80019ec:	e002      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80019ee:	bf00      	nop
 80019f0:	e000      	b.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80019f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	1a9b      	subs	r3, r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	440b      	add	r3, r1
 8001a02:	332c      	adds	r3, #44	@ 0x2c
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a08:	78fa      	ldrb	r2, [r7, #3]
 8001a0a:	8b39      	ldrh	r1, [r7, #24]
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	011b      	lsls	r3, r3, #4
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	4403      	add	r3, r0
 8001a18:	3334      	adds	r3, #52	@ 0x34
 8001a1a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	334c      	adds	r3, #76	@ 0x4c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a30:	78fa      	ldrb	r2, [r7, #3]
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	4613      	mov	r3, r2
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	1a9b      	subs	r3, r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	3338      	adds	r3, #56	@ 0x38
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a44:	78fa      	ldrb	r2, [r7, #3]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	011b      	lsls	r3, r3, #4
 8001a4c:	1a9b      	subs	r3, r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	3315      	adds	r3, #21
 8001a54:	78fa      	ldrb	r2, [r7, #3]
 8001a56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a58:	78fa      	ldrb	r2, [r7, #3]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	011b      	lsls	r3, r3, #4
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	440b      	add	r3, r1
 8001a66:	334d      	adds	r3, #77	@ 0x4d
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	4613      	mov	r3, r2
 8001a74:	011b      	lsls	r3, r3, #4
 8001a76:	1a9b      	subs	r3, r3, r2
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	3310      	adds	r3, #16
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4413      	add	r3, r2
 8001a80:	1d19      	adds	r1, r3, #4
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	799b      	ldrb	r3, [r3, #6]
 8001a86:	461a      	mov	r2, r3
 8001a88:	f004 fa68 	bl	8005f5c <USB_HC_StartXfer>
 8001a8c:	4603      	mov	r3, r0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop

08001a98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f003 ff5c 	bl	800596c <USB_GetMode>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	f040 80fb 	bne.w	8001cb2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f003 ff1f 	bl	8005904 <USB_ReadInterrupts>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80f1 	beq.w	8001cb0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 ff16 	bl	8005904 <USB_ReadInterrupts>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ade:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001ae2:	d104      	bne.n	8001aee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f003 ff06 	bl	8005904 <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001afe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001b02:	d104      	bne.n	8001b0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 fef6 	bl	8005904 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b1e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001b22:	d104      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 fee6 	bl	8005904 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d103      	bne.n	8001b4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2202      	movs	r2, #2
 8001b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fed8 	bl	8005904 <USB_ReadInterrupts>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b5e:	d120      	bne.n	8001ba2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001b68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d113      	bne.n	8001ba2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	6938      	ldr	r0, [r7, #16]
 8001b7e:	f003 fdcb 	bl	8005718 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001b82:	6938      	ldr	r0, [r7, #16]
 8001b84:	f003 fdfa 	bl	800577c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	7a5b      	ldrb	r3, [r3, #9]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d105      	bne.n	8001b9c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 ffec 	bl	8005b74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f009 fcd5 	bl	800b54c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f003 feac 	bl	8005904 <USB_ReadInterrupts>
 8001bac:	4603      	mov	r3, r0
 8001bae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001bb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb6:	d102      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f001 fd4d 	bl	8003658 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fe9e 	bl	8005904 <USB_ReadInterrupts>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d106      	bne.n	8001be0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f009 fc9e 	bl	800b514 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2208      	movs	r2, #8
 8001bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f003 fe8d 	bl	8005904 <USB_ReadInterrupts>
 8001bea:	4603      	mov	r3, r0
 8001bec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bf4:	d139      	bne.n	8001c6a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fc28 	bl	8006450 <USB_HC_ReadInterrupt>
 8001c00:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	e025      	b.n	8001c54 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 030f 	and.w	r3, r3, #15
 8001c0e:	68ba      	ldr	r2, [r7, #8]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d018      	beq.n	8001c4e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	015a      	lsls	r2, r3, #5
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001c2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c32:	d106      	bne.n	8001c42 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f905 	bl	8001e4a <HCD_HC_IN_IRQHandler>
 8001c40:	e005      	b.n	8001c4e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	4619      	mov	r1, r3
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f000 ff67 	bl	8002b1c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3301      	adds	r3, #1
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	795b      	ldrb	r3, [r3, #5]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d3d3      	bcc.n	8001c08 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fe48 	bl	8005904 <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 0310 	and.w	r3, r3, #16
 8001c7a:	2b10      	cmp	r3, #16
 8001c7c:	d101      	bne.n	8001c82 <HAL_HCD_IRQHandler+0x1ea>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_HCD_IRQHandler+0x1ec>
 8001c82:	2300      	movs	r3, #0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d014      	beq.n	8001cb2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699a      	ldr	r2, [r3, #24]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 0210 	bic.w	r2, r2, #16
 8001c96:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f001 fbfe 	bl	800349a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699a      	ldr	r2, [r3, #24]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0210 	orr.w	r2, r2, #16
 8001cac:	619a      	str	r2, [r3, #24]
 8001cae:	e000      	b.n	8001cb2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001cb0:	bf00      	nop
    }
  }
}
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_HCD_Start+0x16>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e013      	b.n	8001cf6 <HAL_HCD_Start+0x3e>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f003 ffb0 	bl	8005c42 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fca8 	bl	800563c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b082      	sub	sp, #8
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d101      	bne.n	8001d14 <HAL_HCD_Stop+0x16>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e00d      	b.n	8001d30 <HAL_HCD_Stop+0x32>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f004 fd03 	bl	800672c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 ff52 	bl	8005bee <USB_ResetPort>
 8001d4a:	4603      	mov	r3, r0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	1a9b      	subs	r3, r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	334c      	adds	r3, #76	@ 0x4c
 8001d70:	781b      	ldrb	r3, [r3, #0]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	6879      	ldr	r1, [r7, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	440b      	add	r3, r1
 8001d98:	3338      	adds	r3, #56	@ 0x38
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 ff94 	bl	8005ce2 <USB_GetCurrentFrame>
 8001dba:	4603      	mov	r3, r0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 ff6f 	bl	8005cb4 <USB_GetHostSpeed>
 8001dd6:	4603      	mov	r3, r0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001dec:	78fa      	ldrb	r2, [r7, #3]
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	011b      	lsls	r3, r3, #4
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	331a      	adds	r3, #26
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001e00:	78fa      	ldrb	r2, [r7, #3]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	1a9b      	subs	r3, r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	331b      	adds	r3, #27
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001e14:	78fa      	ldrb	r2, [r7, #3]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	1a9b      	subs	r3, r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3325      	adds	r3, #37	@ 0x25
 8001e24:	2200      	movs	r2, #0
 8001e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3324      	adds	r3, #36	@ 0x24
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b086      	sub	sp, #24
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 fd5e 	bl	800592a <USB_ReadChInterrupts>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d11a      	bne.n	8001eae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e84:	461a      	mov	r2, r3
 8001e86:	2304      	movs	r3, #4
 8001e88:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001e8a:	78fa      	ldrb	r2, [r7, #3]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	1a9b      	subs	r3, r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	334d      	adds	r3, #77	@ 0x4d
 8001e9a:	2207      	movs	r2, #7
 8001e9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	78fa      	ldrb	r2, [r7, #3]
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f004 fae3 	bl	8006472 <USB_HC_Halt>
 8001eac:	e09e      	b.n	8001fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f003 fd37 	bl	800592a <USB_ReadChInterrupts>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ec6:	d11b      	bne.n	8001f00 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001edc:	78fa      	ldrb	r2, [r7, #3]
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	334d      	adds	r3, #77	@ 0x4d
 8001eec:	2208      	movs	r2, #8
 8001eee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	78fa      	ldrb	r2, [r7, #3]
 8001ef6:	4611      	mov	r1, r2
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f004 faba 	bl	8006472 <USB_HC_Halt>
 8001efe:	e075      	b.n	8001fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f003 fd0e 	bl	800592a <USB_ReadChInterrupts>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d11a      	bne.n	8001f4e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001f18:	78fb      	ldrb	r3, [r7, #3]
 8001f1a:	015a      	lsls	r2, r3, #5
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4413      	add	r3, r2
 8001f20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f24:	461a      	mov	r2, r3
 8001f26:	2308      	movs	r3, #8
 8001f28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001f2a:	78fa      	ldrb	r2, [r7, #3]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	011b      	lsls	r3, r3, #4
 8001f32:	1a9b      	subs	r3, r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	334d      	adds	r3, #77	@ 0x4d
 8001f3a:	2206      	movs	r2, #6
 8001f3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	78fa      	ldrb	r2, [r7, #3]
 8001f44:	4611      	mov	r1, r2
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 fa93 	bl	8006472 <USB_HC_Halt>
 8001f4c:	e04e      	b.n	8001fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	78fa      	ldrb	r2, [r7, #3]
 8001f54:	4611      	mov	r1, r2
 8001f56:	4618      	mov	r0, r3
 8001f58:	f003 fce7 	bl	800592a <USB_ReadChInterrupts>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f66:	d11b      	bne.n	8001fa0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	015a      	lsls	r2, r3, #5
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4413      	add	r3, r2
 8001f70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f74:	461a      	mov	r2, r3
 8001f76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f7a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001f7c:	78fa      	ldrb	r2, [r7, #3]
 8001f7e:	6879      	ldr	r1, [r7, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	011b      	lsls	r3, r3, #4
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	334d      	adds	r3, #77	@ 0x4d
 8001f8c:	2209      	movs	r2, #9
 8001f8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	4611      	mov	r1, r2
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f004 fa6a 	bl	8006472 <USB_HC_Halt>
 8001f9e:	e025      	b.n	8001fec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	78fa      	ldrb	r2, [r7, #3]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 fcbe 	bl	800592a <USB_ReadChInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb4:	2b80      	cmp	r3, #128	@ 0x80
 8001fb6:	d119      	bne.n	8001fec <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	015a      	lsls	r2, r3, #5
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	2380      	movs	r3, #128	@ 0x80
 8001fc8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	334d      	adds	r3, #77	@ 0x4d
 8001fda:	2207      	movs	r2, #7
 8001fdc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	78fa      	ldrb	r2, [r7, #3]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f004 fa43 	bl	8006472 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	78fa      	ldrb	r2, [r7, #3]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f003 fc98 	bl	800592a <USB_ReadChInterrupts>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002004:	d112      	bne.n	800202c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	4611      	mov	r1, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fa2f 	bl	8006472 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	015a      	lsls	r2, r3, #5
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	4413      	add	r3, r2
 800201c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002020:	461a      	mov	r2, r3
 8002022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002026:	6093      	str	r3, [r2, #8]
 8002028:	f000 bd75 	b.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	78fa      	ldrb	r2, [r7, #3]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fc78 	bl	800592a <USB_ReadChInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	f040 8128 	bne.w	8002296 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002052:	461a      	mov	r2, r3
 8002054:	2320      	movs	r3, #32
 8002056:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	331b      	adds	r3, #27
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d119      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	331b      	adds	r3, #27
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002082:	78fb      	ldrb	r3, [r7, #3]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	78fa      	ldrb	r2, [r7, #3]
 8002092:	0151      	lsls	r1, r2, #5
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	440a      	add	r2, r1
 8002098:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800209c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	799b      	ldrb	r3, [r3, #6]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d01b      	beq.n	80020e2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3330      	adds	r3, #48	@ 0x30
 80020ba:	6819      	ldr	r1, [r3, #0]
 80020bc:	78fb      	ldrb	r3, [r7, #3]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	1ac9      	subs	r1, r1, r3
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	011b      	lsls	r3, r3, #4
 80020d8:	1a9b      	subs	r3, r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4403      	add	r3, r0
 80020de:	3338      	adds	r3, #56	@ 0x38
 80020e0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	334d      	adds	r3, #77	@ 0x4d
 80020f2:	2201      	movs	r2, #1
 80020f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	1a9b      	subs	r3, r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	3344      	adds	r3, #68	@ 0x44
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	015a      	lsls	r2, r3, #5
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4413      	add	r3, r2
 8002112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002116:	461a      	mov	r2, r3
 8002118:	2301      	movs	r3, #1
 800211a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3326      	adds	r3, #38	@ 0x26
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	3326      	adds	r3, #38	@ 0x26
 8002142:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002144:	2b02      	cmp	r3, #2
 8002146:	d110      	bne.n	800216a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	78fa      	ldrb	r2, [r7, #3]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f004 f98e 	bl	8006472 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	2310      	movs	r3, #16
 8002166:	6093      	str	r3, [r2, #8]
 8002168:	e03d      	b.n	80021e6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	6879      	ldr	r1, [r7, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	1a9b      	subs	r3, r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	440b      	add	r3, r1
 8002178:	3326      	adds	r3, #38	@ 0x26
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d00a      	beq.n	8002196 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3326      	adds	r3, #38	@ 0x26
 8002190:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002192:	2b01      	cmp	r3, #1
 8002194:	d127      	bne.n	80021e6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	0151      	lsls	r1, r2, #5
 80021a8:	693a      	ldr	r2, [r7, #16]
 80021aa:	440a      	add	r2, r1
 80021ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80021b4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80021b6:	78fa      	ldrb	r2, [r7, #3]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	1a9b      	subs	r3, r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	334c      	adds	r3, #76	@ 0x4c
 80021c6:	2201      	movs	r2, #1
 80021c8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80021ca:	78fa      	ldrb	r2, [r7, #3]
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	011b      	lsls	r3, r3, #4
 80021d2:	1a9b      	subs	r3, r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	334c      	adds	r3, #76	@ 0x4c
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	78fb      	ldrb	r3, [r7, #3]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f009 f9c1 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	799b      	ldrb	r3, [r3, #6]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d13b      	bne.n	8002266 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	1a9b      	subs	r3, r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	440b      	add	r3, r1
 80021fc:	3338      	adds	r3, #56	@ 0x38
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4403      	add	r3, r0
 800220e:	3328      	adds	r3, #40	@ 0x28
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	440b      	add	r3, r1
 8002214:	1e59      	subs	r1, r3, #1
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4403      	add	r3, r0
 8002224:	3328      	adds	r3, #40	@ 0x28
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	fbb1 f3f3 	udiv	r3, r1, r3
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	f000 8470 	beq.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002236:	78fa      	ldrb	r2, [r7, #3]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	333c      	adds	r3, #60	@ 0x3c
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	f083 0301 	eor.w	r3, r3, #1
 800224e:	b2d8      	uxtb	r0, r3
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	333c      	adds	r3, #60	@ 0x3c
 800225e:	4602      	mov	r2, r0
 8002260:	701a      	strb	r2, [r3, #0]
 8002262:	f000 bc58 	b.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	333c      	adds	r3, #60	@ 0x3c
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	f083 0301 	eor.w	r3, r3, #1
 800227e:	b2d8      	uxtb	r0, r3
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4613      	mov	r3, r2
 8002284:	011b      	lsls	r3, r3, #4
 8002286:	1a9b      	subs	r3, r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	440b      	add	r3, r1
 800228c:	333c      	adds	r3, #60	@ 0x3c
 800228e:	4602      	mov	r2, r0
 8002290:	701a      	strb	r2, [r3, #0]
 8002292:	f000 bc40 	b.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f003 fb43 	bl	800592a <USB_ReadChInterrupts>
 80022a4:	4603      	mov	r3, r0
 80022a6:	f003 0320 	and.w	r3, r3, #32
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d131      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	015a      	lsls	r2, r3, #5
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4413      	add	r3, r2
 80022b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022ba:	461a      	mov	r2, r3
 80022bc:	2320      	movs	r3, #32
 80022be:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	331a      	adds	r3, #26
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	f040 841f 	bne.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80022d8:	78fa      	ldrb	r2, [r7, #3]
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	1a9b      	subs	r3, r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	331b      	adds	r3, #27
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	334d      	adds	r3, #77	@ 0x4d
 80022fc:	2203      	movs	r2, #3
 80022fe:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	4611      	mov	r1, r2
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f8b2 	bl	8006472 <USB_HC_Halt>
 800230e:	f000 bc02 	b.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	78fa      	ldrb	r2, [r7, #3]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f003 fb05 	bl	800592a <USB_ReadChInterrupts>
 8002320:	4603      	mov	r3, r0
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b02      	cmp	r3, #2
 8002328:	f040 8305 	bne.w	8002936 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800232c:	78fb      	ldrb	r3, [r7, #3]
 800232e:	015a      	lsls	r2, r3, #5
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	4413      	add	r3, r2
 8002334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002338:	461a      	mov	r2, r3
 800233a:	2302      	movs	r3, #2
 800233c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	334d      	adds	r3, #77	@ 0x4d
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d114      	bne.n	800237e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	334d      	adds	r3, #77	@ 0x4d
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002368:	78fa      	ldrb	r2, [r7, #3]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	334c      	adds	r3, #76	@ 0x4c
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
 800237c:	e2cc      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800237e:	78fa      	ldrb	r2, [r7, #3]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	1a9b      	subs	r3, r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	334d      	adds	r3, #77	@ 0x4d
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b06      	cmp	r3, #6
 8002392:	d114      	bne.n	80023be <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002394:	78fa      	ldrb	r2, [r7, #3]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	334d      	adds	r3, #77	@ 0x4d
 80023a4:	2202      	movs	r2, #2
 80023a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	334c      	adds	r3, #76	@ 0x4c
 80023b8:	2205      	movs	r2, #5
 80023ba:	701a      	strb	r2, [r3, #0]
 80023bc:	e2ac      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	334d      	adds	r3, #77	@ 0x4d
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2b07      	cmp	r3, #7
 80023d2:	d00b      	beq.n	80023ec <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334d      	adds	r3, #77	@ 0x4d
 80023e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	f040 80a6 	bne.w	8002538 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	6879      	ldr	r1, [r7, #4]
 80023f0:	4613      	mov	r3, r2
 80023f2:	011b      	lsls	r3, r3, #4
 80023f4:	1a9b      	subs	r3, r3, r2
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	334d      	adds	r3, #77	@ 0x4d
 80023fc:	2202      	movs	r2, #2
 80023fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002400:	78fa      	ldrb	r2, [r7, #3]
 8002402:	6879      	ldr	r1, [r7, #4]
 8002404:	4613      	mov	r3, r2
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	1a9b      	subs	r3, r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	3344      	adds	r3, #68	@ 0x44
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	1c59      	adds	r1, r3, #1
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	4403      	add	r3, r0
 8002420:	3344      	adds	r3, #68	@ 0x44
 8002422:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002424:	78fa      	ldrb	r2, [r7, #3]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	1a9b      	subs	r3, r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3344      	adds	r3, #68	@ 0x44
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d943      	bls.n	80024c2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	3344      	adds	r3, #68	@ 0x44
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	331a      	adds	r3, #26
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d123      	bne.n	80024ac <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	331b      	adds	r3, #27
 8002474:	2200      	movs	r2, #0
 8002476:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	331c      	adds	r3, #28
 8002488:	2200      	movs	r2, #0
 800248a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800248c:	78fb      	ldrb	r3, [r7, #3]
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	4413      	add	r3, r2
 8002494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	78fa      	ldrb	r2, [r7, #3]
 800249c:	0151      	lsls	r1, r2, #5
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	440a      	add	r2, r1
 80024a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024aa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	334c      	adds	r3, #76	@ 0x4c
 80024bc:	2204      	movs	r2, #4
 80024be:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80024c0:	e229      	b.n	8002916 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	334c      	adds	r3, #76	@ 0x4c
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024d6:	78fa      	ldrb	r2, [r7, #3]
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	4613      	mov	r3, r2
 80024dc:	011b      	lsls	r3, r3, #4
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	009b      	lsls	r3, r3, #2
 80024e2:	440b      	add	r3, r1
 80024e4:	3326      	adds	r3, #38	@ 0x26
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4613      	mov	r3, r2
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	1a9b      	subs	r3, r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	440b      	add	r3, r1
 80024fa:	3326      	adds	r3, #38	@ 0x26
 80024fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f040 8209 	bne.w	8002916 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002504:	78fb      	ldrb	r3, [r7, #3]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800251a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002522:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	4413      	add	r3, r2
 800252c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002530:	461a      	mov	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002536:	e1ee      	b.n	8002916 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002538:	78fa      	ldrb	r2, [r7, #3]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	334d      	adds	r3, #77	@ 0x4d
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b05      	cmp	r3, #5
 800254c:	f040 80c8 	bne.w	80026e0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002550:	78fa      	ldrb	r2, [r7, #3]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	011b      	lsls	r3, r3, #4
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	334d      	adds	r3, #77	@ 0x4d
 8002560:	2202      	movs	r2, #2
 8002562:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002564:	78fa      	ldrb	r2, [r7, #3]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	331b      	adds	r3, #27
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 81ce 	bne.w	8002918 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800257c:	78fa      	ldrb	r2, [r7, #3]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4613      	mov	r3, r2
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3326      	adds	r3, #38	@ 0x26
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b03      	cmp	r3, #3
 8002590:	d16b      	bne.n	800266a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	6879      	ldr	r1, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	011b      	lsls	r3, r3, #4
 800259a:	1a9b      	subs	r3, r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	3348      	adds	r3, #72	@ 0x48
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	1c59      	adds	r1, r3, #1
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4403      	add	r3, r0
 80025b2:	3348      	adds	r3, #72	@ 0x48
 80025b4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80025b6:	78fa      	ldrb	r2, [r7, #3]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	1a9b      	subs	r3, r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	3348      	adds	r3, #72	@ 0x48
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d943      	bls.n	8002654 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80025cc:	78fa      	ldrb	r2, [r7, #3]
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	1a9b      	subs	r3, r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	440b      	add	r3, r1
 80025da:	3348      	adds	r3, #72	@ 0x48
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80025e0:	78fa      	ldrb	r2, [r7, #3]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	011b      	lsls	r3, r3, #4
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	331b      	adds	r3, #27
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	3344      	adds	r3, #68	@ 0x44
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d809      	bhi.n	800261e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	331c      	adds	r3, #28
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	0151      	lsls	r1, r2, #5
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	440a      	add	r2, r1
 8002634:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800263e:	78fa      	ldrb	r2, [r7, #3]
 8002640:	6879      	ldr	r1, [r7, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	334c      	adds	r3, #76	@ 0x4c
 800264e:	2204      	movs	r2, #4
 8002650:	701a      	strb	r2, [r3, #0]
 8002652:	e014      	b.n	800267e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002654:	78fa      	ldrb	r2, [r7, #3]
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	334c      	adds	r3, #76	@ 0x4c
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
 8002668:	e009      	b.n	800267e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	1a9b      	subs	r3, r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	334c      	adds	r3, #76	@ 0x4c
 800267a:	2202      	movs	r2, #2
 800267c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3326      	adds	r3, #38	@ 0x26
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00b      	beq.n	80026ac <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	3326      	adds	r3, #38	@ 0x26
 80026a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	f040 8136 	bne.w	8002918 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80026c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80026ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	015a      	lsls	r2, r3, #5
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d8:	461a      	mov	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e11b      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	334d      	adds	r3, #77	@ 0x4d
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b03      	cmp	r3, #3
 80026f4:	f040 8081 	bne.w	80027fa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334d      	adds	r3, #77	@ 0x4d
 8002708:	2202      	movs	r2, #2
 800270a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800270c:	78fa      	ldrb	r2, [r7, #3]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	011b      	lsls	r3, r3, #4
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	331b      	adds	r3, #27
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b01      	cmp	r3, #1
 8002720:	f040 80fa 	bne.w	8002918 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	334c      	adds	r3, #76	@ 0x4c
 8002734:	2202      	movs	r2, #2
 8002736:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	015a      	lsls	r2, r3, #5
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	4413      	add	r3, r2
 8002740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	78fa      	ldrb	r2, [r7, #3]
 8002748:	0151      	lsls	r1, r2, #5
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	440a      	add	r2, r1
 800274e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	78fa      	ldrb	r2, [r7, #3]
 8002768:	0151      	lsls	r1, r2, #5
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	440a      	add	r2, r1
 800276e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002776:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4413      	add	r3, r2
 8002780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	78fa      	ldrb	r2, [r7, #3]
 8002788:	0151      	lsls	r1, r2, #5
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	440a      	add	r2, r1
 800278e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002792:	f023 0320 	bic.w	r3, r3, #32
 8002796:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	3326      	adds	r3, #38	@ 0x26
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ae:	78fa      	ldrb	r2, [r7, #3]
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	4613      	mov	r3, r2
 80027b4:	011b      	lsls	r3, r3, #4
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	3326      	adds	r3, #38	@ 0x26
 80027be:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	f040 80a9 	bne.w	8002918 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027c6:	78fb      	ldrb	r3, [r7, #3]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027e6:	78fb      	ldrb	r3, [r7, #3]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	e08e      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80027fa:	78fa      	ldrb	r2, [r7, #3]
 80027fc:	6879      	ldr	r1, [r7, #4]
 80027fe:	4613      	mov	r3, r2
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	1a9b      	subs	r3, r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	334d      	adds	r3, #77	@ 0x4d
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b04      	cmp	r3, #4
 800280e:	d143      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334d      	adds	r3, #77	@ 0x4d
 8002820:	2202      	movs	r2, #2
 8002822:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002824:	78fa      	ldrb	r2, [r7, #3]
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	011b      	lsls	r3, r3, #4
 800282c:	1a9b      	subs	r3, r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	334c      	adds	r3, #76	@ 0x4c
 8002834:	2202      	movs	r2, #2
 8002836:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	3326      	adds	r3, #38	@ 0x26
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	6879      	ldr	r1, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	1a9b      	subs	r3, r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	440b      	add	r3, r1
 800285c:	3326      	adds	r3, #38	@ 0x26
 800285e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002860:	2b02      	cmp	r3, #2
 8002862:	d159      	bne.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800287a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002882:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002884:	78fb      	ldrb	r3, [r7, #3]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4413      	add	r3, r2
 800288c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002890:	461a      	mov	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e03f      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	334d      	adds	r3, #77	@ 0x4d
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b08      	cmp	r3, #8
 80028ac:	d126      	bne.n	80028fc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	334d      	adds	r3, #77	@ 0x4d
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	3344      	adds	r3, #68	@ 0x44
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	1c59      	adds	r1, r3, #1
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4403      	add	r3, r0
 80028e2:	3344      	adds	r3, #68	@ 0x44
 80028e4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80028e6:	78fa      	ldrb	r2, [r7, #3]
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	011b      	lsls	r3, r3, #4
 80028ee:	1a9b      	subs	r3, r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	334c      	adds	r3, #76	@ 0x4c
 80028f6:	2204      	movs	r2, #4
 80028f8:	701a      	strb	r2, [r3, #0]
 80028fa:	e00d      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80028fc:	78fa      	ldrb	r2, [r7, #3]
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	440b      	add	r3, r1
 800290a:	334d      	adds	r3, #77	@ 0x4d
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b02      	cmp	r3, #2
 8002910:	f000 8100 	beq.w	8002b14 <HCD_HC_IN_IRQHandler+0xcca>
 8002914:	e000      	b.n	8002918 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002916:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	4613      	mov	r3, r2
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	1a9b      	subs	r3, r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	334c      	adds	r3, #76	@ 0x4c
 8002928:	781a      	ldrb	r2, [r3, #0]
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f008 fe1a 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002934:	e0ef      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	4611      	mov	r1, r2
 800293e:	4618      	mov	r0, r3
 8002940:	f002 fff3 	bl	800592a <USB_ReadChInterrupts>
 8002944:	4603      	mov	r3, r0
 8002946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800294a:	2b40      	cmp	r3, #64	@ 0x40
 800294c:	d12f      	bne.n	80029ae <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295a:	461a      	mov	r2, r3
 800295c:	2340      	movs	r3, #64	@ 0x40
 800295e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002960:	78fa      	ldrb	r2, [r7, #3]
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	4613      	mov	r3, r2
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	1a9b      	subs	r3, r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	334d      	adds	r3, #77	@ 0x4d
 8002970:	2205      	movs	r2, #5
 8002972:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	6879      	ldr	r1, [r7, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	1a9b      	subs	r3, r3, r2
 800297e:	009b      	lsls	r3, r3, #2
 8002980:	440b      	add	r3, r1
 8002982:	331a      	adds	r3, #26
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800298a:	78fa      	ldrb	r2, [r7, #3]
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	4613      	mov	r3, r2
 8002990:	011b      	lsls	r3, r3, #4
 8002992:	1a9b      	subs	r3, r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	440b      	add	r3, r1
 8002998:	3344      	adds	r3, #68	@ 0x44
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fd63 	bl	8006472 <USB_HC_Halt>
 80029ac:	e0b3      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	4611      	mov	r1, r2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f002 ffb7 	bl	800592a <USB_ReadChInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b10      	cmp	r3, #16
 80029c4:	f040 80a7 	bne.w	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3326      	adds	r3, #38	@ 0x26
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d11b      	bne.n	8002a16 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3344      	adds	r3, #68	@ 0x44
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	6879      	ldr	r1, [r7, #4]
 80029f6:	4613      	mov	r3, r2
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	1a9b      	subs	r3, r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	440b      	add	r3, r1
 8002a00:	334d      	adds	r3, #77	@ 0x4d
 8002a02:	2204      	movs	r2, #4
 8002a04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fd2f 	bl	8006472 <USB_HC_Halt>
 8002a14:	e03f      	b.n	8002a96 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3326      	adds	r3, #38	@ 0x26
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a2c:	78fa      	ldrb	r2, [r7, #3]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	3326      	adds	r3, #38	@ 0x26
 8002a3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d129      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3344      	adds	r3, #68	@ 0x44
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	799b      	ldrb	r3, [r3, #6]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <HCD_HC_IN_IRQHandler+0xc2a>
 8002a5e:	78fa      	ldrb	r2, [r7, #3]
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	4613      	mov	r3, r2
 8002a64:	011b      	lsls	r3, r3, #4
 8002a66:	1a9b      	subs	r3, r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	440b      	add	r3, r1
 8002a6c:	331b      	adds	r3, #27
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d110      	bne.n	8002a96 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334d      	adds	r3, #77	@ 0x4d
 8002a84:	2204      	movs	r2, #4
 8002a86:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f003 fcee 	bl	8006472 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	331b      	adds	r3, #27
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d129      	bne.n	8002b00 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	331b      	adds	r3, #27
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	0151      	lsls	r1, r2, #5
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	440a      	add	r2, r1
 8002ad6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ade:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	015a      	lsls	r2, r3, #5
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	0151      	lsls	r1, r2, #5
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	440a      	add	r2, r1
 8002af6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002afa:	f043 0320 	orr.w	r3, r3, #32
 8002afe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2310      	movs	r3, #16
 8002b10:	6093      	str	r3, [r2, #8]
 8002b12:	e000      	b.n	8002b16 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002b14:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	78fa      	ldrb	r2, [r7, #3]
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f002 fef5 	bl	800592a <USB_ReadChInterrupts>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	d11b      	bne.n	8002b82 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b4a:	78fb      	ldrb	r3, [r7, #3]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b56:	461a      	mov	r2, r3
 8002b58:	2304      	movs	r3, #4
 8002b5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	334d      	adds	r3, #77	@ 0x4d
 8002b6c:	2207      	movs	r2, #7
 8002b6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	4611      	mov	r1, r2
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f003 fc7a 	bl	8006472 <USB_HC_Halt>
 8002b7e:	f000 bc89 	b.w	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	4611      	mov	r1, r2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 fecd 	bl	800592a <USB_ReadChInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b20      	cmp	r3, #32
 8002b98:	f040 8082 	bne.w	8002ca0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2320      	movs	r3, #32
 8002bac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	440b      	add	r3, r1
 8002bbc:	3319      	adds	r3, #25
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d124      	bne.n	8002c0e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002bc4:	78fa      	ldrb	r2, [r7, #3]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	3319      	adds	r3, #25
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	334c      	adds	r3, #76	@ 0x4c
 8002be8:	2202      	movs	r2, #2
 8002bea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	334d      	adds	r3, #77	@ 0x4d
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f003 fc32 	bl	8006472 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	331a      	adds	r3, #26
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	f040 8437 	bne.w	8003494 <HCD_HC_OUT_IRQHandler+0x978>
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	331b      	adds	r3, #27
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 842b 	bne.w	8003494 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3326      	adds	r3, #38	@ 0x26
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d009      	beq.n	8002c68 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	331b      	adds	r3, #27
 8002c64:	2201      	movs	r2, #1
 8002c66:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	334d      	adds	r3, #77	@ 0x4d
 8002c78:	2203      	movs	r2, #3
 8002c7a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	4611      	mov	r1, r2
 8002c84:	4618      	mov	r0, r3
 8002c86:	f003 fbf4 	bl	8006472 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	@ 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	e3f9      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 fe3e 	bl	800592a <USB_ReadChInterrupts>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cb8:	d111      	bne.n	8002cde <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ccc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f003 fbcb 	bl	8006472 <USB_HC_Halt>
 8002cdc:	e3da      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f002 fe1f 	bl	800592a <USB_ReadChInterrupts>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d168      	bne.n	8002dc8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	1a9b      	subs	r3, r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	3344      	adds	r3, #68	@ 0x44
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 fe09 	bl	800592a <USB_ReadChInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d1e:	2b40      	cmp	r3, #64	@ 0x40
 8002d20:	d112      	bne.n	8002d48 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3319      	adds	r3, #25
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	015a      	lsls	r2, r3, #5
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d42:	461a      	mov	r2, r3
 8002d44:	2340      	movs	r3, #64	@ 0x40
 8002d46:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	1a9b      	subs	r3, r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	331b      	adds	r3, #27
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d019      	beq.n	8002d92 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	331b      	adds	r3, #27
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	0151      	lsls	r1, r2, #5
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	440a      	add	r2, r1
 8002d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d90:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d92:	78fb      	ldrb	r3, [r7, #3]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2301      	movs	r3, #1
 8002da2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	334d      	adds	r3, #77	@ 0x4d
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	4611      	mov	r1, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f003 fb56 	bl	8006472 <USB_HC_Halt>
 8002dc6:	e365      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f002 fdaa 	bl	800592a <USB_ReadChInterrupts>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ddc:	2b40      	cmp	r3, #64	@ 0x40
 8002dde:	d139      	bne.n	8002e54 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	334d      	adds	r3, #77	@ 0x4d
 8002df0:	2205      	movs	r2, #5
 8002df2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002df4:	78fa      	ldrb	r2, [r7, #3]
 8002df6:	6879      	ldr	r1, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	440b      	add	r3, r1
 8002e02:	331a      	adds	r3, #26
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d109      	bne.n	8002e1e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3319      	adds	r3, #25
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3344      	adds	r3, #68	@ 0x44
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f003 fb19 	bl	8006472 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2340      	movs	r3, #64	@ 0x40
 8002e50:	6093      	str	r3, [r2, #8]
 8002e52:	e31f      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f002 fd64 	bl	800592a <USB_ReadChInterrupts>
 8002e62:	4603      	mov	r3, r0
 8002e64:	f003 0308 	and.w	r3, r3, #8
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d11a      	bne.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	334d      	adds	r3, #77	@ 0x4d
 8002e8e:	2206      	movs	r2, #6
 8002e90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 fae9 	bl	8006472 <USB_HC_Halt>
 8002ea0:	e2f8      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	78fa      	ldrb	r2, [r7, #3]
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f002 fd3d 	bl	800592a <USB_ReadChInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d144      	bne.n	8002f44 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3344      	adds	r3, #68	@ 0x44
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	334d      	adds	r3, #77	@ 0x4d
 8002ede:	2204      	movs	r2, #4
 8002ee0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3319      	adds	r3, #25
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d114      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	3318      	adds	r3, #24
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3319      	adds	r3, #25
 8002f1e:	2201      	movs	r2, #1
 8002f20:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	4611      	mov	r1, r2
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f003 faa1 	bl	8006472 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002f30:	78fb      	ldrb	r3, [r7, #3]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2310      	movs	r3, #16
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	e2a7      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f002 fcec 	bl	800592a <USB_ReadChInterrupts>
 8002f52:	4603      	mov	r3, r0
 8002f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f58:	2b80      	cmp	r3, #128	@ 0x80
 8002f5a:	f040 8083 	bne.w	8003064 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	799b      	ldrb	r3, [r3, #6]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d111      	bne.n	8002f8a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	334d      	adds	r3, #77	@ 0x4d
 8002f76:	2207      	movs	r2, #7
 8002f78:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f003 fa75 	bl	8006472 <USB_HC_Halt>
 8002f88:	e062      	b.n	8003050 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002f8a:	78fa      	ldrb	r2, [r7, #3]
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	3344      	adds	r3, #68	@ 0x44
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	1c59      	adds	r1, r3, #1
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	011b      	lsls	r3, r3, #4
 8002fa4:	1a9b      	subs	r3, r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4403      	add	r3, r0
 8002faa:	3344      	adds	r3, #68	@ 0x44
 8002fac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	3344      	adds	r3, #68	@ 0x44
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d922      	bls.n	800300a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3344      	adds	r3, #68	@ 0x44
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	334c      	adds	r3, #76	@ 0x4c
 8002fe8:	2204      	movs	r2, #4
 8002fea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334c      	adds	r3, #76	@ 0x4c
 8002ffc:	781a      	ldrb	r2, [r3, #0]
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f008 fab0 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003008:	e022      	b.n	8003050 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	@ 0x4c
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003034:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800303c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	461a      	mov	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003050:	78fb      	ldrb	r3, [r7, #3]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800305c:	461a      	mov	r2, r3
 800305e:	2380      	movs	r3, #128	@ 0x80
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	e217      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f002 fc5c 	bl	800592a <USB_ReadChInterrupts>
 8003072:	4603      	mov	r3, r0
 8003074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003078:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800307c:	d11b      	bne.n	80030b6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	334d      	adds	r3, #77	@ 0x4d
 800308e:	2209      	movs	r2, #9
 8003090:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 f9e9 	bl	8006472 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030b2:	6093      	str	r3, [r2, #8]
 80030b4:	e1ee      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f002 fc33 	bl	800592a <USB_ReadChInterrupts>
 80030c4:	4603      	mov	r3, r0
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	f040 81df 	bne.w	800348e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	461a      	mov	r2, r3
 80030de:	2302      	movs	r3, #2
 80030e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334d      	adds	r3, #77	@ 0x4d
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 8093 	bne.w	8003220 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	334d      	adds	r3, #77	@ 0x4d
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	1a9b      	subs	r3, r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	440b      	add	r3, r1
 800311c:	334c      	adds	r3, #76	@ 0x4c
 800311e:	2201      	movs	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	440b      	add	r3, r1
 8003130:	3326      	adds	r3, #38	@ 0x26
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d00b      	beq.n	8003150 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3326      	adds	r3, #38	@ 0x26
 8003148:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800314a:	2b03      	cmp	r3, #3
 800314c:	f040 8190 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	799b      	ldrb	r3, [r3, #6]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d115      	bne.n	8003184 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	333d      	adds	r3, #61	@ 0x3d
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	f083 0301 	eor.w	r3, r3, #1
 8003170:	b2d8      	uxtb	r0, r3
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4613      	mov	r3, r2
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	1a9b      	subs	r3, r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	440b      	add	r3, r1
 800317e:	333d      	adds	r3, #61	@ 0x3d
 8003180:	4602      	mov	r2, r0
 8003182:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	799b      	ldrb	r3, [r3, #6]
 8003188:	2b01      	cmp	r3, #1
 800318a:	f040 8171 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x954>
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3334      	adds	r3, #52	@ 0x34
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8165 	beq.w	8003470 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	011b      	lsls	r3, r3, #4
 80031ae:	1a9b      	subs	r3, r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	3334      	adds	r3, #52	@ 0x34
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4403      	add	r3, r0
 80031c6:	3328      	adds	r3, #40	@ 0x28
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	440b      	add	r3, r1
 80031cc:	1e59      	subs	r1, r3, #1
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4403      	add	r3, r0
 80031dc:	3328      	adds	r3, #40	@ 0x28
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 813f 	beq.w	8003470 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	333d      	adds	r3, #61	@ 0x3d
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	78fa      	ldrb	r2, [r7, #3]
 8003206:	f083 0301 	eor.w	r3, r3, #1
 800320a:	b2d8      	uxtb	r0, r3
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	333d      	adds	r3, #61	@ 0x3d
 800321a:	4602      	mov	r2, r0
 800321c:	701a      	strb	r2, [r3, #0]
 800321e:	e127      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	334d      	adds	r3, #77	@ 0x4d
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b03      	cmp	r3, #3
 8003234:	d120      	bne.n	8003278 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	4613      	mov	r3, r2
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	1a9b      	subs	r3, r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	440b      	add	r3, r1
 8003244:	334d      	adds	r3, #77	@ 0x4d
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	331b      	adds	r3, #27
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	f040 8107 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003262:	78fa      	ldrb	r2, [r7, #3]
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	4613      	mov	r3, r2
 8003268:	011b      	lsls	r3, r3, #4
 800326a:	1a9b      	subs	r3, r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	334c      	adds	r3, #76	@ 0x4c
 8003272:	2202      	movs	r2, #2
 8003274:	701a      	strb	r2, [r3, #0]
 8003276:	e0fb      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	334d      	adds	r3, #77	@ 0x4d
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b04      	cmp	r3, #4
 800328c:	d13a      	bne.n	8003304 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	334d      	adds	r3, #77	@ 0x4d
 800329e:	2202      	movs	r2, #2
 80032a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	334c      	adds	r3, #76	@ 0x4c
 80032b2:	2202      	movs	r2, #2
 80032b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	331b      	adds	r3, #27
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	f040 80d1 	bne.w	8003470 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	331b      	adds	r3, #27
 80032de:	2200      	movs	r2, #0
 80032e0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	0151      	lsls	r1, r2, #5
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	440a      	add	r2, r1
 80032f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003300:	6053      	str	r3, [r2, #4]
 8003302:	e0b5      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	334d      	adds	r3, #77	@ 0x4d
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	2b05      	cmp	r3, #5
 8003318:	d114      	bne.n	8003344 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	334d      	adds	r3, #77	@ 0x4d
 800332a:	2202      	movs	r2, #2
 800332c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800332e:	78fa      	ldrb	r2, [r7, #3]
 8003330:	6879      	ldr	r1, [r7, #4]
 8003332:	4613      	mov	r3, r2
 8003334:	011b      	lsls	r3, r3, #4
 8003336:	1a9b      	subs	r3, r3, r2
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	440b      	add	r3, r1
 800333c:	334c      	adds	r3, #76	@ 0x4c
 800333e:	2202      	movs	r2, #2
 8003340:	701a      	strb	r2, [r3, #0]
 8003342:	e095      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	334d      	adds	r3, #77	@ 0x4d
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b06      	cmp	r3, #6
 8003358:	d114      	bne.n	8003384 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334d      	adds	r3, #77	@ 0x4d
 800336a:	2202      	movs	r2, #2
 800336c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800336e:	78fa      	ldrb	r2, [r7, #3]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	1a9b      	subs	r3, r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	334c      	adds	r3, #76	@ 0x4c
 800337e:	2205      	movs	r2, #5
 8003380:	701a      	strb	r2, [r3, #0]
 8003382:	e075      	b.n	8003470 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	1a9b      	subs	r3, r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	334d      	adds	r3, #77	@ 0x4d
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b07      	cmp	r3, #7
 8003398:	d00a      	beq.n	80033b0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800339a:	78fa      	ldrb	r2, [r7, #3]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	1a9b      	subs	r3, r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	334d      	adds	r3, #77	@ 0x4d
 80033aa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80033ac:	2b09      	cmp	r3, #9
 80033ae:	d170      	bne.n	8003492 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033b0:	78fa      	ldrb	r2, [r7, #3]
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	4613      	mov	r3, r2
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	1a9b      	subs	r3, r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	440b      	add	r3, r1
 80033be:	334d      	adds	r3, #77	@ 0x4d
 80033c0:	2202      	movs	r2, #2
 80033c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3344      	adds	r3, #68	@ 0x44
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	1c59      	adds	r1, r3, #1
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4403      	add	r3, r0
 80033e4:	3344      	adds	r3, #68	@ 0x44
 80033e6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	3344      	adds	r3, #68	@ 0x44
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d914      	bls.n	8003428 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3344      	adds	r3, #68	@ 0x44
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334c      	adds	r3, #76	@ 0x4c
 8003422:	2204      	movs	r2, #4
 8003424:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003426:	e022      	b.n	800346e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	@ 0x4c
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800343c:	78fb      	ldrb	r3, [r7, #3]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003452:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800345a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	015a      	lsls	r2, r3, #5
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	4413      	add	r3, r2
 8003464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003468:	461a      	mov	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800346e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003470:	78fa      	ldrb	r2, [r7, #3]
 8003472:	6879      	ldr	r1, [r7, #4]
 8003474:	4613      	mov	r3, r2
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	1a9b      	subs	r3, r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	440b      	add	r3, r1
 800347e:	334c      	adds	r3, #76	@ 0x4c
 8003480:	781a      	ldrb	r2, [r3, #0]
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f008 f86e 	bl	800b568 <HAL_HCD_HC_NotifyURBChange_Callback>
 800348c:	e002      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800348e:	bf00      	nop
 8003490:	e000      	b.n	8003494 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003492:	bf00      	nop
  }
}
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b08a      	sub	sp, #40	@ 0x28
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	0c5b      	lsrs	r3, r3, #17
 80034c0:	f003 030f 	and.w	r3, r3, #15
 80034c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d004      	beq.n	80034e0 <HCD_RXQLVL_IRQHandler+0x46>
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b05      	cmp	r3, #5
 80034da:	f000 80b6 	beq.w	800364a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034de:	e0b7      	b.n	8003650 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 80b3 	beq.w	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	332c      	adds	r3, #44	@ 0x2c
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80a7 	beq.w	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	3338      	adds	r3, #56	@ 0x38
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	18d1      	adds	r1, r2, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4403      	add	r3, r0
 8003524:	3334      	adds	r3, #52	@ 0x34
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4299      	cmp	r1, r3
 800352a:	f200 8083 	bhi.w	8003634 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	332c      	adds	r3, #44	@ 0x2c
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	693a      	ldr	r2, [r7, #16]
 8003546:	b292      	uxth	r2, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f002 f983 	bl	8005854 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	332c      	adds	r3, #44	@ 0x2c
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	18d1      	adds	r1, r2, r3
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	4403      	add	r3, r0
 8003572:	332c      	adds	r3, #44	@ 0x2c
 8003574:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	3338      	adds	r3, #56	@ 0x38
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	18d1      	adds	r1, r2, r3
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4403      	add	r3, r0
 800359a:	3338      	adds	r3, #56	@ 0x38
 800359c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	0cdb      	lsrs	r3, r3, #19
 80035ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035b2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	4613      	mov	r3, r2
 80035ba:	011b      	lsls	r3, r3, #4
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	3328      	adds	r3, #40	@ 0x28
 80035c4:	881b      	ldrh	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d13f      	bne.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d03c      	beq.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035ea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035f2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	015a      	lsls	r2, r3, #5
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	4413      	add	r3, r2
 80035fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003600:	461a      	mov	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003606:	6879      	ldr	r1, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	4613      	mov	r3, r2
 800360c:	011b      	lsls	r3, r3, #4
 800360e:	1a9b      	subs	r3, r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	440b      	add	r3, r1
 8003614:	333c      	adds	r3, #60	@ 0x3c
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	f083 0301 	eor.w	r3, r3, #1
 800361c:	b2d8      	uxtb	r0, r3
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	333c      	adds	r3, #60	@ 0x3c
 800362e:	4602      	mov	r2, r0
 8003630:	701a      	strb	r2, [r3, #0]
      break;
 8003632:	e00c      	b.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	4613      	mov	r3, r2
 800363a:	011b      	lsls	r3, r3, #4
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	440b      	add	r3, r1
 8003642:	334c      	adds	r3, #76	@ 0x4c
 8003644:	2204      	movs	r2, #4
 8003646:	701a      	strb	r2, [r3, #0]
      break;
 8003648:	e001      	b.n	800364e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800364e:	bf00      	nop
  }
}
 8003650:	bf00      	nop
 8003652:	3728      	adds	r7, #40	@ 0x28
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003684:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b02      	cmp	r3, #2
 800368e:	d10b      	bne.n	80036a8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b01      	cmp	r3, #1
 8003698:	d102      	bne.n	80036a0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f007 ff48 	bl	800b530 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d132      	bne.n	8003718 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	f043 0308 	orr.w	r3, r3, #8
 80036b8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d126      	bne.n	8003712 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	7a5b      	ldrb	r3, [r3, #9]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d113      	bne.n	80036f4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80036d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80036d6:	d106      	bne.n	80036e6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2102      	movs	r1, #2
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fa48 	bl	8005b74 <USB_InitFSLSPClkSel>
 80036e4:	e011      	b.n	800370a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f002 fa41 	bl	8005b74 <USB_InitFSLSPClkSel>
 80036f2:	e00a      	b.n	800370a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	79db      	ldrb	r3, [r3, #7]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d106      	bne.n	800370a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003702:	461a      	mov	r2, r3
 8003704:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003708:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f007 ff3e 	bl	800b58c <HAL_HCD_PortEnabled_Callback>
 8003710:	e002      	b.n	8003718 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f007 ff48 	bl	800b5a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b20      	cmp	r3, #32
 8003720:	d103      	bne.n	800372a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f043 0320 	orr.w	r3, r3, #32
 8003728:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003730:	461a      	mov	r2, r3
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	6013      	str	r3, [r2, #0]
}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e12b      	b.n	80039aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fd f95a 	bl	8000a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2224      	movs	r2, #36	@ 0x24
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003792:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037a4:	f001 fa20 	bl	8004be8 <HAL_RCC_GetPCLK1Freq>
 80037a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a81      	ldr	r2, [pc, #516]	@ (80039b4 <HAL_I2C_Init+0x274>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d807      	bhi.n	80037c4 <HAL_I2C_Init+0x84>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	4a80      	ldr	r2, [pc, #512]	@ (80039b8 <HAL_I2C_Init+0x278>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	bf94      	ite	ls
 80037bc:	2301      	movls	r3, #1
 80037be:	2300      	movhi	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e006      	b.n	80037d2 <HAL_I2C_Init+0x92>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a7d      	ldr	r2, [pc, #500]	@ (80039bc <HAL_I2C_Init+0x27c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	bf94      	ite	ls
 80037cc:	2301      	movls	r3, #1
 80037ce:	2300      	movhi	r3, #0
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0e7      	b.n	80039aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a78      	ldr	r2, [pc, #480]	@ (80039c0 <HAL_I2C_Init+0x280>)
 80037de:	fba2 2303 	umull	r2, r3, r2, r3
 80037e2:	0c9b      	lsrs	r3, r3, #18
 80037e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a6a      	ldr	r2, [pc, #424]	@ (80039b4 <HAL_I2C_Init+0x274>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d802      	bhi.n	8003814 <HAL_I2C_Init+0xd4>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	3301      	adds	r3, #1
 8003812:	e009      	b.n	8003828 <HAL_I2C_Init+0xe8>
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	4a69      	ldr	r2, [pc, #420]	@ (80039c4 <HAL_I2C_Init+0x284>)
 8003820:	fba2 2303 	umull	r2, r3, r2, r3
 8003824:	099b      	lsrs	r3, r3, #6
 8003826:	3301      	adds	r3, #1
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	6812      	ldr	r2, [r2, #0]
 800382c:	430b      	orrs	r3, r1
 800382e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800383a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	495c      	ldr	r1, [pc, #368]	@ (80039b4 <HAL_I2C_Init+0x274>)
 8003844:	428b      	cmp	r3, r1
 8003846:	d819      	bhi.n	800387c <HAL_I2C_Init+0x13c>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	1e59      	subs	r1, r3, #1
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	fbb1 f3f3 	udiv	r3, r1, r3
 8003856:	1c59      	adds	r1, r3, #1
 8003858:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800385c:	400b      	ands	r3, r1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_I2C_Init+0x138>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1e59      	subs	r1, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	e051      	b.n	800391c <HAL_I2C_Init+0x1dc>
 8003878:	2304      	movs	r3, #4
 800387a:	e04f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_I2C_Init+0x168>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_I2C_Init+0x18e>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	0099      	lsls	r1, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x196>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_I2C_Init+0x1bc>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e58      	subs	r0, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Init+0x1dc>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800394a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6911      	ldr	r1, [r2, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	000186a0 	.word	0x000186a0
 80039b8:	001e847f 	.word	0x001e847f
 80039bc:	003d08ff 	.word	0x003d08ff
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e128      	b.n	8003c2c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a90      	ldr	r2, [pc, #576]	@ (8003c34 <HAL_I2S_Init+0x26c>)
 80039f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7fd f85b 	bl	8000ab0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	69db      	ldr	r3, [r3, #28]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	6812      	ldr	r2, [r2, #0]
 8003a0c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a10:	f023 030f 	bic.w	r3, r3, #15
 8003a14:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d060      	beq.n	8003ae8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d102      	bne.n	8003a34 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003a2e:	2310      	movs	r3, #16
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	e001      	b.n	8003a38 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003a34:	2320      	movs	r3, #32
 8003a36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d802      	bhi.n	8003a46 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	005b      	lsls	r3, r3, #1
 8003a44:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003a46:	2001      	movs	r0, #1
 8003a48:	f001 fa0a 	bl	8004e60 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a4c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a56:	d125      	bne.n	8003aa4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	3305      	adds	r3, #5
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e01f      	b.n	8003ac2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4413      	add	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	461a      	mov	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9e:	3305      	adds	r3, #5
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	e00e      	b.n	8003ac2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	005b      	lsls	r3, r3, #1
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	3305      	adds	r3, #5
 8003ac0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	4a5c      	ldr	r2, [pc, #368]	@ (8003c38 <HAL_I2S_Init+0x270>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	08db      	lsrs	r3, r3, #3
 8003acc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	021b      	lsls	r3, r3, #8
 8003ae4:	61bb      	str	r3, [r7, #24]
 8003ae6:	e003      	b.n	8003af0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003ae8:	2302      	movs	r3, #2
 8003aea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d902      	bls.n	8003afc <HAL_I2S_Init+0x134>
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2bff      	cmp	r3, #255	@ 0xff
 8003afa:	d907      	bls.n	8003b0c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b00:	f043 0210 	orr.w	r2, r3, #16
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e08f      	b.n	8003c2c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	ea42 0103 	orr.w	r1, r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69fa      	ldr	r2, [r7, #28]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	69db      	ldr	r3, [r3, #28]
 8003b26:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b2a:	f023 030f 	bic.w	r3, r3, #15
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6851      	ldr	r1, [r2, #4]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6892      	ldr	r2, [r2, #8]
 8003b36:	4311      	orrs	r1, r2
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	68d2      	ldr	r2, [r2, #12]
 8003b3c:	4311      	orrs	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6992      	ldr	r2, [r2, #24]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003b4e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d161      	bne.n	8003c1c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a38      	ldr	r2, [pc, #224]	@ (8003c3c <HAL_I2S_Init+0x274>)
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a37      	ldr	r2, [pc, #220]	@ (8003c40 <HAL_I2S_Init+0x278>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d101      	bne.n	8003b6c <HAL_I2S_Init+0x1a4>
 8003b68:	4b36      	ldr	r3, [pc, #216]	@ (8003c44 <HAL_I2S_Init+0x27c>)
 8003b6a:	e001      	b.n	8003b70 <HAL_I2S_Init+0x1a8>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	4932      	ldr	r1, [pc, #200]	@ (8003c40 <HAL_I2S_Init+0x278>)
 8003b78:	428a      	cmp	r2, r1
 8003b7a:	d101      	bne.n	8003b80 <HAL_I2S_Init+0x1b8>
 8003b7c:	4a31      	ldr	r2, [pc, #196]	@ (8003c44 <HAL_I2S_Init+0x27c>)
 8003b7e:	e001      	b.n	8003b84 <HAL_I2S_Init+0x1bc>
 8003b80:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003b84:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b88:	f023 030f 	bic.w	r3, r3, #15
 8003b8c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a2b      	ldr	r2, [pc, #172]	@ (8003c40 <HAL_I2S_Init+0x278>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d101      	bne.n	8003b9c <HAL_I2S_Init+0x1d4>
 8003b98:	4b2a      	ldr	r3, [pc, #168]	@ (8003c44 <HAL_I2S_Init+0x27c>)
 8003b9a:	e001      	b.n	8003ba0 <HAL_I2S_Init+0x1d8>
 8003b9c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a25      	ldr	r2, [pc, #148]	@ (8003c40 <HAL_I2S_Init+0x278>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2S_Init+0x1ea>
 8003bae:	4b25      	ldr	r3, [pc, #148]	@ (8003c44 <HAL_I2S_Init+0x27c>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2S_Init+0x1ee>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc2:	d003      	beq.n	8003bcc <HAL_I2S_Init+0x204>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d103      	bne.n	8003bd4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003bcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	e001      	b.n	8003bd8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003be2:	4313      	orrs	r3, r2
 8003be4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bec:	4313      	orrs	r3, r2
 8003bee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	897b      	ldrh	r3, [r7, #10]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c04:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003c40 <HAL_I2S_Init+0x278>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2S_Init+0x24c>
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <HAL_I2S_Init+0x27c>)
 8003c12:	e001      	b.n	8003c18 <HAL_I2S_Init+0x250>
 8003c14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c18:	897a      	ldrh	r2, [r7, #10]
 8003c1a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3720      	adds	r7, #32
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	08003d3f 	.word	0x08003d3f
 8003c38:	cccccccd 	.word	0xcccccccd
 8003c3c:	08003e55 	.word	0x08003e55
 8003c40:	40003800 	.word	0x40003800
 8003c44:	40003400 	.word	0x40003400

08003c48 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	1c9a      	adds	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10e      	bne.n	8003cd8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003cc8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f7ff ffb8 	bl	8003c48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68da      	ldr	r2, [r3, #12]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cf2:	b292      	uxth	r2, r2
 8003cf4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10e      	bne.n	8003d36 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d26:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff93 	bl	8003c5c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d36:	bf00      	nop
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b04      	cmp	r3, #4
 8003d58:	d13a      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d109      	bne.n	8003d78 <I2S_IRQHandler+0x3a>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	d102      	bne.n	8003d78 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7ff ffb4 	bl	8003ce0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b40      	cmp	r3, #64	@ 0x40
 8003d80:	d126      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d11f      	bne.n	8003dd0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d9e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f043 0202 	orr.w	r2, r3, #2
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f7ff ff50 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d136      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d109      	bne.n	8003dfa <I2S_IRQHandler+0xbc>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df0:	2b80      	cmp	r3, #128	@ 0x80
 8003df2:	d102      	bne.n	8003dfa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff45 	bl	8003c84 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d122      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 0320 	and.w	r3, r3, #32
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d11b      	bne.n	8003e4a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e20:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3c:	f043 0204 	orr.w	r2, r3, #4
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f7ff ff13 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a92      	ldr	r2, [pc, #584]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d101      	bne.n	8003e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e6e:	4b92      	ldr	r3, [pc, #584]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e70:	e001      	b.n	8003e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e72:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a8b      	ldr	r2, [pc, #556]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d101      	bne.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e8c:	4b8a      	ldr	r3, [pc, #552]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8e:	e001      	b.n	8003e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ea0:	d004      	beq.n	8003eac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 8099 	bne.w	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d107      	bne.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f925 	bl	8004110 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d002      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f9c8 	bl	8004270 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ee6:	2b40      	cmp	r3, #64	@ 0x40
 8003ee8:	d13a      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d035      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a6e      	ldr	r2, [pc, #440]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003efe:	4b6e      	ldr	r3, [pc, #440]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f00:	e001      	b.n	8003f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003f02:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4969      	ldr	r1, [pc, #420]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f0e:	428b      	cmp	r3, r1
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003f12:	4b69      	ldr	r3, [pc, #420]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f1a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f1e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f30:	2300      	movs	r3, #0
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fe88 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	f040 80c3 	bne.w	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80bd 	beq.w	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f86:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a49      	ldr	r2, [pc, #292]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d101      	bne.n	8003f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f92:	4b49      	ldr	r3, [pc, #292]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e001      	b.n	8003f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f96:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4944      	ldr	r1, [pc, #272]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fa2:	428b      	cmp	r3, r1
 8003fa4:	d101      	bne.n	8003faa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003fa6:	4b44      	ldr	r3, [pc, #272]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fa8:	e001      	b.n	8003fae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003faa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003fb2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	60bb      	str	r3, [r7, #8]
 8003fc0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe4a 	bl	8003c70 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fdc:	e089      	b.n	80040f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d107      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d002      	beq.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f000 f8be 	bl	8004174 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d107      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d002      	beq.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 f8fd 	bl	800420c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d12f      	bne.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d02a      	beq.n	800407c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004034:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004040:	4b1d      	ldr	r3, [pc, #116]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004042:	e001      	b.n	8004048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004044:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4919      	ldr	r1, [pc, #100]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004050:	428b      	cmp	r3, r1
 8004052:	d101      	bne.n	8004058 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004054:	4b18      	ldr	r3, [pc, #96]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004056:	e001      	b.n	800405c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004058:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800405c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004060:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f043 0202 	orr.w	r2, r3, #2
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f7ff fdfa 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f003 0308 	and.w	r3, r3, #8
 8004082:	2b08      	cmp	r3, #8
 8004084:	d136      	bne.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f003 0320 	and.w	r3, r3, #32
 800408c:	2b00      	cmp	r3, #0
 800408e:	d031      	beq.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a07      	ldr	r2, [pc, #28]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d101      	bne.n	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800409c:	e001      	b.n	80040a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800409e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4902      	ldr	r1, [pc, #8]	@ (80040b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040aa:	428b      	cmp	r3, r1
 80040ac:	d106      	bne.n	80040bc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80040ae:	4b02      	ldr	r3, [pc, #8]	@ (80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b0:	e006      	b.n	80040c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80040b2:	bf00      	nop
 80040b4:	40003800 	.word	0x40003800
 80040b8:	40003400 	.word	0x40003400
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685a      	ldr	r2, [r3, #4]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040d4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7ff fdc0 	bl	8003c70 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040f0:	e000      	b.n	80040f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040f2:	bf00      	nop
}
 80040f4:	bf00      	nop
 80040f6:	3720      	adds	r7, #32
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	1c99      	adds	r1, r3, #2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6251      	str	r1, [r2, #36]	@ 0x24
 8004122:	881a      	ldrh	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d113      	bne.n	800416a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004150:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004156:	b29b      	uxth	r3, r3
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ffc9 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
	...

08004174 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	1c99      	adds	r1, r3, #2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6251      	str	r1, [r2, #36]	@ 0x24
 8004186:	8819      	ldrh	r1, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a1d      	ldr	r2, [pc, #116]	@ (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <I2SEx_TxISR_I2SExt+0x22>
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 8004194:	e001      	b.n	800419a <I2SEx_TxISR_I2SExt+0x26>
 8004196:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800419a:	460a      	mov	r2, r1
 800419c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d121      	bne.n	80041fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a12      	ldr	r2, [pc, #72]	@ (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d101      	bne.n	80041c4 <I2SEx_TxISR_I2SExt+0x50>
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 80041c2:	e001      	b.n	80041c8 <I2SEx_TxISR_I2SExt+0x54>
 80041c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	490d      	ldr	r1, [pc, #52]	@ (8004204 <I2SEx_TxISR_I2SExt+0x90>)
 80041d0:	428b      	cmp	r3, r1
 80041d2:	d101      	bne.n	80041d8 <I2SEx_TxISR_I2SExt+0x64>
 80041d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <I2SEx_TxISR_I2SExt+0x94>)
 80041d6:	e001      	b.n	80041dc <I2SEx_TxISR_I2SExt+0x68>
 80041d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041dc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff81 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	40003800 	.word	0x40003800
 8004208:	40003400 	.word	0x40003400

0800420c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68d8      	ldr	r0, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	1c99      	adds	r1, r3, #2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004224:	b282      	uxth	r2, r0
 8004226:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800423a:	b29b      	uxth	r3, r3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d113      	bne.n	8004268 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800424e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff ff4a 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a20      	ldr	r2, [pc, #128]	@ (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d101      	bne.n	8004286 <I2SEx_RxISR_I2SExt+0x16>
 8004282:	4b20      	ldr	r3, [pc, #128]	@ (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 8004284:	e001      	b.n	800428a <I2SEx_RxISR_I2SExt+0x1a>
 8004286:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800428a:	68d8      	ldr	r0, [r3, #12]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	1c99      	adds	r1, r3, #2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004296:	b282      	uxth	r2, r0
 8004298:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d121      	bne.n	80042f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a12      	ldr	r2, [pc, #72]	@ (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d101      	bne.n	80042c0 <I2SEx_RxISR_I2SExt+0x50>
 80042bc:	4b11      	ldr	r3, [pc, #68]	@ (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 80042be:	e001      	b.n	80042c4 <I2SEx_RxISR_I2SExt+0x54>
 80042c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	490d      	ldr	r1, [pc, #52]	@ (8004300 <I2SEx_RxISR_I2SExt+0x90>)
 80042cc:	428b      	cmp	r3, r1
 80042ce:	d101      	bne.n	80042d4 <I2SEx_RxISR_I2SExt+0x64>
 80042d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004304 <I2SEx_RxISR_I2SExt+0x94>)
 80042d2:	e001      	b.n	80042d8 <I2SEx_RxISR_I2SExt+0x68>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80042dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d106      	bne.n	80042f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff ff03 	bl	80040fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	40003800 	.word	0x40003800
 8004304:	40003400 	.word	0x40003400

08004308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b086      	sub	sp, #24
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e267      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d075      	beq.n	8004412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004326:	4b88      	ldr	r3, [pc, #544]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 030c 	and.w	r3, r3, #12
 800432e:	2b04      	cmp	r3, #4
 8004330:	d00c      	beq.n	800434c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004332:	4b85      	ldr	r3, [pc, #532]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800433a:	2b08      	cmp	r3, #8
 800433c:	d112      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433e:	4b82      	ldr	r3, [pc, #520]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004346:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800434a:	d10b      	bne.n	8004364 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	4b7e      	ldr	r3, [pc, #504]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d05b      	beq.n	8004410 <HAL_RCC_OscConfig+0x108>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d157      	bne.n	8004410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e242      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x74>
 800436e:	4b76      	ldr	r3, [pc, #472]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a75      	ldr	r2, [pc, #468]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004374:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	e01d      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x98>
 8004386:	4b70      	ldr	r3, [pc, #448]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a6f      	ldr	r2, [pc, #444]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800438c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004390:	6013      	str	r3, [r2, #0]
 8004392:	4b6d      	ldr	r3, [pc, #436]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a6c      	ldr	r2, [pc, #432]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004398:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800439c:	6013      	str	r3, [r2, #0]
 800439e:	e00b      	b.n	80043b8 <HAL_RCC_OscConfig+0xb0>
 80043a0:	4b69      	ldr	r3, [pc, #420]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a68      	ldr	r2, [pc, #416]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80043a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b66      	ldr	r3, [pc, #408]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a65      	ldr	r2, [pc, #404]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80043b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c0:	f7fc fdc2 	bl	8000f48 <HAL_GetTick>
 80043c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043c6:	e008      	b.n	80043da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043c8:	f7fc fdbe 	bl	8000f48 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b64      	cmp	r3, #100	@ 0x64
 80043d4:	d901      	bls.n	80043da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043d6:	2303      	movs	r3, #3
 80043d8:	e207      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043da:	4b5b      	ldr	r3, [pc, #364]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d0f0      	beq.n	80043c8 <HAL_RCC_OscConfig+0xc0>
 80043e6:	e014      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e8:	f7fc fdae 	bl	8000f48 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f0:	f7fc fdaa 	bl	8000f48 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b64      	cmp	r3, #100	@ 0x64
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e1f3      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004402:	4b51      	ldr	r3, [pc, #324]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0xe8>
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d063      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800441e:	4b4a      	ldr	r3, [pc, #296]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800442a:	4b47      	ldr	r3, [pc, #284]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004432:	2b08      	cmp	r3, #8
 8004434:	d11c      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004436:	4b44      	ldr	r3, [pc, #272]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d116      	bne.n	8004470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004442:	4b41      	ldr	r3, [pc, #260]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d001      	beq.n	800445a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e1c7      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800445a:	4b3b      	ldr	r3, [pc, #236]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4937      	ldr	r1, [pc, #220]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800446a:	4313      	orrs	r3, r2
 800446c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	e03a      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d020      	beq.n	80044ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004478:	4b34      	ldr	r3, [pc, #208]	@ (800454c <HAL_RCC_OscConfig+0x244>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447e:	f7fc fd63 	bl	8000f48 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004486:	f7fc fd5f 	bl	8000f48 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e1a8      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004498:	4b2b      	ldr	r3, [pc, #172]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044a4:	4b28      	ldr	r3, [pc, #160]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4925      	ldr	r1, [pc, #148]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	600b      	str	r3, [r1, #0]
 80044b8:	e015      	b.n	80044e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044ba:	4b24      	ldr	r3, [pc, #144]	@ (800454c <HAL_RCC_OscConfig+0x244>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fc fd42 	bl	8000f48 <HAL_GetTick>
 80044c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c8:	f7fc fd3e 	bl	8000f48 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e187      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044da:	4b1b      	ldr	r3, [pc, #108]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0308 	and.w	r3, r3, #8
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d036      	beq.n	8004560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d016      	beq.n	8004528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044fa:	4b15      	ldr	r3, [pc, #84]	@ (8004550 <HAL_RCC_OscConfig+0x248>)
 80044fc:	2201      	movs	r2, #1
 80044fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fc fd22 	bl	8000f48 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004508:	f7fc fd1e 	bl	8000f48 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e167      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800451a:	4b0b      	ldr	r3, [pc, #44]	@ (8004548 <HAL_RCC_OscConfig+0x240>)
 800451c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x200>
 8004526:	e01b      	b.n	8004560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004528:	4b09      	ldr	r3, [pc, #36]	@ (8004550 <HAL_RCC_OscConfig+0x248>)
 800452a:	2200      	movs	r2, #0
 800452c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452e:	f7fc fd0b 	bl	8000f48 <HAL_GetTick>
 8004532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004534:	e00e      	b.n	8004554 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004536:	f7fc fd07 	bl	8000f48 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b02      	cmp	r3, #2
 8004542:	d907      	bls.n	8004554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e150      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004548:	40023800 	.word	0x40023800
 800454c:	42470000 	.word	0x42470000
 8004550:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004554:	4b88      	ldr	r3, [pc, #544]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1ea      	bne.n	8004536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8097 	beq.w	800469c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800456e:	2300      	movs	r3, #0
 8004570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004572:	4b81      	ldr	r3, [pc, #516]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d10f      	bne.n	800459e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	4b7d      	ldr	r3, [pc, #500]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004586:	4a7c      	ldr	r2, [pc, #496]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004588:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800458c:	6413      	str	r3, [r2, #64]	@ 0x40
 800458e:	4b7a      	ldr	r3, [pc, #488]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004596:	60bb      	str	r3, [r7, #8]
 8004598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800459a:	2301      	movs	r3, #1
 800459c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800459e:	4b77      	ldr	r3, [pc, #476]	@ (800477c <HAL_RCC_OscConfig+0x474>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d118      	bne.n	80045dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045aa:	4b74      	ldr	r3, [pc, #464]	@ (800477c <HAL_RCC_OscConfig+0x474>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a73      	ldr	r2, [pc, #460]	@ (800477c <HAL_RCC_OscConfig+0x474>)
 80045b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045b6:	f7fc fcc7 	bl	8000f48 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045be:	f7fc fcc3 	bl	8000f48 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e10c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d0:	4b6a      	ldr	r3, [pc, #424]	@ (800477c <HAL_RCC_OscConfig+0x474>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d106      	bne.n	80045f2 <HAL_RCC_OscConfig+0x2ea>
 80045e4:	4b64      	ldr	r3, [pc, #400]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 80045e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e8:	4a63      	ldr	r2, [pc, #396]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f0:	e01c      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	2b05      	cmp	r3, #5
 80045f8:	d10c      	bne.n	8004614 <HAL_RCC_OscConfig+0x30c>
 80045fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 80045fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004600:	f043 0304 	orr.w	r3, r3, #4
 8004604:	6713      	str	r3, [r2, #112]	@ 0x70
 8004606:	4b5c      	ldr	r3, [pc, #368]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800460a:	4a5b      	ldr	r2, [pc, #364]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6713      	str	r3, [r2, #112]	@ 0x70
 8004612:	e00b      	b.n	800462c <HAL_RCC_OscConfig+0x324>
 8004614:	4b58      	ldr	r3, [pc, #352]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	4a57      	ldr	r2, [pc, #348]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004620:	4b55      	ldr	r3, [pc, #340]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004624:	4a54      	ldr	r2, [pc, #336]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004626:	f023 0304 	bic.w	r3, r3, #4
 800462a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004634:	f7fc fc88 	bl	8000f48 <HAL_GetTick>
 8004638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800463a:	e00a      	b.n	8004652 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463c:	f7fc fc84 	bl	8000f48 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e0cb      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004652:	4b49      	ldr	r3, [pc, #292]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ee      	beq.n	800463c <HAL_RCC_OscConfig+0x334>
 800465e:	e014      	b.n	800468a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004660:	f7fc fc72 	bl	8000f48 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fc fc6e 	bl	8000f48 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0b5      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467e:	4b3e      	ldr	r3, [pc, #248]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1ee      	bne.n	8004668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800468a:	7dfb      	ldrb	r3, [r7, #23]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d105      	bne.n	800469c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004690:	4b39      	ldr	r3, [pc, #228]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	4a38      	ldr	r2, [pc, #224]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004696:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800469a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 80a1 	beq.w	80047e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046a6:	4b34      	ldr	r3, [pc, #208]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f003 030c 	and.w	r3, r3, #12
 80046ae:	2b08      	cmp	r3, #8
 80046b0:	d05c      	beq.n	800476c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d141      	bne.n	800473e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046ba:	4b31      	ldr	r3, [pc, #196]	@ (8004780 <HAL_RCC_OscConfig+0x478>)
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c0:	f7fc fc42 	bl	8000f48 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fc fc3e 	bl	8000f48 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e087      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046da:	4b27      	ldr	r3, [pc, #156]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69da      	ldr	r2, [r3, #28]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	019b      	lsls	r3, r3, #6
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046fc:	085b      	lsrs	r3, r3, #1
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	061b      	lsls	r3, r3, #24
 800470a:	491b      	ldr	r1, [pc, #108]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 800470c:	4313      	orrs	r3, r2
 800470e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004710:	4b1b      	ldr	r3, [pc, #108]	@ (8004780 <HAL_RCC_OscConfig+0x478>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004716:	f7fc fc17 	bl	8000f48 <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800471e:	f7fc fc13 	bl	8000f48 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e05c      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004730:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d0f0      	beq.n	800471e <HAL_RCC_OscConfig+0x416>
 800473c:	e054      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800473e:	4b10      	ldr	r3, [pc, #64]	@ (8004780 <HAL_RCC_OscConfig+0x478>)
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004744:	f7fc fc00 	bl	8000f48 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fc fbfc 	bl	8000f48 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e045      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475e:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <HAL_RCC_OscConfig+0x470>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f0      	bne.n	800474c <HAL_RCC_OscConfig+0x444>
 800476a:	e03d      	b.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e038      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
 8004778:	40023800 	.word	0x40023800
 800477c:	40007000 	.word	0x40007000
 8004780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004784:	4b1b      	ldr	r3, [pc, #108]	@ (80047f4 <HAL_RCC_OscConfig+0x4ec>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d028      	beq.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800479c:	429a      	cmp	r2, r3
 800479e:	d121      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d11a      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047b4:	4013      	ands	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	4293      	cmp	r3, r2
 80047be:	d111      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ca:	085b      	lsrs	r3, r3, #1
 80047cc:	3b01      	subs	r3, #1
 80047ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d107      	bne.n	80047e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e000      	b.n	80047ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800

080047f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e0cc      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800480c:	4b68      	ldr	r3, [pc, #416]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	429a      	cmp	r2, r3
 8004818:	d90c      	bls.n	8004834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800481a:	4b65      	ldr	r3, [pc, #404]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	b2d2      	uxtb	r2, r2
 8004820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004822:	4b63      	ldr	r3, [pc, #396]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	429a      	cmp	r2, r3
 800482e:	d001      	beq.n	8004834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0b8      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d020      	beq.n	8004882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800484c:	4b59      	ldr	r3, [pc, #356]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	4a58      	ldr	r2, [pc, #352]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004852:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0308 	and.w	r3, r3, #8
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004864:	4b53      	ldr	r3, [pc, #332]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	4a52      	ldr	r2, [pc, #328]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800486e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004870:	4b50      	ldr	r3, [pc, #320]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	494d      	ldr	r1, [pc, #308]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	4313      	orrs	r3, r2
 8004880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d044      	beq.n	8004918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b01      	cmp	r3, #1
 8004894:	d107      	bne.n	80048a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004896:	4b47      	ldr	r3, [pc, #284]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d119      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e07f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d107      	bne.n	80048c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048b6:	4b3f      	ldr	r3, [pc, #252]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d109      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e06f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048c6:	4b3b      	ldr	r3, [pc, #236]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e067      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048d6:	4b37      	ldr	r3, [pc, #220]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f023 0203 	bic.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4934      	ldr	r1, [pc, #208]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048e8:	f7fc fb2e 	bl	8000f48 <HAL_GetTick>
 80048ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ee:	e00a      	b.n	8004906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f0:	f7fc fb2a 	bl	8000f48 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048fe:	4293      	cmp	r3, r2
 8004900:	d901      	bls.n	8004906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e04f      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004906:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 020c 	and.w	r2, r3, #12
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	429a      	cmp	r2, r3
 8004916:	d1eb      	bne.n	80048f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004918:	4b25      	ldr	r3, [pc, #148]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	429a      	cmp	r2, r3
 8004924:	d20c      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004926:	4b22      	ldr	r3, [pc, #136]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492e:	4b20      	ldr	r3, [pc, #128]	@ (80049b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	429a      	cmp	r2, r3
 800493a:	d001      	beq.n	8004940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e032      	b.n	80049a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0304 	and.w	r3, r3, #4
 8004948:	2b00      	cmp	r3, #0
 800494a:	d008      	beq.n	800495e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800494c:	4b19      	ldr	r3, [pc, #100]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4916      	ldr	r1, [pc, #88]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800495a:	4313      	orrs	r3, r2
 800495c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	2b00      	cmp	r3, #0
 8004968:	d009      	beq.n	800497e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800496a:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	490e      	ldr	r1, [pc, #56]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	4313      	orrs	r3, r2
 800497c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800497e:	f000 f821 	bl	80049c4 <HAL_RCC_GetSysClockFreq>
 8004982:	4602      	mov	r2, r0
 8004984:	4b0b      	ldr	r3, [pc, #44]	@ (80049b4 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	091b      	lsrs	r3, r3, #4
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	490a      	ldr	r1, [pc, #40]	@ (80049b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004990:	5ccb      	ldrb	r3, [r1, r3]
 8004992:	fa22 f303 	lsr.w	r3, r2, r3
 8004996:	4a09      	ldr	r2, [pc, #36]	@ (80049bc <HAL_RCC_ClockConfig+0x1c4>)
 8004998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800499a:	4b09      	ldr	r3, [pc, #36]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fc f94e 	bl	8000c40 <HAL_InitTick>

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00
 80049b4:	40023800 	.word	0x40023800
 80049b8:	0800bdb8 	.word	0x0800bdb8
 80049bc:	20000000 	.word	0x20000000
 80049c0:	20000004 	.word	0x20000004

080049c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c8:	b094      	sub	sp, #80	@ 0x50
 80049ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80049cc:	2300      	movs	r3, #0
 80049ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049dc:	4b79      	ldr	r3, [pc, #484]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d00d      	beq.n	8004a04 <HAL_RCC_GetSysClockFreq+0x40>
 80049e8:	2b08      	cmp	r3, #8
 80049ea:	f200 80e1 	bhi.w	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_RCC_GetSysClockFreq+0x34>
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d003      	beq.n	80049fe <HAL_RCC_GetSysClockFreq+0x3a>
 80049f6:	e0db      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049f8:	4b73      	ldr	r3, [pc, #460]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80049fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049fc:	e0db      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049fe:	4b73      	ldr	r3, [pc, #460]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8004a00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004a02:	e0d8      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a04:	4b6f      	ldr	r3, [pc, #444]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d063      	beq.n	8004ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	099b      	lsrs	r3, r3, #6
 8004a20:	2200      	movs	r2, #0
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a2e:	2300      	movs	r3, #0
 8004a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004a36:	4622      	mov	r2, r4
 8004a38:	462b      	mov	r3, r5
 8004a3a:	f04f 0000 	mov.w	r0, #0
 8004a3e:	f04f 0100 	mov.w	r1, #0
 8004a42:	0159      	lsls	r1, r3, #5
 8004a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a48:	0150      	lsls	r0, r2, #5
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4621      	mov	r1, r4
 8004a50:	1a51      	subs	r1, r2, r1
 8004a52:	6139      	str	r1, [r7, #16]
 8004a54:	4629      	mov	r1, r5
 8004a56:	eb63 0301 	sbc.w	r3, r3, r1
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a68:	4659      	mov	r1, fp
 8004a6a:	018b      	lsls	r3, r1, #6
 8004a6c:	4651      	mov	r1, sl
 8004a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a72:	4651      	mov	r1, sl
 8004a74:	018a      	lsls	r2, r1, #6
 8004a76:	4651      	mov	r1, sl
 8004a78:	ebb2 0801 	subs.w	r8, r2, r1
 8004a7c:	4659      	mov	r1, fp
 8004a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004a82:	f04f 0200 	mov.w	r2, #0
 8004a86:	f04f 0300 	mov.w	r3, #0
 8004a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a96:	4690      	mov	r8, r2
 8004a98:	4699      	mov	r9, r3
 8004a9a:	4623      	mov	r3, r4
 8004a9c:	eb18 0303 	adds.w	r3, r8, r3
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	462b      	mov	r3, r5
 8004aa4:	eb49 0303 	adc.w	r3, r9, r3
 8004aa8:	60fb      	str	r3, [r7, #12]
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	024b      	lsls	r3, r1, #9
 8004aba:	4621      	mov	r1, r4
 8004abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	024a      	lsls	r2, r1, #9
 8004ac4:	4610      	mov	r0, r2
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aca:	2200      	movs	r2, #0
 8004acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ad4:	f7fb fb7c 	bl	80001d0 <__aeabi_uldivmod>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	460b      	mov	r3, r1
 8004adc:	4613      	mov	r3, r2
 8004ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ae0:	e058      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ae2:	4b38      	ldr	r3, [pc, #224]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	099b      	lsrs	r3, r3, #6
 8004ae8:	2200      	movs	r2, #0
 8004aea:	4618      	mov	r0, r3
 8004aec:	4611      	mov	r1, r2
 8004aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004af2:	623b      	str	r3, [r7, #32]
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004afc:	4642      	mov	r2, r8
 8004afe:	464b      	mov	r3, r9
 8004b00:	f04f 0000 	mov.w	r0, #0
 8004b04:	f04f 0100 	mov.w	r1, #0
 8004b08:	0159      	lsls	r1, r3, #5
 8004b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b0e:	0150      	lsls	r0, r2, #5
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4641      	mov	r1, r8
 8004b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004b1a:	4649      	mov	r1, r9
 8004b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004b20:	f04f 0200 	mov.w	r2, #0
 8004b24:	f04f 0300 	mov.w	r3, #0
 8004b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004b34:	ebb2 040a 	subs.w	r4, r2, sl
 8004b38:	eb63 050b 	sbc.w	r5, r3, fp
 8004b3c:	f04f 0200 	mov.w	r2, #0
 8004b40:	f04f 0300 	mov.w	r3, #0
 8004b44:	00eb      	lsls	r3, r5, #3
 8004b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b4a:	00e2      	lsls	r2, r4, #3
 8004b4c:	4614      	mov	r4, r2
 8004b4e:	461d      	mov	r5, r3
 8004b50:	4643      	mov	r3, r8
 8004b52:	18e3      	adds	r3, r4, r3
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	464b      	mov	r3, r9
 8004b58:	eb45 0303 	adc.w	r3, r5, r3
 8004b5c:	607b      	str	r3, [r7, #4]
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b6a:	4629      	mov	r1, r5
 8004b6c:	028b      	lsls	r3, r1, #10
 8004b6e:	4621      	mov	r1, r4
 8004b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b74:	4621      	mov	r1, r4
 8004b76:	028a      	lsls	r2, r1, #10
 8004b78:	4610      	mov	r0, r2
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7e:	2200      	movs	r2, #0
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	61fa      	str	r2, [r7, #28]
 8004b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b88:	f7fb fb22 	bl	80001d0 <__aeabi_uldivmod>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4613      	mov	r3, r2
 8004b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004b94:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	0c1b      	lsrs	r3, r3, #16
 8004b9a:	f003 0303 	and.w	r3, r3, #3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bb0:	4b05      	ldr	r3, [pc, #20]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3750      	adds	r7, #80	@ 0x50
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	00f42400 	.word	0x00f42400
 8004bcc:	007a1200 	.word	0x007a1200

08004bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20000000 	.word	0x20000000

08004be8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bec:	f7ff fff0 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	4b05      	ldr	r3, [pc, #20]	@ (8004c08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	0a9b      	lsrs	r3, r3, #10
 8004bf8:	f003 0307 	and.w	r3, r3, #7
 8004bfc:	4903      	ldr	r1, [pc, #12]	@ (8004c0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bfe:	5ccb      	ldrb	r3, [r1, r3]
 8004c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	0800bdc8 	.word	0x0800bdc8

08004c10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c14:	f7ff ffdc 	bl	8004bd0 <HAL_RCC_GetHCLKFreq>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	0b5b      	lsrs	r3, r3, #13
 8004c20:	f003 0307 	and.w	r3, r3, #7
 8004c24:	4903      	ldr	r1, [pc, #12]	@ (8004c34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c26:	5ccb      	ldrb	r3, [r1, r3]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	bd80      	pop	{r7, pc}
 8004c30:	40023800 	.word	0x40023800
 8004c34:	0800bdc8 	.word	0x0800bdc8

08004c38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
 8004c40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	220f      	movs	r2, #15
 8004c46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004c48:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0203 	and.w	r2, r3, #3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c54:	4b0f      	ldr	r3, [pc, #60]	@ (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c6c:	4b09      	ldr	r3, [pc, #36]	@ (8004c94 <HAL_RCC_GetClockConfig+0x5c>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	08db      	lsrs	r3, r3, #3
 8004c72:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c7a:	4b07      	ldr	r3, [pc, #28]	@ (8004c98 <HAL_RCC_GetClockConfig+0x60>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0207 	and.w	r2, r3, #7
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	601a      	str	r2, [r3, #0]
}
 8004c86:	bf00      	nop
 8004c88:	370c      	adds	r7, #12
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40023800 	.word	0x40023800
 8004c98:	40023c00 	.word	0x40023c00

08004c9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d105      	bne.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d035      	beq.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004cc4:	4b62      	ldr	r3, [pc, #392]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cca:	f7fc f93d 	bl	8000f48 <HAL_GetTick>
 8004cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cd2:	f7fc f939 	bl	8000f48 <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e0b0      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1f0      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	019a      	lsls	r2, r3, #6
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	071b      	lsls	r3, r3, #28
 8004cfc:	4955      	ldr	r1, [pc, #340]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d04:	4b52      	ldr	r3, [pc, #328]	@ (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d06:	2201      	movs	r2, #1
 8004d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d0a:	f7fc f91d 	bl	8000f48 <HAL_GetTick>
 8004d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d12:	f7fc f919 	bl	8000f48 <HAL_GetTick>
 8004d16:	4602      	mov	r2, r0
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d901      	bls.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e090      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d24:	4b4b      	ldr	r3, [pc, #300]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0f0      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 8083 	beq.w	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	4b44      	ldr	r3, [pc, #272]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d46:	4a43      	ldr	r2, [pc, #268]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004d66:	f7fc f8ef 	bl	8000f48 <HAL_GetTick>
 8004d6a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d6e:	f7fc f8eb 	bl	8000f48 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e062      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004d80:	4b35      	ldr	r3, [pc, #212]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d8c:	4b31      	ldr	r3, [pc, #196]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d94:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d02f      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d028      	beq.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004daa:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004db2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004db4:	4b29      	ldr	r3, [pc, #164]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dba:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004dc0:	4a24      	ldr	r2, [pc, #144]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dc6:	4b23      	ldr	r3, [pc, #140]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d114      	bne.n	8004dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004dd2:	f7fc f8b9 	bl	8000f48 <HAL_GetTick>
 8004dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fc f8b5 	bl	8000f48 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e02a      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df0:	4b18      	ldr	r3, [pc, #96]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0ee      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e08:	d10d      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e1e:	490d      	ldr	r1, [pc, #52]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]
 8004e24:	e005      	b.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e26:	4b0b      	ldr	r3, [pc, #44]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004e30:	6093      	str	r3, [r2, #8]
 8004e32:	4b08      	ldr	r3, [pc, #32]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e3e:	4905      	ldr	r1, [pc, #20]	@ (8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	42470068 	.word	0x42470068
 8004e54:	40023800 	.word	0x40023800
 8004e58:	40007000 	.word	0x40007000
 8004e5c:	42470e40 	.word	0x42470e40

08004e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b087      	sub	sp, #28
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d13f      	bne.n	8004efe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004e7e:	4b24      	ldr	r3, [pc, #144]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e86:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d006      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e94:	d12f      	bne.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004e96:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004e98:	617b      	str	r3, [r7, #20]
          break;
 8004e9a:	e02f      	b.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea8:	d108      	bne.n	8004ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004eaa:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004eb2:	4a19      	ldr	r2, [pc, #100]	@ (8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	e007      	b.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ebc:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ec4:	4a15      	ldr	r2, [pc, #84]	@ (8004f1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004ecc:	4b10      	ldr	r3, [pc, #64]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee6:	0f1b      	lsrs	r3, r3, #28
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef2:	617b      	str	r3, [r7, #20]
          break;
 8004ef4:	e002      	b.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
          break;
 8004efa:	bf00      	nop
        }
      }
      break;
 8004efc:	e000      	b.n	8004f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004efe:	bf00      	nop
    }
  }
  return frequency;
 8004f00:	697b      	ldr	r3, [r7, #20]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	371c      	adds	r7, #28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	00bb8000 	.word	0x00bb8000
 8004f18:	007a1200 	.word	0x007a1200
 8004f1c:	00f42400 	.word	0x00f42400

08004f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d101      	bne.n	8004f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e07b      	b.n	800502a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f42:	d009      	beq.n	8004f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	61da      	str	r2, [r3, #28]
 8004f4a:	e005      	b.n	8004f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7fb fe1c 	bl	8000bb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004fa0:	431a      	orrs	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	431a      	orrs	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	431a      	orrs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fdc:	ea42 0103 	orr.w	r1, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	430a      	orrs	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	f003 0104 	and.w	r1, r3, #4
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	f003 0210 	and.w	r2, r3, #16
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	430a      	orrs	r2, r1
 8005008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}

08005032 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005032:	b580      	push	{r7, lr}
 8005034:	b082      	sub	sp, #8
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e041      	b.n	80050c8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d106      	bne.n	800505e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f839 	bl	80050d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f000 f9bf 	bl	80053f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04e      	b.n	800519a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a23      	ldr	r2, [pc, #140]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d022      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005126:	d01d      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a1f      	ldr	r2, [pc, #124]	@ (80051ac <HAL_TIM_Base_Start_IT+0xc8>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d018      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a1e      	ldr	r2, [pc, #120]	@ (80051b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d013      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1c      	ldr	r2, [pc, #112]	@ (80051b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00e      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1b      	ldr	r2, [pc, #108]	@ (80051b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d009      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a19      	ldr	r2, [pc, #100]	@ (80051bc <HAL_TIM_Base_Start_IT+0xd8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a18      	ldr	r2, [pc, #96]	@ (80051c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d111      	bne.n	8005188 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2b06      	cmp	r3, #6
 8005174:	d010      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	e007      	b.n	8005198 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	4618      	mov	r0, r3
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40010000 	.word	0x40010000
 80051ac:	40000400 	.word	0x40000400
 80051b0:	40000800 	.word	0x40000800
 80051b4:	40000c00 	.word	0x40000c00
 80051b8:	40010400 	.word	0x40010400
 80051bc:	40014000 	.word	0x40014000
 80051c0:	40001800 	.word	0x40001800

080051c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d020      	beq.n	8005228 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f06f 0202 	mvn.w	r2, #2
 80051f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 0303 	and.w	r3, r3, #3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d003      	beq.n	8005216 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f8d2 	bl	80053b8 <HAL_TIM_IC_CaptureCallback>
 8005214:	e005      	b.n	8005222 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8c4 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8d5 	bl	80053cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d020      	beq.n	8005274 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0304 	and.w	r3, r3, #4
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01b      	beq.n	8005274 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0204 	mvn.w	r2, #4
 8005244:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f8ac 	bl	80053b8 <HAL_TIM_IC_CaptureCallback>
 8005260:	e005      	b.n	800526e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f89e 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f8af 	bl	80053cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d020      	beq.n	80052c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0308 	and.w	r3, r3, #8
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01b      	beq.n	80052c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0208 	mvn.w	r2, #8
 8005290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2204      	movs	r2, #4
 8005296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0303 	and.w	r3, r3, #3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f886 	bl	80053b8 <HAL_TIM_IC_CaptureCallback>
 80052ac:	e005      	b.n	80052ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f878 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f889 	bl	80053cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	f003 0310 	and.w	r3, r3, #16
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d020      	beq.n	800530c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0310 	and.w	r3, r3, #16
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01b      	beq.n	800530c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0210 	mvn.w	r2, #16
 80052dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2208      	movs	r2, #8
 80052e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f860 	bl	80053b8 <HAL_TIM_IC_CaptureCallback>
 80052f8:	e005      	b.n	8005306 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f852 	bl	80053a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f863 	bl	80053cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00c      	beq.n	8005330 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f06f 0201 	mvn.w	r2, #1
 8005328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fb fb34 	bl	8000998 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d007      	beq.n	8005354 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800534c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f906 	bl	8005560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00c      	beq.n	8005378 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005364:	2b00      	cmp	r3, #0
 8005366:	d007      	beq.n	8005378 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f834 	bl	80053e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0320 	and.w	r3, r3, #32
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0320 	and.w	r3, r3, #32
 8005388:	2b00      	cmp	r3, #0
 800538a:	d007      	beq.n	800539c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0220 	mvn.w	r2, #32
 8005394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f8d8 	bl	800554c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800539c:	bf00      	nop
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}

080053a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr

080053e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053e8:	bf00      	nop
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a46      	ldr	r2, [pc, #280]	@ (8005520 <TIM_Base_SetConfig+0x12c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005412:	d00f      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a43      	ldr	r2, [pc, #268]	@ (8005524 <TIM_Base_SetConfig+0x130>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d00b      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a42      	ldr	r2, [pc, #264]	@ (8005528 <TIM_Base_SetConfig+0x134>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d007      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a41      	ldr	r2, [pc, #260]	@ (800552c <TIM_Base_SetConfig+0x138>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d003      	beq.n	8005434 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a40      	ldr	r2, [pc, #256]	@ (8005530 <TIM_Base_SetConfig+0x13c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d108      	bne.n	8005446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800543a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a35      	ldr	r2, [pc, #212]	@ (8005520 <TIM_Base_SetConfig+0x12c>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d02b      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005454:	d027      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a32      	ldr	r2, [pc, #200]	@ (8005524 <TIM_Base_SetConfig+0x130>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d023      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4a31      	ldr	r2, [pc, #196]	@ (8005528 <TIM_Base_SetConfig+0x134>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d01f      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a30      	ldr	r2, [pc, #192]	@ (800552c <TIM_Base_SetConfig+0x138>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d01b      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	@ (8005530 <TIM_Base_SetConfig+0x13c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d017      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2e      	ldr	r2, [pc, #184]	@ (8005534 <TIM_Base_SetConfig+0x140>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d013      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2d      	ldr	r2, [pc, #180]	@ (8005538 <TIM_Base_SetConfig+0x144>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00f      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2c      	ldr	r2, [pc, #176]	@ (800553c <TIM_Base_SetConfig+0x148>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00b      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2b      	ldr	r2, [pc, #172]	@ (8005540 <TIM_Base_SetConfig+0x14c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d007      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a2a      	ldr	r2, [pc, #168]	@ (8005544 <TIM_Base_SetConfig+0x150>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <TIM_Base_SetConfig+0x154>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d108      	bne.n	80054b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a10      	ldr	r2, [pc, #64]	@ (8005520 <TIM_Base_SetConfig+0x12c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_Base_SetConfig+0xf8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a12      	ldr	r2, [pc, #72]	@ (8005530 <TIM_Base_SetConfig+0x13c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d103      	bne.n	80054f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	691a      	ldr	r2, [r3, #16]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d105      	bne.n	8005512 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f023 0201 	bic.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]
  }
}
 8005512:	bf00      	nop
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	40010000 	.word	0x40010000
 8005524:	40000400 	.word	0x40000400
 8005528:	40000800 	.word	0x40000800
 800552c:	40000c00 	.word	0x40000c00
 8005530:	40010400 	.word	0x40010400
 8005534:	40014000 	.word	0x40014000
 8005538:	40014400 	.word	0x40014400
 800553c:	40014800 	.word	0x40014800
 8005540:	40001800 	.word	0x40001800
 8005544:	40001c00 	.word	0x40001c00
 8005548:	40002000 	.word	0x40002000

0800554c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005554:	bf00      	nop
 8005556:	370c      	adds	r7, #12
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005568:	bf00      	nop
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005574:	b084      	sub	sp, #16
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	f107 001c 	add.w	r0, r7, #28
 8005582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005586:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800558a:	2b01      	cmp	r3, #1
 800558c:	d123      	bne.n	80055d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80055a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d105      	bne.n	80055ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9dc 	bl	8005988 <USB_CoreReset>
 80055d0:	4603      	mov	r3, r0
 80055d2:	73fb      	strb	r3, [r7, #15]
 80055d4:	e01b      	b.n	800560e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f9d0 	bl	8005988 <USB_CoreReset>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80055ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d106      	bne.n	8005602 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005600:	e005      	b.n	800560e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005606:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800560e:	7fbb      	ldrb	r3, [r7, #30]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d10b      	bne.n	800562c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f043 0206 	orr.w	r2, r3, #6
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f043 0220 	orr.w	r2, r3, #32
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005638:	b004      	add	sp, #16
 800563a:	4770      	bx	lr

0800563c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f043 0201 	orr.w	r2, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f023 0201 	bic.w	r2, r3, #1
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d115      	bne.n	80056ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056ae:	200a      	movs	r0, #10
 80056b0:	f7fb fc56 	bl	8000f60 <HAL_Delay>
      ms += 10U;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	330a      	adds	r3, #10
 80056b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f956 	bl	800596c <USB_GetMode>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d01e      	beq.n	8005704 <USB_SetCurrentMode+0x84>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80056ca:	d9f0      	bls.n	80056ae <USB_SetCurrentMode+0x2e>
 80056cc:	e01a      	b.n	8005704 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ce:	78fb      	ldrb	r3, [r7, #3]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d115      	bne.n	8005700 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80056e0:	200a      	movs	r0, #10
 80056e2:	f7fb fc3d 	bl	8000f60 <HAL_Delay>
      ms += 10U;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	330a      	adds	r3, #10
 80056ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f93d 	bl	800596c <USB_GetMode>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d005      	beq.n	8005704 <USB_SetCurrentMode+0x84>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80056fc:	d9f0      	bls.n	80056e0 <USB_SetCurrentMode+0x60>
 80056fe:	e001      	b.n	8005704 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e005      	b.n	8005710 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2bc8      	cmp	r3, #200	@ 0xc8
 8005708:	d101      	bne.n	800570e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e000      	b.n	8005710 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005722:	2300      	movs	r3, #0
 8005724:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	3301      	adds	r3, #1
 800572a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005732:	d901      	bls.n	8005738 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e01b      	b.n	8005770 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	daf2      	bge.n	8005726 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	019b      	lsls	r3, r3, #6
 8005748:	f043 0220 	orr.w	r2, r3, #32
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800575c:	d901      	bls.n	8005762 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	e006      	b.n	8005770 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b20      	cmp	r3, #32
 800576c:	d0f0      	beq.n	8005750 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	3301      	adds	r3, #1
 800578c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005794:	d901      	bls.n	800579a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e018      	b.n	80057cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	daf2      	bge.n	8005788 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2210      	movs	r2, #16
 80057aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3301      	adds	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80057b8:	d901      	bls.n	80057be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e006      	b.n	80057cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	f003 0310 	and.w	r3, r3, #16
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d0f0      	beq.n	80057ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057d8:	b480      	push	{r7}
 80057da:	b089      	sub	sp, #36	@ 0x24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4611      	mov	r1, r2
 80057e4:	461a      	mov	r2, r3
 80057e6:	460b      	mov	r3, r1
 80057e8:	71fb      	strb	r3, [r7, #7]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d123      	bne.n	8005846 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057fe:	88bb      	ldrh	r3, [r7, #4]
 8005800:	3303      	adds	r3, #3
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	61bb      	str	r3, [r7, #24]
 800580a:	e018      	b.n	800583e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800580c:	79fb      	ldrb	r3, [r7, #7]
 800580e:	031a      	lsls	r2, r3, #12
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	4413      	add	r3, r2
 8005814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005818:	461a      	mov	r2, r3
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	3301      	adds	r3, #1
 8005824:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	3301      	adds	r3, #1
 800582a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	3301      	adds	r3, #1
 8005830:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	3301      	adds	r3, #1
 8005836:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	3301      	adds	r3, #1
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3e2      	bcc.n	800580c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3724      	adds	r7, #36	@ 0x24
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr

08005854 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005854:	b480      	push	{r7}
 8005856:	b08b      	sub	sp, #44	@ 0x2c
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800586a:	88fb      	ldrh	r3, [r7, #6]
 800586c:	089b      	lsrs	r3, r3, #2
 800586e:	b29b      	uxth	r3, r3
 8005870:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	623b      	str	r3, [r7, #32]
 800587e:	e014      	b.n	80058aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588a:	601a      	str	r2, [r3, #0]
    pDest++;
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	3301      	adds	r3, #1
 8005890:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	3301      	adds	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589a:	3301      	adds	r3, #1
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	3301      	adds	r3, #1
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	3301      	adds	r3, #1
 80058a8:	623b      	str	r3, [r7, #32]
 80058aa:	6a3a      	ldr	r2, [r7, #32]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d3e6      	bcc.n	8005880 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058b2:	8bfb      	ldrh	r3, [r7, #30]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01e      	beq.n	80058f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058c2:	461a      	mov	r2, r3
 80058c4:	f107 0310 	add.w	r3, r7, #16
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	fa22 f303 	lsr.w	r3, r2, r3
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	701a      	strb	r2, [r3, #0]
      i++;
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	3301      	adds	r3, #1
 80058e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e6:	3301      	adds	r3, #1
 80058e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80058ea:	8bfb      	ldrh	r3, [r7, #30]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058f0:	8bfb      	ldrh	r3, [r7, #30]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1ea      	bne.n	80058cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	372c      	adds	r7, #44	@ 0x2c
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005904:	b480      	push	{r7}
 8005906:	b085      	sub	sp, #20
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	4013      	ands	r3, r2
 800591a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800591c:	68fb      	ldr	r3, [r7, #12]
}
 800591e:	4618      	mov	r0, r3
 8005920:	3714      	adds	r7, #20
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800592a:	b480      	push	{r7}
 800592c:	b085      	sub	sp, #20
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800593a:	78fb      	ldrb	r3, [r7, #3]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800594a:	78fb      	ldrb	r3, [r7, #3]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	4013      	ands	r3, r2
 800595c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800595e:	68bb      	ldr	r3, [r7, #8]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3714      	adds	r7, #20
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0301 	and.w	r3, r3, #1
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005990:	2300      	movs	r3, #0
 8005992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	3301      	adds	r3, #1
 8005998:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059a0:	d901      	bls.n	80059a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e01b      	b.n	80059de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	daf2      	bge.n	8005994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80059ae:	2300      	movs	r3, #0
 80059b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f043 0201 	orr.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	3301      	adds	r3, #1
 80059c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80059ca:	d901      	bls.n	80059d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e006      	b.n	80059de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	f003 0301 	and.w	r3, r3, #1
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d0f0      	beq.n	80059be <USB_CoreReset+0x36>

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059ec:	b084      	sub	sp, #16
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b086      	sub	sp, #24
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
 80059f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80059fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059fe:	2300      	movs	r3, #0
 8005a00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a16:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a22:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a2e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d119      	bne.n	8005a76 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005a42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d10a      	bne.n	8005a60 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a58:	f043 0304 	orr.w	r3, r3, #4
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	e014      	b.n	8005a8a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a6e:	f023 0304 	bic.w	r3, r3, #4
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	e009      	b.n	8005a8a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a84:	f023 0304 	bic.w	r3, r3, #4
 8005a88:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f7ff fe43 	bl	8005718 <USB_FlushTxFifo>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fe6d 	bl	800577c <USB_FlushRxFifo>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d001      	beq.n	8005aac <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005aac:	2300      	movs	r3, #0
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	e015      	b.n	8005ade <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005abe:	461a      	mov	r2, r3
 8005ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ac4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	3301      	adds	r3, #1
 8005adc:	613b      	str	r3, [r7, #16]
 8005ade:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d3e3      	bcc.n	8005ab2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f04f 32ff 	mov.w	r2, #4294967295
 8005af6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a18      	ldr	r2, [pc, #96]	@ (8005b5c <USB_HostInit+0x170>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d10b      	bne.n	8005b18 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b06:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <USB_HostInit+0x174>)
 8005b0c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a14      	ldr	r2, [pc, #80]	@ (8005b64 <USB_HostInit+0x178>)
 8005b12:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005b16:	e009      	b.n	8005b2c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2280      	movs	r2, #128	@ 0x80
 8005b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a11      	ldr	r2, [pc, #68]	@ (8005b68 <USB_HostInit+0x17c>)
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a11      	ldr	r2, [pc, #68]	@ (8005b6c <USB_HostInit+0x180>)
 8005b28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d105      	bne.n	8005b40 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	f043 0210 	orr.w	r2, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	4b0a      	ldr	r3, [pc, #40]	@ (8005b70 <USB_HostInit+0x184>)
 8005b46:	4313      	orrs	r3, r2
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b58:	b004      	add	sp, #16
 8005b5a:	4770      	bx	lr
 8005b5c:	40040000 	.word	0x40040000
 8005b60:	01000200 	.word	0x01000200
 8005b64:	00e00300 	.word	0x00e00300
 8005b68:	00600080 	.word	0x00600080
 8005b6c:	004000e0 	.word	0x004000e0
 8005b70:	a3200008 	.word	0xa3200008

08005b74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68fa      	ldr	r2, [r7, #12]
 8005b8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005b92:	f023 0303 	bic.w	r3, r3, #3
 8005b96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	68f9      	ldr	r1, [r7, #12]
 8005ba8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d107      	bne.n	8005bc6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005bc2:	6053      	str	r3, [r2, #4]
 8005bc4:	e00c      	b.n	8005be0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d107      	bne.n	8005bdc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	e001      	b.n	8005be0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b084      	sub	sp, #16
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c0e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c1c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005c1e:	2064      	movs	r0, #100	@ 0x64
 8005c20:	f7fb f99e 	bl	8000f60 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c30:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005c32:	200a      	movs	r0, #10
 8005c34:	f7fb f994 	bl	8000f60 <HAL_Delay>

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b085      	sub	sp, #20
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005c66:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <USB_DriveVbus+0x44>
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d106      	bne.n	8005c86 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005c80:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005c84:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c90:	d109      	bne.n	8005ca6 <USB_DriveVbus+0x64>
 8005c92:	78fb      	ldrb	r3, [r7, #3]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005ca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ca4:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	0c5b      	lsrs	r3, r3, #17
 8005cd2:	f003 0303 	and.w	r3, r3, #3
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005cf4:	689b      	ldr	r3, [r3, #8]
 8005cf6:	b29b      	uxth	r3, r3
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3714      	adds	r7, #20
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	4608      	mov	r0, r1
 8005d0e:	4611      	mov	r1, r2
 8005d10:	461a      	mov	r2, r3
 8005d12:	4603      	mov	r3, r0
 8005d14:	70fb      	strb	r3, [r7, #3]
 8005d16:	460b      	mov	r3, r1
 8005d18:	70bb      	strb	r3, [r7, #2]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d32:	461a      	mov	r2, r3
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005d3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d87c      	bhi.n	8005e3c <USB_HC_Init+0x138>
 8005d42:	a201      	add	r2, pc, #4	@ (adr r2, 8005d48 <USB_HC_Init+0x44>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005dff 	.word	0x08005dff
 8005d50:	08005d59 	.word	0x08005d59
 8005d54:	08005dc1 	.word	0x08005dc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d64:	461a      	mov	r2, r3
 8005d66:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005d6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005d6c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	da10      	bge.n	8005d96 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	78fa      	ldrb	r2, [r7, #3]
 8005d84:	0151      	lsls	r1, r2, #5
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	440a      	add	r2, r1
 8005d8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d92:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005d94:	e055      	b.n	8005e42 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a6f      	ldr	r2, [pc, #444]	@ (8005f58 <USB_HC_Init+0x254>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d151      	bne.n	8005e42 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8005d9e:	78fb      	ldrb	r3, [r7, #3]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	78fa      	ldrb	r2, [r7, #3]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005db8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005dbc:	60d3      	str	r3, [r2, #12]
      break;
 8005dbe:	e040      	b.n	8005e42 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dc0:	78fb      	ldrb	r3, [r7, #3]
 8005dc2:	015a      	lsls	r2, r3, #5
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	da34      	bge.n	8005e46 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	78fa      	ldrb	r2, [r7, #3]
 8005dec:	0151      	lsls	r1, r2, #5
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	440a      	add	r2, r1
 8005df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005dfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005dfc:	e023      	b.n	8005e46 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005dfe:	78fb      	ldrb	r3, [r7, #3]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	f240 2325 	movw	r3, #549	@ 0x225
 8005e10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005e12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da17      	bge.n	8005e4a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005e1a:	78fb      	ldrb	r3, [r7, #3]
 8005e1c:	015a      	lsls	r2, r3, #5
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	4413      	add	r3, r2
 8005e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	78fa      	ldrb	r2, [r7, #3]
 8005e2a:	0151      	lsls	r1, r2, #5
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	440a      	add	r2, r1
 8005e30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e34:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005e38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005e3a:	e006      	b.n	8005e4a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	77fb      	strb	r3, [r7, #31]
      break;
 8005e40:	e004      	b.n	8005e4c <USB_HC_Init+0x148>
      break;
 8005e42:	bf00      	nop
 8005e44:	e002      	b.n	8005e4c <USB_HC_Init+0x148>
      break;
 8005e46:	bf00      	nop
 8005e48:	e000      	b.n	8005e4c <USB_HC_Init+0x148>
      break;
 8005e4a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005e4c:	78fb      	ldrb	r3, [r7, #3]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	0151      	lsls	r1, r2, #5
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	440a      	add	r2, r1
 8005e74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e78:	f043 0302 	orr.w	r3, r3, #2
 8005e7c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	6939      	ldr	r1, [r7, #16]
 8005e94:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005ea8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	da03      	bge.n	8005eb8 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005eb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eb4:	61bb      	str	r3, [r7, #24]
 8005eb6:	e001      	b.n	8005ebc <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff fef9 	bl	8005cb4 <USB_GetHostSpeed>
 8005ec2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005ec4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d106      	bne.n	8005eda <USB_HC_Init+0x1d6>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d003      	beq.n	8005eda <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005ed2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e001      	b.n	8005ede <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005ede:	787b      	ldrb	r3, [r7, #1]
 8005ee0:	059b      	lsls	r3, r3, #22
 8005ee2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005ee6:	78bb      	ldrb	r3, [r7, #2]
 8005ee8:	02db      	lsls	r3, r3, #11
 8005eea:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005eee:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ef0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ef4:	049b      	lsls	r3, r3, #18
 8005ef6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005efa:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005efc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005f02:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f0c:	78fa      	ldrb	r2, [r7, #3]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	693a      	ldr	r2, [r7, #16]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005f18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005f1c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005f1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f22:	2b03      	cmp	r3, #3
 8005f24:	d003      	beq.n	8005f2e <USB_HC_Init+0x22a>
 8005f26:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10f      	bne.n	8005f4e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	78fa      	ldrb	r2, [r7, #3]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005f4c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005f4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3720      	adds	r7, #32
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40040000 	.word	0x40040000

08005f5c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08c      	sub	sp, #48	@ 0x30
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	4613      	mov	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	785b      	ldrb	r3, [r3, #1]
 8005f72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005f78:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4a5d      	ldr	r2, [pc, #372]	@ (80060f4 <USB_HC_StartXfer+0x198>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d12f      	bne.n	8005fe2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d11c      	bne.n	8005fc2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	7c9b      	ldrb	r3, [r3, #18]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <USB_HC_StartXfer+0x3c>
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	7c9b      	ldrb	r3, [r3, #18]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d124      	bne.n	8005fe2 <USB_HC_StartXfer+0x86>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	799b      	ldrb	r3, [r3, #6]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	69fa      	ldr	r2, [r7, #28]
 8005fb0:	0151      	lsls	r1, r2, #5
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fbe:	60d3      	str	r3, [r2, #12]
 8005fc0:	e00f      	b.n	8005fe2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	791b      	ldrb	r3, [r3, #4]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <USB_HC_StartXfer+0x86>
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	795b      	ldrb	r3, [r3, #5]
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d107      	bne.n	8005fe2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 fb6b 	bl	80066b4 <USB_DoPing>
        return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e232      	b.n	8006448 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	799b      	ldrb	r3, [r3, #6]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d158      	bne.n	800609c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005fea:	2301      	movs	r3, #1
 8005fec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	78db      	ldrb	r3, [r3, #3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d007      	beq.n	8006006 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ff6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	8a92      	ldrh	r2, [r2, #20]
 8005ffc:	fb03 f202 	mul.w	r2, r3, r2
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	61da      	str	r2, [r3, #28]
 8006004:	e07c      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	7c9b      	ldrb	r3, [r3, #18]
 800600a:	2b01      	cmp	r3, #1
 800600c:	d130      	bne.n	8006070 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	2bbc      	cmp	r3, #188	@ 0xbc
 8006014:	d918      	bls.n	8006048 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	8a9b      	ldrh	r3, [r3, #20]
 800601a:	461a      	mov	r2, r3
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	69da      	ldr	r2, [r3, #28]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d003      	beq.n	8006038 <USB_HC_StartXfer+0xdc>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d103      	bne.n	8006040 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2202      	movs	r2, #2
 800603c:	60da      	str	r2, [r3, #12]
 800603e:	e05f      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	2201      	movs	r2, #1
 8006044:	60da      	str	r2, [r3, #12]
 8006046:	e05b      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6a1a      	ldr	r2, [r3, #32]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d007      	beq.n	8006068 <USB_HC_StartXfer+0x10c>
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d003      	beq.n	8006068 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2204      	movs	r2, #4
 8006064:	60da      	str	r2, [r3, #12]
 8006066:	e04b      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2203      	movs	r2, #3
 800606c:	60da      	str	r2, [r3, #12]
 800606e:	e047      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b01      	cmp	r3, #1
 8006074:	d10d      	bne.n	8006092 <USB_HC_StartXfer+0x136>
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	8a92      	ldrh	r2, [r2, #20]
 800607e:	4293      	cmp	r3, r2
 8006080:	d907      	bls.n	8006092 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006082:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	8a92      	ldrh	r2, [r2, #20]
 8006088:	fb03 f202 	mul.w	r2, r3, r2
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	61da      	str	r2, [r3, #28]
 8006090:	e036      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6a1a      	ldr	r2, [r3, #32]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	61da      	str	r2, [r3, #28]
 800609a:	e031      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d018      	beq.n	80060d6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	8a92      	ldrh	r2, [r2, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	3b01      	subs	r3, #1
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	8a92      	ldrh	r2, [r2, #20]
 80060b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060b8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80060ba:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80060bc:	8b7b      	ldrh	r3, [r7, #26]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d90b      	bls.n	80060da <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80060c2:	8b7b      	ldrh	r3, [r7, #26]
 80060c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	8a92      	ldrh	r2, [r2, #20]
 80060cc:	fb03 f202 	mul.w	r2, r3, r2
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	61da      	str	r2, [r3, #28]
 80060d4:	e001      	b.n	80060da <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80060d6:	2301      	movs	r3, #1
 80060d8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	78db      	ldrb	r3, [r3, #3]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00a      	beq.n	80060f8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80060e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80060e4:	68ba      	ldr	r2, [r7, #8]
 80060e6:	8a92      	ldrh	r2, [r2, #20]
 80060e8:	fb03 f202 	mul.w	r2, r3, r2
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	61da      	str	r2, [r3, #28]
 80060f0:	e006      	b.n	8006100 <USB_HC_StartXfer+0x1a4>
 80060f2:	bf00      	nop
 80060f4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6a1a      	ldr	r2, [r3, #32]
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	69db      	ldr	r3, [r3, #28]
 8006104:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006108:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800610a:	04d9      	lsls	r1, r3, #19
 800610c:	4ba3      	ldr	r3, [pc, #652]	@ (800639c <USB_HC_StartXfer+0x440>)
 800610e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006110:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	7d9b      	ldrb	r3, [r3, #22]
 8006116:	075b      	lsls	r3, r3, #29
 8006118:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800611c:	69f9      	ldr	r1, [r7, #28]
 800611e:	0148      	lsls	r0, r1, #5
 8006120:	6a39      	ldr	r1, [r7, #32]
 8006122:	4401      	add	r1, r0
 8006124:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006128:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800612a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800612c:	79fb      	ldrb	r3, [r7, #7]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	6999      	ldr	r1, [r3, #24]
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	015a      	lsls	r2, r3, #5
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4413      	add	r3, r2
 800613e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006142:	460a      	mov	r2, r1
 8006144:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006146:	6a3b      	ldr	r3, [r7, #32]
 8006148:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 0301 	and.w	r3, r3, #1
 8006152:	2b00      	cmp	r3, #0
 8006154:	bf0c      	ite	eq
 8006156:	2301      	moveq	r3, #1
 8006158:	2300      	movne	r3, #0
 800615a:	b2db      	uxtb	r3, r3
 800615c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	6a3b      	ldr	r3, [r7, #32]
 8006164:	4413      	add	r3, r2
 8006166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	440a      	add	r2, r1
 8006174:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006178:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800617c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	4413      	add	r3, r2
 8006186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	7e7b      	ldrb	r3, [r7, #25]
 800618e:	075b      	lsls	r3, r3, #29
 8006190:	69f9      	ldr	r1, [r7, #28]
 8006192:	0148      	lsls	r0, r1, #5
 8006194:	6a39      	ldr	r1, [r7, #32]
 8006196:	4401      	add	r1, r0
 8006198:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800619c:	4313      	orrs	r3, r2
 800619e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	799b      	ldrb	r3, [r3, #6]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	f040 80c3 	bne.w	8006330 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	7c5b      	ldrb	r3, [r3, #17]
 80061ae:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061b4:	4313      	orrs	r3, r2
 80061b6:	69fa      	ldr	r2, [r7, #28]
 80061b8:	0151      	lsls	r1, r2, #5
 80061ba:	6a3a      	ldr	r2, [r7, #32]
 80061bc:	440a      	add	r2, r1
 80061be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80061c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80061c6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	69fa      	ldr	r2, [r7, #28]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	6a3a      	ldr	r2, [r7, #32]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	79db      	ldrb	r3, [r3, #7]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d123      	bne.n	8006238 <USB_HC_StartXfer+0x2dc>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	78db      	ldrb	r3, [r3, #3]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d11f      	bne.n	8006238 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	0151      	lsls	r1, r2, #5
 800620a:	6a3a      	ldr	r2, [r7, #32]
 800620c:	440a      	add	r2, r1
 800620e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006212:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006216:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	4413      	add	r3, r2
 8006220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	440a      	add	r2, r1
 800622e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006236:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	7c9b      	ldrb	r3, [r3, #18]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d003      	beq.n	8006248 <USB_HC_StartXfer+0x2ec>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	7c9b      	ldrb	r3, [r3, #18]
 8006244:	2b03      	cmp	r3, #3
 8006246:	d117      	bne.n	8006278 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800624c:	2b01      	cmp	r3, #1
 800624e:	d113      	bne.n	8006278 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	78db      	ldrb	r3, [r3, #3]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10f      	bne.n	8006278 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	4413      	add	r3, r2
 8006260:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	0151      	lsls	r1, r2, #5
 800626a:	6a3a      	ldr	r2, [r7, #32]
 800626c:	440a      	add	r2, r1
 800626e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006272:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006276:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	7c9b      	ldrb	r3, [r3, #18]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d162      	bne.n	8006346 <USB_HC_StartXfer+0x3ea>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	78db      	ldrb	r3, [r3, #3]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d15e      	bne.n	8006346 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	3b01      	subs	r3, #1
 800628e:	2b03      	cmp	r3, #3
 8006290:	d858      	bhi.n	8006344 <USB_HC_StartXfer+0x3e8>
 8006292:	a201      	add	r2, pc, #4	@ (adr r2, 8006298 <USB_HC_StartXfer+0x33c>)
 8006294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006298:	080062a9 	.word	0x080062a9
 800629c:	080062cb 	.word	0x080062cb
 80062a0:	080062ed 	.word	0x080062ed
 80062a4:	0800630f 	.word	0x0800630f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	0151      	lsls	r1, r2, #5
 80062ba:	6a3a      	ldr	r2, [r7, #32]
 80062bc:	440a      	add	r2, r1
 80062be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062c6:	6053      	str	r3, [r2, #4]
          break;
 80062c8:	e03d      	b.n	8006346 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	6a3b      	ldr	r3, [r7, #32]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	0151      	lsls	r1, r2, #5
 80062dc:	6a3a      	ldr	r2, [r7, #32]
 80062de:	440a      	add	r2, r1
 80062e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062e4:	f043 030e 	orr.w	r3, r3, #14
 80062e8:	6053      	str	r3, [r2, #4]
          break;
 80062ea:	e02c      	b.n	8006346 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	69fa      	ldr	r2, [r7, #28]
 80062fc:	0151      	lsls	r1, r2, #5
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	440a      	add	r2, r1
 8006302:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800630a:	6053      	str	r3, [r2, #4]
          break;
 800630c:	e01b      	b.n	8006346 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	4413      	add	r3, r2
 8006316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	69fa      	ldr	r2, [r7, #28]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	6a3a      	ldr	r2, [r7, #32]
 8006322:	440a      	add	r2, r1
 8006324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006328:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800632c:	6053      	str	r3, [r2, #4]
          break;
 800632e:	e00a      	b.n	8006346 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	4413      	add	r3, r2
 8006338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800633c:	461a      	mov	r2, r3
 800633e:	2300      	movs	r3, #0
 8006340:	6053      	str	r3, [r2, #4]
 8006342:	e000      	b.n	8006346 <USB_HC_StartXfer+0x3ea>
          break;
 8006344:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	4413      	add	r3, r2
 800634e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800635c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	78db      	ldrb	r3, [r3, #3]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800636c:	613b      	str	r3, [r7, #16]
 800636e:	e003      	b.n	8006378 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006376:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800637e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	4413      	add	r3, r2
 8006388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638c:	461a      	mov	r2, r3
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006392:	79fb      	ldrb	r3, [r7, #7]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	e055      	b.n	8006448 <USB_HC_StartXfer+0x4ec>
 800639c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	78db      	ldrb	r3, [r3, #3]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d14e      	bne.n	8006446 <USB_HC_StartXfer+0x4ea>
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d04a      	beq.n	8006446 <USB_HC_StartXfer+0x4ea>
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	79db      	ldrb	r3, [r3, #7]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d146      	bne.n	8006446 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	7c9b      	ldrb	r3, [r3, #18]
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d831      	bhi.n	8006424 <USB_HC_StartXfer+0x4c8>
 80063c0:	a201      	add	r2, pc, #4	@ (adr r2, 80063c8 <USB_HC_StartXfer+0x46c>)
 80063c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c6:	bf00      	nop
 80063c8:	080063d9 	.word	0x080063d9
 80063cc:	080063fd 	.word	0x080063fd
 80063d0:	080063d9 	.word	0x080063d9
 80063d4:	080063fd 	.word	0x080063fd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	3303      	adds	r3, #3
 80063de:	089b      	lsrs	r3, r3, #2
 80063e0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063e2:	8afa      	ldrh	r2, [r7, #22]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d91c      	bls.n	8006428 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f043 0220 	orr.w	r2, r3, #32
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	619a      	str	r2, [r3, #24]
        }
        break;
 80063fa:	e015      	b.n	8006428 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	3303      	adds	r3, #3
 8006402:	089b      	lsrs	r3, r3, #2
 8006404:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006406:	8afa      	ldrh	r2, [r7, #22]
 8006408:	6a3b      	ldr	r3, [r7, #32]
 800640a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	b29b      	uxth	r3, r3
 8006412:	429a      	cmp	r2, r3
 8006414:	d90a      	bls.n	800642c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	699b      	ldr	r3, [r3, #24]
 800641a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	619a      	str	r2, [r3, #24]
        }
        break;
 8006422:	e003      	b.n	800642c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006424:	bf00      	nop
 8006426:	e002      	b.n	800642e <USB_HC_StartXfer+0x4d2>
        break;
 8006428:	bf00      	nop
 800642a:	e000      	b.n	800642e <USB_HC_StartXfer+0x4d2>
        break;
 800642c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	6999      	ldr	r1, [r3, #24]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	785a      	ldrb	r2, [r3, #1]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	b29b      	uxth	r3, r3
 800643c:	2000      	movs	r0, #0
 800643e:	9000      	str	r0, [sp, #0]
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f7ff f9c9 	bl	80057d8 <USB_WritePacket>
  }

  return HAL_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3728      	adds	r7, #40	@ 0x28
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006462:	695b      	ldr	r3, [r3, #20]
 8006464:	b29b      	uxth	r3, r3
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006472:	b480      	push	{r7}
 8006474:	b089      	sub	sp, #36	@ 0x24
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
 800647a:	460b      	mov	r3, r1
 800647c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	4413      	add	r3, r2
 8006492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	0c9b      	lsrs	r3, r3, #18
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	0fdb      	lsrs	r3, r3, #31
 80064b0:	f003 0301 	and.w	r3, r3, #1
 80064b4:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	0fdb      	lsrs	r3, r3, #31
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 0320 	and.w	r3, r3, #32
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d10d      	bne.n	80064f4 <USB_HC_Halt+0x82>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d10a      	bne.n	80064f4 <USB_HC_Halt+0x82>
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d005      	beq.n	80064f0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d002      	beq.n	80064f0 <USB_HC_Halt+0x7e>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d101      	bne.n	80064f4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e0d8      	b.n	80066a6 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <USB_HC_Halt+0x8e>
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d173      	bne.n	80065e8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800651a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800651e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f003 0320 	and.w	r3, r3, #32
 8006528:	2b00      	cmp	r3, #0
 800652a:	d14a      	bne.n	80065c2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006534:	2b00      	cmp	r3, #0
 8006536:	d133      	bne.n	80065a0 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	015a      	lsls	r2, r3, #5
 800653c:	69fb      	ldr	r3, [r7, #28]
 800653e:	4413      	add	r3, r2
 8006540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	69ba      	ldr	r2, [r7, #24]
 8006548:	0151      	lsls	r1, r2, #5
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	440a      	add	r2, r1
 800654e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006552:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006556:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006576:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	3301      	adds	r3, #1
 800657c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006584:	d82e      	bhi.n	80065e4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	015a      	lsls	r2, r3, #5
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	4413      	add	r3, r2
 800658e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006598:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800659c:	d0ec      	beq.n	8006578 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800659e:	e081      	b.n	80066a4 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	69fa      	ldr	r2, [r7, #28]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065be:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065c0:	e070      	b.n	80066a4 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	0151      	lsls	r1, r2, #5
 80065d4:	69fa      	ldr	r2, [r7, #28]
 80065d6:	440a      	add	r2, r1
 80065d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065e2:	e05f      	b.n	80066a4 <USB_HC_Halt+0x232>
            break;
 80065e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065e6:	e05d      	b.n	80066a4 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006606:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d133      	bne.n	8006680 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	0151      	lsls	r1, r2, #5
 800662a:	69fa      	ldr	r2, [r7, #28]
 800662c:	440a      	add	r2, r1
 800662e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006632:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	4413      	add	r3, r2
 8006640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	0151      	lsls	r1, r2, #5
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	440a      	add	r2, r1
 800664e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006652:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006656:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	3301      	adds	r3, #1
 800665c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006664:	d81d      	bhi.n	80066a2 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006666:	69bb      	ldr	r3, [r7, #24]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	4413      	add	r3, r2
 800666e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800667c:	d0ec      	beq.n	8006658 <USB_HC_Halt+0x1e6>
 800667e:	e011      	b.n	80066a4 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006680:	69bb      	ldr	r3, [r7, #24]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	440a      	add	r2, r1
 8006696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800669a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e000      	b.n	80066a4 <USB_HC_Halt+0x232>
          break;
 80066a2:	bf00      	nop
    }
  }

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3724      	adds	r7, #36	@ 0x24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
	...

080066b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	460b      	mov	r3, r1
 80066be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066c8:	2301      	movs	r3, #1
 80066ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	04da      	lsls	r2, r3, #19
 80066d0:	4b15      	ldr	r3, [pc, #84]	@ (8006728 <USB_DoPing+0x74>)
 80066d2:	4013      	ands	r3, r2
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	0151      	lsls	r1, r2, #5
 80066d8:	697a      	ldr	r2, [r7, #20]
 80066da:	440a      	add	r2, r1
 80066dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006704:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	015a      	lsls	r2, r3, #5
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	4413      	add	r3, r2
 800670e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006712:	461a      	mov	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
 8006726:	bf00      	nop
 8006728:	1ff80000 	.word	0x1ff80000

0800672c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b088      	sub	sp, #32
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800673c:	2300      	movs	r3, #0
 800673e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fe ff8c 	bl	800565e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006746:	2110      	movs	r1, #16
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fe ffe5 	bl	8005718 <USB_FlushTxFifo>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f7ff f80f 	bl	800577c <USB_FlushRxFifo>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006768:	2300      	movs	r3, #0
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e01f      	b.n	80067ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	015a      	lsls	r2, r3, #5
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	4413      	add	r3, r2
 8006776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006784:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800678c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006794:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	015a      	lsls	r2, r3, #5
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	4413      	add	r3, r2
 800679e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067a2:	461a      	mov	r2, r3
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61bb      	str	r3, [r7, #24]
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	2b0f      	cmp	r3, #15
 80067b2:	d9dc      	bls.n	800676e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067b4:	2300      	movs	r3, #0
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	e034      	b.n	8006824 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	015a      	lsls	r2, r3, #5
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	4413      	add	r3, r2
 80067c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ee:	461a      	mov	r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3301      	adds	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006800:	d80c      	bhi.n	800681c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	4413      	add	r3, r2
 800680a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006814:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006818:	d0ec      	beq.n	80067f4 <USB_StopHost+0xc8>
 800681a:	e000      	b.n	800681e <USB_StopHost+0xf2>
        break;
 800681c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3301      	adds	r3, #1
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	69bb      	ldr	r3, [r7, #24]
 8006826:	2b0f      	cmp	r3, #15
 8006828:	d9c7      	bls.n	80067ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006830:	461a      	mov	r2, r3
 8006832:	f04f 33ff 	mov.w	r3, #4294967295
 8006836:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f04f 32ff 	mov.w	r2, #4294967295
 800683e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fe fefb 	bl	800563c <USB_EnableGlobalInt>

  return ret;
 8006846:	7ffb      	ldrb	r3, [r7, #31]
}
 8006848:	4618      	mov	r0, r3
 800684a:	3720      	adds	r7, #32
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006850:	b590      	push	{r4, r7, lr}
 8006852:	b089      	sub	sp, #36	@ 0x24
 8006854:	af04      	add	r7, sp, #16
 8006856:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006858:	2301      	movs	r3, #1
 800685a:	2202      	movs	r2, #2
 800685c:	2102      	movs	r1, #2
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fcd7 	bl	8007212 <USBH_FindInterface>
 8006864:	4603      	mov	r3, r0
 8006866:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	2bff      	cmp	r3, #255	@ 0xff
 800686c:	d002      	beq.n	8006874 <USBH_CDC_InterfaceInit+0x24>
 800686e:	7bfb      	ldrb	r3, [r7, #15]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d901      	bls.n	8006878 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006874:	2302      	movs	r3, #2
 8006876:	e13d      	b.n	8006af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006878:	7bfb      	ldrb	r3, [r7, #15]
 800687a:	4619      	mov	r1, r3
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fcac 	bl	80071da <USBH_SelectInterface>
 8006882:	4603      	mov	r3, r0
 8006884:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d001      	beq.n	8006890 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800688c:	2302      	movs	r3, #2
 800688e:	e131      	b.n	8006af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006896:	2050      	movs	r0, #80	@ 0x50
 8006898:	f005 f88a 	bl	800b9b0 <malloc>
 800689c:	4603      	mov	r3, r0
 800689e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d101      	bne.n	80068b4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068b0:	2302      	movs	r3, #2
 80068b2:	e11f      	b.n	8006af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068b4:	2250      	movs	r2, #80	@ 0x50
 80068b6:	2100      	movs	r1, #0
 80068b8:	68b8      	ldr	r0, [r7, #8]
 80068ba:	f005 f937 	bl	800bb2c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80068be:	7bfb      	ldrb	r3, [r7, #15]
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	211a      	movs	r1, #26
 80068c4:	fb01 f303 	mul.w	r3, r1, r3
 80068c8:	4413      	add	r3, r2
 80068ca:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da15      	bge.n	8006902 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068d6:	7bfb      	ldrb	r3, [r7, #15]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	211a      	movs	r1, #26
 80068dc:	fb01 f303 	mul.w	r3, r1, r3
 80068e0:	4413      	add	r3, r2
 80068e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80068e6:	781a      	ldrb	r2, [r3, #0]
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	211a      	movs	r1, #26
 80068f2:	fb01 f303 	mul.w	r3, r1, r3
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80068fc:	881a      	ldrh	r2, [r3, #0]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	4619      	mov	r1, r3
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 fa1c 	bl	8008d46 <USBH_AllocPipe>
 800690e:	4603      	mov	r3, r0
 8006910:	461a      	mov	r2, r3
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	7819      	ldrb	r1, [r3, #0]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	7858      	ldrb	r0, [r3, #1]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	8952      	ldrh	r2, [r2, #10]
 800692e:	9202      	str	r2, [sp, #8]
 8006930:	2203      	movs	r2, #3
 8006932:	9201      	str	r2, [sp, #4]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	4623      	mov	r3, r4
 8006938:	4602      	mov	r2, r0
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f002 f9d4 	bl	8008ce8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2200      	movs	r2, #0
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f004 ffab 	bl	800b8a4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800694e:	2300      	movs	r3, #0
 8006950:	2200      	movs	r2, #0
 8006952:	210a      	movs	r1, #10
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f000 fc5c 	bl	8007212 <USBH_FindInterface>
 800695a:	4603      	mov	r3, r0
 800695c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	2bff      	cmp	r3, #255	@ 0xff
 8006962:	d002      	beq.n	800696a <USBH_CDC_InterfaceInit+0x11a>
 8006964:	7bfb      	ldrb	r3, [r7, #15]
 8006966:	2b01      	cmp	r3, #1
 8006968:	d901      	bls.n	800696e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800696a:	2302      	movs	r3, #2
 800696c:	e0c2      	b.n	8006af4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800696e:	7bfb      	ldrb	r3, [r7, #15]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	211a      	movs	r1, #26
 8006974:	fb01 f303 	mul.w	r3, r1, r3
 8006978:	4413      	add	r3, r2
 800697a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	b25b      	sxtb	r3, r3
 8006982:	2b00      	cmp	r3, #0
 8006984:	da16      	bge.n	80069b4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	211a      	movs	r1, #26
 800698c:	fb01 f303 	mul.w	r3, r1, r3
 8006990:	4413      	add	r3, r2
 8006992:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006996:	781a      	ldrb	r2, [r3, #0]
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	211a      	movs	r1, #26
 80069a2:	fb01 f303 	mul.w	r3, r1, r3
 80069a6:	4413      	add	r3, r2
 80069a8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80069ac:	881a      	ldrh	r2, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	835a      	strh	r2, [r3, #26]
 80069b2:	e015      	b.n	80069e0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069b4:	7bfb      	ldrb	r3, [r7, #15]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	211a      	movs	r1, #26
 80069ba:	fb01 f303 	mul.w	r3, r1, r3
 80069be:	4413      	add	r3, r2
 80069c0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80069c4:	781a      	ldrb	r2, [r3, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	211a      	movs	r1, #26
 80069d0:	fb01 f303 	mul.w	r3, r1, r3
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80069da:	881a      	ldrh	r2, [r3, #0]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	211a      	movs	r1, #26
 80069e6:	fb01 f303 	mul.w	r3, r1, r3
 80069ea:	4413      	add	r3, r2
 80069ec:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	b25b      	sxtb	r3, r3
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	da16      	bge.n	8006a26 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	211a      	movs	r1, #26
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a08:	781a      	ldrb	r2, [r3, #0]
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a0e:	7bfb      	ldrb	r3, [r7, #15]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	211a      	movs	r1, #26
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a1e:	881a      	ldrh	r2, [r3, #0]
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	835a      	strh	r2, [r3, #26]
 8006a24:	e015      	b.n	8006a52 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a26:	7bfb      	ldrb	r3, [r7, #15]
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	211a      	movs	r1, #26
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006a36:	781a      	ldrb	r2, [r3, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a3c:	7bfb      	ldrb	r3, [r7, #15]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	211a      	movs	r1, #26
 8006a42:	fb01 f303 	mul.w	r3, r1, r3
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006a4c:	881a      	ldrh	r2, [r3, #0]
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	7b9b      	ldrb	r3, [r3, #14]
 8006a56:	4619      	mov	r1, r3
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f002 f974 	bl	8008d46 <USBH_AllocPipe>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	7bdb      	ldrb	r3, [r3, #15]
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f002 f96a 	bl	8008d46 <USBH_AllocPipe>
 8006a72:	4603      	mov	r3, r0
 8006a74:	461a      	mov	r2, r3
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	7b59      	ldrb	r1, [r3, #13]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	7b98      	ldrb	r0, [r3, #14]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	8b12      	ldrh	r2, [r2, #24]
 8006a92:	9202      	str	r2, [sp, #8]
 8006a94:	2202      	movs	r2, #2
 8006a96:	9201      	str	r2, [sp, #4]
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	4623      	mov	r3, r4
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f002 f922 	bl	8008ce8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	7b19      	ldrb	r1, [r3, #12]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	7bd8      	ldrb	r0, [r3, #15]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	8b52      	ldrh	r2, [r2, #26]
 8006abc:	9202      	str	r2, [sp, #8]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	9201      	str	r2, [sp, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	4623      	mov	r3, r4
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f002 f90d 	bl	8008ce8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	7b5b      	ldrb	r3, [r3, #13]
 8006ada:	2200      	movs	r2, #0
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f004 fee0 	bl	800b8a4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	7b1b      	ldrb	r3, [r3, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f004 fed9 	bl	800b8a4 <USBH_LL_SetToggle>

  return USBH_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd90      	pop	{r4, r7, pc}

08006afc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b0a:	69db      	ldr	r3, [r3, #28]
 8006b0c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00e      	beq.n	8006b34 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f002 f902 	bl	8008d26 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	4619      	mov	r1, r3
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f002 f92d 	bl	8008d88 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	7b1b      	ldrb	r3, [r3, #12]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	7b1b      	ldrb	r3, [r3, #12]
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f002 f8ef 	bl	8008d26 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	7b1b      	ldrb	r3, [r3, #12]
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f002 f91a 	bl	8008d88 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	7b5b      	ldrb	r3, [r3, #13]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00e      	beq.n	8006b80 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	7b5b      	ldrb	r3, [r3, #13]
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f002 f8dc 	bl	8008d26 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	7b5b      	ldrb	r3, [r3, #13]
 8006b72:	4619      	mov	r1, r3
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f002 f907 	bl	8008d88 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b86:	69db      	ldr	r3, [r3, #28]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00b      	beq.n	8006ba4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006b92:	69db      	ldr	r3, [r3, #28]
 8006b94:	4618      	mov	r0, r3
 8006b96:	f004 ff13 	bl	800b9c0 <free>
    phost->pActiveClass->pData = 0U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3710      	adds	r7, #16
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b084      	sub	sp, #16
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006bbc:	69db      	ldr	r3, [r3, #28]
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3340      	adds	r3, #64	@ 0x40
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f8b1 	bl	8006d2e <GetLineCoding>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bd0:	7afb      	ldrb	r3, [r7, #11]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d105      	bne.n	8006be2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006bdc:	2102      	movs	r1, #2
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006be2:	7afb      	ldrb	r3, [r7, #11]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c02:	69db      	ldr	r3, [r3, #28]
 8006c04:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006c0c:	2b04      	cmp	r3, #4
 8006c0e:	d877      	bhi.n	8006d00 <USBH_CDC_Process+0x114>
 8006c10:	a201      	add	r2, pc, #4	@ (adr r2, 8006c18 <USBH_CDC_Process+0x2c>)
 8006c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c16:	bf00      	nop
 8006c18:	08006c2d 	.word	0x08006c2d
 8006c1c:	08006c33 	.word	0x08006c33
 8006c20:	08006c63 	.word	0x08006c63
 8006c24:	08006cd7 	.word	0x08006cd7
 8006c28:	08006ce5 	.word	0x08006ce5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c30:	e06d      	b.n	8006d0e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f897 	bl	8006d6c <SetLineCoding>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d104      	bne.n	8006c52 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2202      	movs	r2, #2
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c50:	e058      	b.n	8006d04 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c52:	7bbb      	ldrb	r3, [r7, #14]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d055      	beq.n	8006d04 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2204      	movs	r2, #4
 8006c5c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006c60:	e050      	b.n	8006d04 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3340      	adds	r3, #64	@ 0x40
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 f860 	bl	8006d2e <GetLineCoding>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d126      	bne.n	8006cc6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c8a:	791b      	ldrb	r3, [r3, #4]
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d13b      	bne.n	8006d08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c9a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d133      	bne.n	8006d08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006caa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d12b      	bne.n	8006d08 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006cb8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d124      	bne.n	8006d08 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f982 	bl	8006fc8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cc4:	e020      	b.n	8006d08 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d01d      	beq.n	8006d08 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2204      	movs	r2, #4
 8006cd0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006cd4:	e018      	b.n	8006d08 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f867 	bl	8006daa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 f8f6 	bl	8006ece <CDC_ProcessReception>
      break;
 8006ce2:	e014      	b.n	8006d0e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 f988 	bl	8007ffc <USBH_ClrFeature>
 8006cec:	4603      	mov	r3, r0
 8006cee:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10a      	bne.n	8006d0c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8006cfe:	e005      	b.n	8006d0c <USBH_CDC_Process+0x120>

    default:
      break;
 8006d00:	bf00      	nop
 8006d02:	e004      	b.n	8006d0e <USBH_CDC_Process+0x122>
      break;
 8006d04:	bf00      	nop
 8006d06:	e002      	b.n	8006d0e <USBH_CDC_Process+0x122>
      break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <USBH_CDC_Process+0x122>
      break;
 8006d0c:	bf00      	nop

  }

  return status;
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b083      	sub	sp, #12
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b082      	sub	sp, #8
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	22a1      	movs	r2, #161	@ 0xa1
 8006d3c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2221      	movs	r2, #33	@ 0x21
 8006d42:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2207      	movs	r2, #7
 8006d54:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	2207      	movs	r2, #7
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f001 fc82 	bl	8008666 <USBH_CtlReq>
 8006d62:	4603      	mov	r3, r0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2221      	movs	r2, #33	@ 0x21
 8006d7a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2207      	movs	r2, #7
 8006d92:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	2207      	movs	r2, #7
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f001 fc63 	bl	8008666 <USBH_CtlReq>
 8006da0:	4603      	mov	r3, r0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b086      	sub	sp, #24
 8006dae:	af02      	add	r7, sp, #8
 8006db0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d002      	beq.n	8006dd0 <CDC_ProcessTransmission+0x26>
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d023      	beq.n	8006e16 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dce:	e07a      	b.n	8006ec6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	8b12      	ldrh	r2, [r2, #24]
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d90b      	bls.n	8006df4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	69d9      	ldr	r1, [r3, #28]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8b1a      	ldrh	r2, [r3, #24]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	7b5b      	ldrb	r3, [r3, #13]
 8006de8:	2001      	movs	r0, #1
 8006dea:	9000      	str	r0, [sp, #0]
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 ff38 	bl	8008c62 <USBH_BulkSendData>
 8006df2:	e00b      	b.n	8006e0c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	7b5b      	ldrb	r3, [r3, #13]
 8006e02:	2001      	movs	r0, #1
 8006e04:	9000      	str	r0, [sp, #0]
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 ff2b 	bl	8008c62 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006e14:	e057      	b.n	8006ec6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	7b5b      	ldrb	r3, [r3, #13]
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f004 fd17 	bl	800b850 <USBH_LL_GetURBState>
 8006e22:	4603      	mov	r3, r0
 8006e24:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d136      	bne.n	8006e9a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	8b12      	ldrh	r2, [r2, #24]
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d90e      	bls.n	8006e56 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	8b12      	ldrh	r2, [r2, #24]
 8006e40:	1a9a      	subs	r2, r3, r2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	69db      	ldr	r3, [r3, #28]
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	8b12      	ldrh	r2, [r2, #24]
 8006e4e:	441a      	add	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	61da      	str	r2, [r3, #28]
 8006e54:	e002      	b.n	8006e5c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8006e6c:	e006      	b.n	8006e7c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f892 	bl	8006fa0 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006e90:	2200      	movs	r2, #0
 8006e92:	4619      	mov	r1, r3
 8006e94:	f002 f874 	bl	8008f80 <osMessagePut>
      break;
 8006e98:	e014      	b.n	8006ec4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e9a:	7afb      	ldrb	r3, [r7, #11]
 8006e9c:	2b02      	cmp	r3, #2
 8006e9e:	d111      	bne.n	8006ec4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	f002 f85e 	bl	8008f80 <osMessagePut>
      break;
 8006ec4:	bf00      	nop
  }
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b086      	sub	sp, #24
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d002      	beq.n	8006ef4 <CDC_ProcessReception+0x26>
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d00e      	beq.n	8006f10 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006ef2:	e051      	b.n	8006f98 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6a19      	ldr	r1, [r3, #32]
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	8b5a      	ldrh	r2, [r3, #26]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	7b1b      	ldrb	r3, [r3, #12]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 fed3 	bl	8008cac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2204      	movs	r2, #4
 8006f0a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006f0e:	e043      	b.n	8006f98 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	7b1b      	ldrb	r3, [r3, #12]
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f004 fc9a 	bl	800b850 <USBH_LL_GetURBState>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006f20:	7cfb      	ldrb	r3, [r7, #19]
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d137      	bne.n	8006f96 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	7b1b      	ldrb	r3, [r3, #12]
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f004 fbfd 	bl	800b72c <USBH_LL_GetLastXferSize>
 8006f32:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d016      	beq.n	8006f6c <CDC_ProcessReception+0x9e>
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	8b5b      	ldrh	r3, [r3, #26]
 8006f42:	461a      	mov	r2, r3
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d110      	bne.n	8006f6c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1ad2      	subs	r2, r2, r3
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	6a1a      	ldr	r2, [r3, #32]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	441a      	add	r2, r3
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2203      	movs	r2, #3
 8006f66:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8006f6a:	e006      	b.n	8006f7a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f81d 	bl	8006fb4 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2204      	movs	r2, #4
 8006f7e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4619      	mov	r1, r3
 8006f92:	f001 fff5 	bl	8008f80 <osMessagePut>
      break;
 8006f96:	bf00      	nop
  }
}
 8006f98:	bf00      	nop
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8006fdc:	b5b0      	push	{r4, r5, r7, lr}
 8006fde:	b090      	sub	sp, #64	@ 0x40
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	e04d      	b.n	8007090 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	79fa      	ldrb	r2, [r7, #7]
 8006ff8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 f847 	bl	80070a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8007040:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <USBH_Init+0xbc>)
 8007042:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8007046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800704c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f001 ff6b 	bl	8008f2e <osMessageCreate>
 8007058:	4602      	mov	r2, r0
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8007060:	4b0e      	ldr	r3, [pc, #56]	@ (800709c <USBH_Init+0xc0>)
 8007062:	f107 0414 	add.w	r4, r7, #20
 8007066:	461d      	mov	r5, r3
 8007068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800706a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007070:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8007074:	f107 0314 	add.w	r3, r7, #20
 8007078:	68f9      	ldr	r1, [r7, #12]
 800707a:	4618      	mov	r0, r3
 800707c:	f001 fef7 	bl	8008e6e <osThreadCreate>
 8007080:	4602      	mov	r2, r0
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f004 fa9b 	bl	800b5c4 <USBH_LL_Init>

  return USBH_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3740      	adds	r7, #64	@ 0x40
 8007094:	46bd      	mov	sp, r7
 8007096:	bdb0      	pop	{r4, r5, r7, pc}
 8007098:	0800bd78 	.word	0x0800bd78
 800709c:	0800bd94 	.word	0x0800bd94

080070a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80070a8:	2300      	movs	r3, #0
 80070aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80070ac:	2300      	movs	r3, #0
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	e009      	b.n	80070c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	33e0      	adds	r3, #224	@ 0xe0
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	2200      	movs	r2, #0
 80070be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b0f      	cmp	r3, #15
 80070ca:	d9f2      	bls.n	80070b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80070cc:	2300      	movs	r3, #0
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	e009      	b.n	80070e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80070ec:	d3f1      	bcc.n	80070d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2240      	movs	r2, #64	@ 0x40
 8007112:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2200      	movs	r2, #0
 800711e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	331c      	adds	r3, #28
 800713e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007142:	2100      	movs	r1, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f004 fcf1 	bl	800bb2c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f004 fce8 	bl	800bb2c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007162:	2212      	movs	r2, #18
 8007164:	2100      	movs	r1, #0
 8007166:	4618      	mov	r0, r3
 8007168:	f004 fce0 	bl	800bb2c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007172:	223e      	movs	r2, #62	@ 0x3e
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f004 fcd8 	bl	800bb2c <memset>

  return USBH_OK;
 800717c:	2300      	movs	r3, #0
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007186:	b480      	push	{r7}
 8007188:	b085      	sub	sp, #20
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d016      	beq.n	80071c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d10e      	bne.n	80071c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80071aa:	1c59      	adds	r1, r3, #1
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	33de      	adds	r3, #222	@ 0xde
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	73fb      	strb	r3, [r7, #15]
 80071c0:	e004      	b.n	80071cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80071c2:	2302      	movs	r3, #2
 80071c4:	73fb      	strb	r3, [r7, #15]
 80071c6:	e001      	b.n	80071cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80071c8:	2302      	movs	r3, #2
 80071ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	460b      	mov	r3, r1
 80071e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d204      	bcs.n	8007200 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	78fa      	ldrb	r2, [r7, #3]
 80071fa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80071fe:	e001      	b.n	8007204 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007200:	2302      	movs	r3, #2
 8007202:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007204:	7bfb      	ldrb	r3, [r7, #15]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007212:	b480      	push	{r7}
 8007214:	b087      	sub	sp, #28
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	4608      	mov	r0, r1
 800721c:	4611      	mov	r1, r2
 800721e:	461a      	mov	r2, r3
 8007220:	4603      	mov	r3, r0
 8007222:	70fb      	strb	r3, [r7, #3]
 8007224:	460b      	mov	r3, r1
 8007226:	70bb      	strb	r3, [r7, #2]
 8007228:	4613      	mov	r3, r2
 800722a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007230:	2300      	movs	r3, #0
 8007232:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800723a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800723c:	e025      	b.n	800728a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800723e:	7dfb      	ldrb	r3, [r7, #23]
 8007240:	221a      	movs	r2, #26
 8007242:	fb02 f303 	mul.w	r3, r2, r3
 8007246:	3308      	adds	r3, #8
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	4413      	add	r3, r2
 800724c:	3302      	adds	r3, #2
 800724e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	795b      	ldrb	r3, [r3, #5]
 8007254:	78fa      	ldrb	r2, [r7, #3]
 8007256:	429a      	cmp	r2, r3
 8007258:	d002      	beq.n	8007260 <USBH_FindInterface+0x4e>
 800725a:	78fb      	ldrb	r3, [r7, #3]
 800725c:	2bff      	cmp	r3, #255	@ 0xff
 800725e:	d111      	bne.n	8007284 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007264:	78ba      	ldrb	r2, [r7, #2]
 8007266:	429a      	cmp	r2, r3
 8007268:	d002      	beq.n	8007270 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800726a:	78bb      	ldrb	r3, [r7, #2]
 800726c:	2bff      	cmp	r3, #255	@ 0xff
 800726e:	d109      	bne.n	8007284 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007274:	787a      	ldrb	r2, [r7, #1]
 8007276:	429a      	cmp	r2, r3
 8007278:	d002      	beq.n	8007280 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800727a:	787b      	ldrb	r3, [r7, #1]
 800727c:	2bff      	cmp	r3, #255	@ 0xff
 800727e:	d101      	bne.n	8007284 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	e006      	b.n	8007292 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	3301      	adds	r3, #1
 8007288:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800728a:	7dfb      	ldrb	r3, [r7, #23]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d9d6      	bls.n	800723e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007290:	23ff      	movs	r3, #255	@ 0xff
}
 8007292:	4618      	mov	r0, r3
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b082      	sub	sp, #8
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f004 f9c8 	bl	800b63c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80072ac:	2101      	movs	r1, #1
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f004 fae1 	bl	800b876 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
	...

080072c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af04      	add	r7, sp, #16
 80072c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80072c8:	2302      	movs	r3, #2
 80072ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d102      	bne.n	80072e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2203      	movs	r2, #3
 80072e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b0b      	cmp	r3, #11
 80072ea:	f200 8244 	bhi.w	8007776 <USBH_Process+0x4b6>
 80072ee:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <USBH_Process+0x34>)
 80072f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f4:	08007325 	.word	0x08007325
 80072f8:	08007373 	.word	0x08007373
 80072fc:	080073f7 	.word	0x080073f7
 8007300:	080076f5 	.word	0x080076f5
 8007304:	08007777 	.word	0x08007777
 8007308:	080074b3 	.word	0x080074b3
 800730c:	0800767f 	.word	0x0800767f
 8007310:	08007505 	.word	0x08007505
 8007314:	08007541 	.word	0x08007541
 8007318:	08007579 	.word	0x08007579
 800731c:	080075d7 	.word	0x080075d7
 8007320:	080076dd 	.word	0x080076dd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	f000 8224 	beq.w	800777a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007338:	20c8      	movs	r0, #200	@ 0xc8
 800733a:	f004 fae6 	bl	800b90a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f004 f9d9 	bl	800b6f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007368:	2200      	movs	r2, #0
 800736a:	4619      	mov	r1, r3
 800736c:	f001 fe08 	bl	8008f80 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007370:	e203      	b.n	800777a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007378:	2b01      	cmp	r3, #1
 800737a:	d107      	bne.n	800738c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	701a      	strb	r2, [r3, #0]
 800738a:	e025      	b.n	80073d8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007392:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007396:	d914      	bls.n	80073c2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800739e:	3301      	adds	r3, #1
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d903      	bls.n	80073ba <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	220d      	movs	r2, #13
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	e00e      	b.n	80073d8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e00a      	b.n	80073d8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80073c8:	f103 020a 	add.w	r2, r3, #10
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80073d2:	200a      	movs	r0, #10
 80073d4:	f004 fa99 	bl	800b90a <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80073ec:	2200      	movs	r2, #0
 80073ee:	4619      	mov	r1, r3
 80073f0:	f001 fdc6 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80073f4:	e1c8      	b.n	8007788 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007406:	2104      	movs	r1, #4
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800740c:	2064      	movs	r0, #100	@ 0x64
 800740e:	f004 fa7c 	bl	800b90a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f004 f948 	bl	800b6a8 <USBH_LL_GetSpeed>
 8007418:	4603      	mov	r3, r0
 800741a:	461a      	mov	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2205      	movs	r2, #5
 8007426:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007428:	2100      	movs	r1, #0
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f001 fc8b 	bl	8008d46 <USBH_AllocPipe>
 8007430:	4603      	mov	r3, r0
 8007432:	461a      	mov	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007438:	2180      	movs	r1, #128	@ 0x80
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f001 fc83 	bl	8008d46 <USBH_AllocPipe>
 8007440:	4603      	mov	r3, r0
 8007442:	461a      	mov	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7919      	ldrb	r1, [r3, #4]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800745c:	9202      	str	r2, [sp, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	9201      	str	r2, [sp, #4]
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	4603      	mov	r3, r0
 8007466:	2280      	movs	r2, #128	@ 0x80
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 fc3d 	bl	8008ce8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	7959      	ldrb	r1, [r3, #5]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007482:	9202      	str	r2, [sp, #8]
 8007484:	2200      	movs	r2, #0
 8007486:	9201      	str	r2, [sp, #4]
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	4603      	mov	r3, r0
 800748c:	2200      	movs	r2, #0
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fc2a 	bl	8008ce8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80074a8:	2200      	movs	r2, #0
 80074aa:	4619      	mov	r1, r3
 80074ac:	f001 fd68 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80074b0:	e16a      	b.n	8007788 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f000 f96e 	bl	8007794 <USBH_HandleEnum>
 80074b8:	4603      	mov	r3, r0
 80074ba:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 815c 	bne.w	800777e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d103      	bne.n	80074e0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2208      	movs	r2, #8
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	e002      	b.n	80074e6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2207      	movs	r2, #7
 80074e4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2205      	movs	r2, #5
 80074ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80074fa:	2200      	movs	r2, #0
 80074fc:	4619      	mov	r1, r3
 80074fe:	f001 fd3f 	bl	8008f80 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007502:	e13c      	b.n	800777e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 8139 	beq.w	8007782 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007516:	2101      	movs	r1, #1
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2208      	movs	r2, #8
 8007520:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2205      	movs	r2, #5
 8007526:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007536:	2200      	movs	r2, #0
 8007538:	4619      	mov	r1, r3
 800753a:	f001 fd21 	bl	8008f80 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800753e:	e120      	b.n	8007782 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fd10 	bl	8007f6e <USBH_SetCfg>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d102      	bne.n	800755a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2209      	movs	r2, #9
 8007558:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800756e:	2200      	movs	r2, #0
 8007570:	4619      	mov	r1, r3
 8007572:	f001 fd05 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007576:	e107      	b.n	8007788 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d015      	beq.n	80075b2 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007586:	2101      	movs	r1, #1
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fd13 	bl	8007fb4 <USBH_SetFeature>
 800758e:	4603      	mov	r3, r0
 8007590:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d103      	bne.n	80075a2 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	220a      	movs	r2, #10
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e00a      	b.n	80075b8 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 80075a2:	7bbb      	ldrb	r3, [r7, #14]
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d106      	bne.n	80075b8 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	220a      	movs	r2, #10
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e002      	b.n	80075b8 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	220a      	movs	r2, #10
 80075b6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80075cc:	2200      	movs	r2, #0
 80075ce:	4619      	mov	r1, r3
 80075d0:	f001 fcd6 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80075d4:	e0d8      	b.n	8007788 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d03f      	beq.n	8007660 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2200      	movs	r2, #0
 80075e4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	e016      	b.n	800761c <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80075ee:	7bfa      	ldrb	r2, [r7, #15]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	32de      	adds	r2, #222	@ 0xde
 80075f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075f8:	791a      	ldrb	r2, [r3, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007600:	429a      	cmp	r2, r3
 8007602:	d108      	bne.n	8007616 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007604:	7bfa      	ldrb	r2, [r7, #15]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	32de      	adds	r2, #222	@ 0xde
 800760a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007614:	e005      	b.n	8007622 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	3301      	adds	r3, #1
 800761a:	73fb      	strb	r3, [r7, #15]
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0e5      	beq.n	80075ee <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007628:	2b00      	cmp	r3, #0
 800762a:	d016      	beq.n	800765a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	4798      	blx	r3
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d109      	bne.n	8007652 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2206      	movs	r2, #6
 8007642:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800764a:	2103      	movs	r1, #3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	4798      	blx	r3
 8007650:	e006      	b.n	8007660 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	220d      	movs	r2, #13
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e002      	b.n	8007660 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	220d      	movs	r2, #13
 800765e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2205      	movs	r2, #5
 8007664:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007674:	2200      	movs	r2, #0
 8007676:	4619      	mov	r1, r3
 8007678:	f001 fc82 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800767c:	e084      	b.n	8007788 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007684:	2b00      	cmp	r3, #0
 8007686:	d017      	beq.n	80076b8 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	4798      	blx	r3
 8007694:	4603      	mov	r3, r0
 8007696:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007698:	7bbb      	ldrb	r3, [r7, #14]
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b00      	cmp	r3, #0
 800769e:	d103      	bne.n	80076a8 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	220b      	movs	r2, #11
 80076a4:	701a      	strb	r2, [r3, #0]
 80076a6:	e00a      	b.n	80076be <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80076a8:	7bbb      	ldrb	r3, [r7, #14]
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b02      	cmp	r3, #2
 80076ae:	d106      	bne.n	80076be <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	220d      	movs	r2, #13
 80076b4:	701a      	strb	r2, [r3, #0]
 80076b6:	e002      	b.n	80076be <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	220d      	movs	r2, #13
 80076bc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2205      	movs	r2, #5
 80076c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80076d2:	2200      	movs	r2, #0
 80076d4:	4619      	mov	r1, r3
 80076d6:	f001 fc53 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076da:	e055      	b.n	8007788 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d04f      	beq.n	8007786 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	4798      	blx	r3
      }
      break;
 80076f2:	e048      	b.n	8007786 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fccf 	bl	80070a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d009      	beq.n	8007720 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007730:	2105      	movs	r1, #5
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b01      	cmp	r3, #1
 8007740:	d107      	bne.n	8007752 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff fda7 	bl	800729e <USBH_Start>
 8007750:	e002      	b.n	8007758 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f003 ff72 	bl	800b63c <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800776c:	2200      	movs	r2, #0
 800776e:	4619      	mov	r1, r3
 8007770:	f001 fc06 	bl	8008f80 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007774:	e008      	b.n	8007788 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8007776:	bf00      	nop
 8007778:	e006      	b.n	8007788 <USBH_Process+0x4c8>
      break;
 800777a:	bf00      	nop
 800777c:	e004      	b.n	8007788 <USBH_Process+0x4c8>
      break;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <USBH_Process+0x4c8>
    break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <USBH_Process+0x4c8>
      break;
 8007786:	bf00      	nop
  }
  return USBH_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af04      	add	r7, sp, #16
 800779a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800779c:	2301      	movs	r3, #1
 800779e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80077a0:	2301      	movs	r3, #1
 80077a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	785b      	ldrb	r3, [r3, #1]
 80077a8:	2b07      	cmp	r3, #7
 80077aa:	f200 8204 	bhi.w	8007bb6 <USBH_HandleEnum+0x422>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <USBH_HandleEnum+0x20>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	080077d5 	.word	0x080077d5
 80077b8:	0800788f 	.word	0x0800788f
 80077bc:	080078f9 	.word	0x080078f9
 80077c0:	08007983 	.word	0x08007983
 80077c4:	080079ed 	.word	0x080079ed
 80077c8:	08007a5d 	.word	0x08007a5d
 80077cc:	08007af9 	.word	0x08007af9
 80077d0:	08007b77 	.word	0x08007b77
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80077d4:	2108      	movs	r1, #8
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fae6 	bl	8007da8 <USBH_Get_DevDesc>
 80077dc:	4603      	mov	r3, r0
 80077de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077e0:	7bbb      	ldrb	r3, [r7, #14]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d12e      	bne.n	8007844 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	7919      	ldrb	r1, [r3, #4]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800780a:	9202      	str	r2, [sp, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	9201      	str	r2, [sp, #4]
 8007810:	9300      	str	r3, [sp, #0]
 8007812:	4603      	mov	r3, r0
 8007814:	2280      	movs	r2, #128	@ 0x80
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f001 fa66 	bl	8008ce8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7959      	ldrb	r1, [r3, #5]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800782c:	687a      	ldr	r2, [r7, #4]
 800782e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007830:	9202      	str	r2, [sp, #8]
 8007832:	2200      	movs	r2, #0
 8007834:	9201      	str	r2, [sp, #4]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	4603      	mov	r3, r0
 800783a:	2200      	movs	r2, #0
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f001 fa53 	bl	8008ce8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007842:	e1ba      	b.n	8007bba <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007844:	7bbb      	ldrb	r3, [r7, #14]
 8007846:	2b03      	cmp	r3, #3
 8007848:	f040 81b7 	bne.w	8007bba <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007852:	3301      	adds	r3, #1
 8007854:	b2da      	uxtb	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007862:	2b03      	cmp	r3, #3
 8007864:	d903      	bls.n	800786e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	220d      	movs	r2, #13
 800786a:	701a      	strb	r2, [r3, #0]
      break;
 800786c:	e1a5      	b.n	8007bba <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	795b      	ldrb	r3, [r3, #5]
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f001 fa87 	bl	8008d88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	791b      	ldrb	r3, [r3, #4]
 800787e:	4619      	mov	r1, r3
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f001 fa81 	bl	8008d88 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
      break;
 800788c:	e195      	b.n	8007bba <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800788e:	2112      	movs	r1, #18
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fa89 	bl	8007da8 <USBH_Get_DevDesc>
 8007896:	4603      	mov	r3, r0
 8007898:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800789a:	7bbb      	ldrb	r3, [r7, #14]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d103      	bne.n	80078a8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2202      	movs	r2, #2
 80078a4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80078a6:	e18a      	b.n	8007bbe <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078a8:	7bbb      	ldrb	r3, [r7, #14]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	f040 8187 	bne.w	8007bbe <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078b6:	3301      	adds	r3, #1
 80078b8:	b2da      	uxtb	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d903      	bls.n	80078d2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	220d      	movs	r2, #13
 80078ce:	701a      	strb	r2, [r3, #0]
      break;
 80078d0:	e175      	b.n	8007bbe <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	795b      	ldrb	r3, [r3, #5]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 fa55 	bl	8008d88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	791b      	ldrb	r3, [r3, #4]
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 fa4f 	bl	8008d88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	701a      	strb	r2, [r3, #0]
      break;
 80078f6:	e162      	b.n	8007bbe <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80078f8:	2101      	movs	r1, #1
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb13 	bl	8007f26 <USBH_SetAddress>
 8007900:	4603      	mov	r3, r0
 8007902:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d130      	bne.n	800796c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800790a:	2002      	movs	r0, #2
 800790c:	f003 fffd 	bl	800b90a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2201      	movs	r2, #1
 8007914:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2203      	movs	r2, #3
 800791c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	7919      	ldrb	r1, [r3, #4]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800792e:	687a      	ldr	r2, [r7, #4]
 8007930:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007932:	9202      	str	r2, [sp, #8]
 8007934:	2200      	movs	r2, #0
 8007936:	9201      	str	r2, [sp, #4]
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	4603      	mov	r3, r0
 800793c:	2280      	movs	r2, #128	@ 0x80
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f001 f9d2 	bl	8008ce8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	7959      	ldrb	r1, [r3, #5]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007958:	9202      	str	r2, [sp, #8]
 800795a:	2200      	movs	r2, #0
 800795c:	9201      	str	r2, [sp, #4]
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	4603      	mov	r3, r0
 8007962:	2200      	movs	r2, #0
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 f9bf 	bl	8008ce8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800796a:	e12a      	b.n	8007bc2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800796c:	7bbb      	ldrb	r3, [r7, #14]
 800796e:	2b03      	cmp	r3, #3
 8007970:	f040 8127 	bne.w	8007bc2 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	220d      	movs	r2, #13
 8007978:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	705a      	strb	r2, [r3, #1]
      break;
 8007980:	e11f      	b.n	8007bc2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007982:	2109      	movs	r1, #9
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 fa3b 	bl	8007e00 <USBH_Get_CfgDesc>
 800798a:	4603      	mov	r3, r0
 800798c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800798e:	7bbb      	ldrb	r3, [r7, #14]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d103      	bne.n	800799c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2204      	movs	r2, #4
 8007998:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800799a:	e114      	b.n	8007bc6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	2b03      	cmp	r3, #3
 80079a0:	f040 8111 	bne.w	8007bc6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079aa:	3301      	adds	r3, #1
 80079ac:	b2da      	uxtb	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d903      	bls.n	80079c6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	220d      	movs	r2, #13
 80079c2:	701a      	strb	r2, [r3, #0]
      break;
 80079c4:	e0ff      	b.n	8007bc6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	795b      	ldrb	r3, [r3, #5]
 80079ca:	4619      	mov	r1, r3
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 f9db 	bl	8008d88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	791b      	ldrb	r3, [r3, #4]
 80079d6:	4619      	mov	r1, r3
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f001 f9d5 	bl	8008d88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	701a      	strb	r2, [r3, #0]
      break;
 80079ea:	e0ec      	b.n	8007bc6 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fa03 	bl	8007e00 <USBH_Get_CfgDesc>
 80079fa:	4603      	mov	r3, r0
 80079fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079fe:	7bbb      	ldrb	r3, [r7, #14]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2205      	movs	r2, #5
 8007a08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a0a:	e0de      	b.n	8007bca <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	f040 80db 	bne.w	8007bca <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d903      	bls.n	8007a36 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	220d      	movs	r2, #13
 8007a32:	701a      	strb	r2, [r3, #0]
      break;
 8007a34:	e0c9      	b.n	8007bca <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	795b      	ldrb	r3, [r3, #5]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 f9a3 	bl	8008d88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	791b      	ldrb	r3, [r3, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f001 f99d 	bl	8008d88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
      break;
 8007a5a:	e0b6      	b.n	8007bca <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d036      	beq.n	8007ad4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007a72:	23ff      	movs	r3, #255	@ 0xff
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f9ed 	bl	8007e54 <USBH_Get_StringDesc>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007a7e:	7bbb      	ldrb	r3, [r7, #14]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d111      	bne.n	8007aa8 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2206      	movs	r2, #6
 8007a88:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2205      	movs	r2, #5
 8007a8e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	f001 fa6d 	bl	8008f80 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007aa6:	e092      	b.n	8007bce <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	f040 808f 	bne.w	8007bce <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2206      	movs	r2, #6
 8007ab4:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2205      	movs	r2, #5
 8007aba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007aca:	2200      	movs	r2, #0
 8007acc:	4619      	mov	r1, r3
 8007ace:	f001 fa57 	bl	8008f80 <osMessagePut>
      break;
 8007ad2:	e07c      	b.n	8007bce <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2206      	movs	r2, #6
 8007ad8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2205      	movs	r2, #5
 8007ade:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007aee:	2200      	movs	r2, #0
 8007af0:	4619      	mov	r1, r3
 8007af2:	f001 fa45 	bl	8008f80 <osMessagePut>
      break;
 8007af6:	e06a      	b.n	8007bce <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d027      	beq.n	8007b52 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007b0e:	23ff      	movs	r3, #255	@ 0xff
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 f99f 	bl	8007e54 <USBH_Get_StringDesc>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d103      	bne.n	8007b28 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2207      	movs	r2, #7
 8007b24:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007b26:	e054      	b.n	8007bd2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	2b03      	cmp	r3, #3
 8007b2c:	d151      	bne.n	8007bd2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2207      	movs	r2, #7
 8007b32:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2205      	movs	r2, #5
 8007b38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	f001 fa18 	bl	8008f80 <osMessagePut>
      break;
 8007b50:	e03f      	b.n	8007bd2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2207      	movs	r2, #7
 8007b56:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2205      	movs	r2, #5
 8007b5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4619      	mov	r1, r3
 8007b70:	f001 fa06 	bl	8008f80 <osMessagePut>
      break;
 8007b74:	e02d      	b.n	8007bd2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d017      	beq.n	8007bb0 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007b8c:	23ff      	movs	r3, #255	@ 0xff
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f960 	bl	8007e54 <USBH_Get_StringDesc>
 8007b94:	4603      	mov	r3, r0
 8007b96:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d102      	bne.n	8007ba4 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007ba2:	e018      	b.n	8007bd6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d115      	bne.n	8007bd6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 8007baa:	2300      	movs	r3, #0
 8007bac:	73fb      	strb	r3, [r7, #15]
      break;
 8007bae:	e012      	b.n	8007bd6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8007bb4:	e00f      	b.n	8007bd6 <USBH_HandleEnum+0x442>

    default:
      break;
 8007bb6:	bf00      	nop
 8007bb8:	e00e      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bba:	bf00      	nop
 8007bbc:	e00c      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bbe:	bf00      	nop
 8007bc0:	e00a      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bc2:	bf00      	nop
 8007bc4:	e008      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bc6:	bf00      	nop
 8007bc8:	e006      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bca:	bf00      	nop
 8007bcc:	e004      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bce:	bf00      	nop
 8007bd0:	e002      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bd2:	bf00      	nop
 8007bd4:	e000      	b.n	8007bd8 <USBH_HandleEnum+0x444>
      break;
 8007bd6:	bf00      	nop
  }
  return Status;
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop

08007be4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	683a      	ldr	r2, [r7, #0]
 8007bf2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f804 	bl	8007c26 <USBH_HandleSof>
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b082      	sub	sp, #8
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b0b      	cmp	r3, #11
 8007c36:	d10a      	bne.n	8007c4e <USBH_HandleSof+0x28>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d005      	beq.n	8007c4e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	4798      	blx	r3
  }
}
 8007c4e:	bf00      	nop
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b082      	sub	sp, #8
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	f001 f97f 	bl	8008f80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007c82:	bf00      	nop
}
 8007c84:	3708      	adds	r7, #8
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007c8a:	b480      	push	{r7}
 8007c8c:	b083      	sub	sp, #12
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007c9a:	bf00      	nop
}
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007cda:	2200      	movs	r2, #0
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f001 f94f 	bl	8008f80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f003 fcb0 	bl	800b672 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	791b      	ldrb	r3, [r3, #4]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f835 	bl	8008d88 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	795b      	ldrb	r3, [r3, #5]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 f82f 	bl	8008d88 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007d3e:	2200      	movs	r2, #0
 8007d40:	4619      	mov	r1, r3
 8007d42:	f001 f91d 	bl	8008f80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8007d5e:	f107 030c 	add.w	r3, r7, #12
 8007d62:	f04f 32ff 	mov.w	r2, #4294967295
 8007d66:	4618      	mov	r0, r3
 8007d68:	f001 f94a 	bl	8009000 <osMessageGet>
    if (event.status == osEventMessage)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d1f2      	bne.n	8007d58 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff faa4 	bl	80072c0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8007d78:	e7ee      	b.n	8007d58 <USBH_Process_OS+0x8>

08007d7a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b082      	sub	sp, #8
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2201      	movs	r2, #1
 8007d86:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8007d96:	2200      	movs	r2, #0
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f001 f8f1 	bl	8008f80 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8007d9e:	2300      	movs	r3, #0
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3708      	adds	r7, #8
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b086      	sub	sp, #24
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007db4:	887b      	ldrh	r3, [r7, #2]
 8007db6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dba:	d901      	bls.n	8007dc0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e01b      	b.n	8007df8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007dc6:	887b      	ldrh	r3, [r7, #2]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4613      	mov	r3, r2
 8007dcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007dd0:	2100      	movs	r1, #0
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f872 	bl	8007ebc <USBH_GetDescriptor>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d109      	bne.n	8007df6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007de8:	887a      	ldrh	r2, [r7, #2]
 8007dea:	4619      	mov	r1, r3
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f929 	bl	8008044 <USBH_ParseDevDesc>
 8007df2:	4603      	mov	r3, r0
 8007df4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af02      	add	r7, sp, #8
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	331c      	adds	r3, #28
 8007e10:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007e12:	887b      	ldrh	r3, [r7, #2]
 8007e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e18:	d901      	bls.n	8007e1e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	e016      	b.n	8007e4c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007e1e:	887b      	ldrh	r3, [r7, #2]
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e28:	2100      	movs	r1, #0
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 f846 	bl	8007ebc <USBH_GetDescriptor>
 8007e30:	4603      	mov	r3, r0
 8007e32:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007e34:	7bfb      	ldrb	r3, [r7, #15]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d107      	bne.n	8007e4a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007e3a:	887b      	ldrh	r3, [r7, #2]
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 f9af 	bl	80081a4 <USBH_ParseCfgDesc>
 8007e46:	4603      	mov	r3, r0
 8007e48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b088      	sub	sp, #32
 8007e58:	af02      	add	r7, sp, #8
 8007e5a:	60f8      	str	r0, [r7, #12]
 8007e5c:	607a      	str	r2, [r7, #4]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	460b      	mov	r3, r1
 8007e62:	72fb      	strb	r3, [r7, #11]
 8007e64:	4613      	mov	r3, r2
 8007e66:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007e68:	893b      	ldrh	r3, [r7, #8]
 8007e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e6e:	d802      	bhi.n	8007e76 <USBH_Get_StringDesc+0x22>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e01c      	b.n	8007eb4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007e7a:	7afb      	ldrb	r3, [r7, #11]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007e82:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e8a:	893b      	ldrh	r3, [r7, #8]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	2100      	movs	r1, #0
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f000 f812 	bl	8007ebc <USBH_GetDescriptor>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007e9c:	7dfb      	ldrb	r3, [r7, #23]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d107      	bne.n	8007eb2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ea8:	893a      	ldrh	r2, [r7, #8]
 8007eaa:	6879      	ldr	r1, [r7, #4]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 fb8d 	bl	80085cc <USBH_ParseStringDesc>
  }

  return status;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607b      	str	r3, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	72fb      	strb	r3, [r7, #11]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	789b      	ldrb	r3, [r3, #2]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d11c      	bne.n	8007f10 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007ed6:	7afb      	ldrb	r3, [r7, #11]
 8007ed8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2206      	movs	r2, #6
 8007ee6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	893a      	ldrh	r2, [r7, #8]
 8007eec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007eee:	893b      	ldrh	r3, [r7, #8]
 8007ef0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007ef4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007ef8:	d104      	bne.n	8007f04 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f240 4209 	movw	r2, #1033	@ 0x409
 8007f00:	829a      	strh	r2, [r3, #20]
 8007f02:	e002      	b.n	8007f0a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2200      	movs	r2, #0
 8007f08:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8b3a      	ldrh	r2, [r7, #24]
 8007f0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007f10:	8b3b      	ldrh	r3, [r7, #24]
 8007f12:	461a      	mov	r2, r3
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 fba5 	bl	8008666 <USBH_CtlReq>
 8007f1c:	4603      	mov	r3, r0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	789b      	ldrb	r3, [r3, #2]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d10f      	bne.n	8007f5a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2205      	movs	r2, #5
 8007f44:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007f46:	78fb      	ldrb	r3, [r7, #3]
 8007f48:	b29a      	uxth	r2, r3
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	6878      	ldr	r0, [r7, #4]
 8007f60:	f000 fb81 	bl	8008666 <USBH_CtlReq>
 8007f64:	4603      	mov	r3, r0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b082      	sub	sp, #8
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	789b      	ldrb	r3, [r3, #2]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d10e      	bne.n	8007fa0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2209      	movs	r2, #9
 8007f8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	887a      	ldrh	r2, [r7, #2]
 8007f92:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f000 fb5e 	bl	8008666 <USBH_CtlReq>
 8007faa:	4603      	mov	r3, r0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3708      	adds	r7, #8
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	789b      	ldrb	r3, [r3, #2]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d10f      	bne.n	8007fe8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2203      	movs	r2, #3
 8007fd2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007fd4:	78fb      	ldrb	r3, [r7, #3]
 8007fd6:	b29a      	uxth	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	2100      	movs	r1, #0
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f000 fb3a 	bl	8008666 <USBH_CtlReq>
 8007ff2:	4603      	mov	r3, r0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3708      	adds	r7, #8
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	789b      	ldrb	r3, [r3, #2]
 800800c:	2b01      	cmp	r3, #1
 800800e:	d10f      	bne.n	8008030 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2201      	movs	r2, #1
 800801a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008022:	78fb      	ldrb	r3, [r7, #3]
 8008024:	b29a      	uxth	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008030:	2200      	movs	r2, #0
 8008032:	2100      	movs	r1, #0
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fb16 	bl	8008666 <USBH_CtlReq>
 800803a:	4603      	mov	r3, r0
}
 800803c:	4618      	mov	r0, r3
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	4613      	mov	r3, r2
 8008050:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008058:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008064:	2302      	movs	r3, #2
 8008066:	e094      	b.n	8008192 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	781a      	ldrb	r2, [r3, #0]
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	785a      	ldrb	r2, [r3, #1]
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	3302      	adds	r3, #2
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	3303      	adds	r3, #3
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	021b      	lsls	r3, r3, #8
 8008088:	b29b      	uxth	r3, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	b29a      	uxth	r2, r3
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	791a      	ldrb	r2, [r3, #4]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	795a      	ldrb	r2, [r3, #5]
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	799a      	ldrb	r2, [r3, #6]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	79da      	ldrb	r2, [r3, #7]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80080c2:	2b01      	cmp	r3, #1
 80080c4:	d11b      	bne.n	80080fe <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	79db      	ldrb	r3, [r3, #7]
 80080ca:	2b20      	cmp	r3, #32
 80080cc:	dc0f      	bgt.n	80080ee <USBH_ParseDevDesc+0xaa>
 80080ce:	2b08      	cmp	r3, #8
 80080d0:	db0f      	blt.n	80080f2 <USBH_ParseDevDesc+0xae>
 80080d2:	3b08      	subs	r3, #8
 80080d4:	4a32      	ldr	r2, [pc, #200]	@ (80081a0 <USBH_ParseDevDesc+0x15c>)
 80080d6:	fa22 f303 	lsr.w	r3, r2, r3
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	2b00      	cmp	r3, #0
 80080e0:	bf14      	ite	ne
 80080e2:	2301      	movne	r3, #1
 80080e4:	2300      	moveq	r3, #0
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <USBH_ParseDevDesc+0xb6>
 80080ec:	e001      	b.n	80080f2 <USBH_ParseDevDesc+0xae>
 80080ee:	2b40      	cmp	r3, #64	@ 0x40
 80080f0:	d003      	beq.n	80080fa <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2208      	movs	r2, #8
 80080f6:	71da      	strb	r2, [r3, #7]
        break;
 80080f8:	e000      	b.n	80080fc <USBH_ParseDevDesc+0xb8>
        break;
 80080fa:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80080fc:	e00e      	b.n	800811c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008104:	2b02      	cmp	r3, #2
 8008106:	d107      	bne.n	8008118 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	79db      	ldrb	r3, [r3, #7]
 800810c:	2b08      	cmp	r3, #8
 800810e:	d005      	beq.n	800811c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	2208      	movs	r2, #8
 8008114:	71da      	strb	r2, [r3, #7]
 8008116:	e001      	b.n	800811c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008118:	2303      	movs	r3, #3
 800811a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	2b08      	cmp	r3, #8
 8008120:	d936      	bls.n	8008190 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	3308      	adds	r3, #8
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	3309      	adds	r3, #9
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	021b      	lsls	r3, r3, #8
 8008132:	b29b      	uxth	r3, r3
 8008134:	4313      	orrs	r3, r2
 8008136:	b29a      	uxth	r2, r3
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	330a      	adds	r3, #10
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	461a      	mov	r2, r3
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	330b      	adds	r3, #11
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	021b      	lsls	r3, r3, #8
 800814c:	b29b      	uxth	r3, r3
 800814e:	4313      	orrs	r3, r2
 8008150:	b29a      	uxth	r2, r3
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	330c      	adds	r3, #12
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	330d      	adds	r3, #13
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	b29b      	uxth	r3, r3
 8008168:	4313      	orrs	r3, r2
 800816a:	b29a      	uxth	r2, r3
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	7b9a      	ldrb	r2, [r3, #14]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	7bda      	ldrb	r2, [r3, #15]
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	7c1a      	ldrb	r2, [r3, #16]
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	7c5a      	ldrb	r2, [r3, #17]
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
}
 8008192:	4618      	mov	r0, r3
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	01000101 	.word	0x01000101

080081a4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08c      	sub	sp, #48	@ 0x30
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	4613      	mov	r3, r2
 80081b0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80081b8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80081d2:	2302      	movs	r3, #2
 80081d4:	e0da      	b.n	800838c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80081da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	2b09      	cmp	r3, #9
 80081e0:	d002      	beq.n	80081e8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80081e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e4:	2209      	movs	r2, #9
 80081e6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	781a      	ldrb	r2, [r3, #0]
 80081ec:	6a3b      	ldr	r3, [r7, #32]
 80081ee:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	785a      	ldrb	r2, [r3, #1]
 80081f4:	6a3b      	ldr	r3, [r7, #32]
 80081f6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	3302      	adds	r3, #2
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	3303      	adds	r3, #3
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	b29b      	uxth	r3, r3
 800820a:	4313      	orrs	r3, r2
 800820c:	b29b      	uxth	r3, r3
 800820e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008212:	bf28      	it	cs
 8008214:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008218:	b29a      	uxth	r2, r3
 800821a:	6a3b      	ldr	r3, [r7, #32]
 800821c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	791a      	ldrb	r2, [r3, #4]
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	795a      	ldrb	r2, [r3, #5]
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	799a      	ldrb	r2, [r3, #6]
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	79da      	ldrb	r2, [r3, #7]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	7a1a      	ldrb	r2, [r3, #8]
 8008242:	6a3b      	ldr	r3, [r7, #32]
 8008244:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008246:	88fb      	ldrh	r3, [r7, #6]
 8008248:	2b09      	cmp	r3, #9
 800824a:	f240 809d 	bls.w	8008388 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800824e:	2309      	movs	r3, #9
 8008250:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008256:	e081      	b.n	800835c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008258:	f107 0316 	add.w	r3, r7, #22
 800825c:	4619      	mov	r1, r3
 800825e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008260:	f000 f9e7 	bl	8008632 <USBH_GetNextDesc>
 8008264:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	785b      	ldrb	r3, [r3, #1]
 800826a:	2b04      	cmp	r3, #4
 800826c:	d176      	bne.n	800835c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	2b09      	cmp	r3, #9
 8008274:	d002      	beq.n	800827c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008278:	2209      	movs	r2, #9
 800827a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800827c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008280:	221a      	movs	r2, #26
 8008282:	fb02 f303 	mul.w	r3, r2, r3
 8008286:	3308      	adds	r3, #8
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	4413      	add	r3, r2
 800828c:	3302      	adds	r3, #2
 800828e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008290:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008292:	69f8      	ldr	r0, [r7, #28]
 8008294:	f000 f87e 	bl	8008394 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800829e:	2300      	movs	r3, #0
 80082a0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082a2:	e043      	b.n	800832c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80082a4:	f107 0316 	add.w	r3, r7, #22
 80082a8:	4619      	mov	r1, r3
 80082aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082ac:	f000 f9c1 	bl	8008632 <USBH_GetNextDesc>
 80082b0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	785b      	ldrb	r3, [r3, #1]
 80082b6:	2b05      	cmp	r3, #5
 80082b8:	d138      	bne.n	800832c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	795b      	ldrb	r3, [r3, #5]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d113      	bne.n	80082ea <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d003      	beq.n	80082d2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	799b      	ldrb	r3, [r3, #6]
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d10b      	bne.n	80082ea <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082d2:	69fb      	ldr	r3, [r7, #28]
 80082d4:	79db      	ldrb	r3, [r3, #7]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <USBH_ParseCfgDesc+0x14e>
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	2b09      	cmp	r3, #9
 80082e0:	d007      	beq.n	80082f2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80082e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e4:	2209      	movs	r2, #9
 80082e6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082e8:	e003      	b.n	80082f2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	2207      	movs	r2, #7
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	e000      	b.n	80082f4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80082f2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80082fc:	3201      	adds	r2, #1
 80082fe:	00d2      	lsls	r2, r2, #3
 8008300:	211a      	movs	r1, #26
 8008302:	fb01 f303 	mul.w	r3, r1, r3
 8008306:	4413      	add	r3, r2
 8008308:	3308      	adds	r3, #8
 800830a:	6a3a      	ldr	r2, [r7, #32]
 800830c:	4413      	add	r3, r2
 800830e:	3304      	adds	r3, #4
 8008310:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008312:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008314:	69b9      	ldr	r1, [r7, #24]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f870 	bl	80083fc <USBH_ParseEPDesc>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008322:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008326:	3301      	adds	r3, #1
 8008328:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800832c:	69fb      	ldr	r3, [r7, #28]
 800832e:	791b      	ldrb	r3, [r3, #4]
 8008330:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008334:	429a      	cmp	r2, r3
 8008336:	d204      	bcs.n	8008342 <USBH_ParseCfgDesc+0x19e>
 8008338:	6a3b      	ldr	r3, [r7, #32]
 800833a:	885a      	ldrh	r2, [r3, #2]
 800833c:	8afb      	ldrh	r3, [r7, #22]
 800833e:	429a      	cmp	r2, r3
 8008340:	d8b0      	bhi.n	80082a4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	791b      	ldrb	r3, [r3, #4]
 8008346:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800834a:	429a      	cmp	r2, r3
 800834c:	d201      	bcs.n	8008352 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800834e:	2303      	movs	r3, #3
 8008350:	e01c      	b.n	800838c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008356:	3301      	adds	r3, #1
 8008358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800835c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008360:	2b01      	cmp	r3, #1
 8008362:	d805      	bhi.n	8008370 <USBH_ParseCfgDesc+0x1cc>
 8008364:	6a3b      	ldr	r3, [r7, #32]
 8008366:	885a      	ldrh	r2, [r3, #2]
 8008368:	8afb      	ldrh	r3, [r7, #22]
 800836a:	429a      	cmp	r2, r3
 800836c:	f63f af74 	bhi.w	8008258 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008370:	6a3b      	ldr	r3, [r7, #32]
 8008372:	791b      	ldrb	r3, [r3, #4]
 8008374:	2b02      	cmp	r3, #2
 8008376:	bf28      	it	cs
 8008378:	2302      	movcs	r3, #2
 800837a:	b2db      	uxtb	r3, r3
 800837c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008380:	429a      	cmp	r2, r3
 8008382:	d201      	bcs.n	8008388 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008384:	2303      	movs	r3, #3
 8008386:	e001      	b.n	800838c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800838c:	4618      	mov	r0, r3
 800838e:	3730      	adds	r7, #48	@ 0x30
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008394:	b480      	push	{r7}
 8008396:	b083      	sub	sp, #12
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785a      	ldrb	r2, [r3, #1]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	789a      	ldrb	r2, [r3, #2]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	78da      	ldrb	r2, [r3, #3]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	3304      	adds	r3, #4
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	bf28      	it	cs
 80083c8:	2302      	movcs	r3, #2
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	795a      	ldrb	r2, [r3, #5]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	799a      	ldrb	r2, [r3, #6]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	79da      	ldrb	r2, [r3, #7]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	7a1a      	ldrb	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	721a      	strb	r2, [r3, #8]
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	781a      	ldrb	r2, [r3, #0]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	785a      	ldrb	r2, [r3, #1]
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	789a      	ldrb	r2, [r3, #2]
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	78da      	ldrb	r2, [r3, #3]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	3304      	adds	r3, #4
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	3305      	adds	r3, #5
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	b29b      	uxth	r3, r3
 800843e:	4313      	orrs	r3, r2
 8008440:	b29a      	uxth	r2, r3
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	799a      	ldrb	r2, [r3, #6]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	889b      	ldrh	r3, [r3, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d009      	beq.n	800846a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800845a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800845e:	d804      	bhi.n	800846a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008468:	d901      	bls.n	800846e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800846a:	2303      	movs	r3, #3
 800846c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008474:	2b00      	cmp	r3, #0
 8008476:	d136      	bne.n	80084e6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	78db      	ldrb	r3, [r3, #3]
 800847c:	f003 0303 	and.w	r3, r3, #3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d108      	bne.n	8008496 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	889b      	ldrh	r3, [r3, #4]
 8008488:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800848c:	f240 8097 	bls.w	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008490:	2303      	movs	r3, #3
 8008492:	75fb      	strb	r3, [r7, #23]
 8008494:	e093      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	78db      	ldrb	r3, [r3, #3]
 800849a:	f003 0303 	and.w	r3, r3, #3
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d107      	bne.n	80084b2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	889b      	ldrh	r3, [r3, #4]
 80084a6:	2b40      	cmp	r3, #64	@ 0x40
 80084a8:	f240 8089 	bls.w	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80084ac:	2303      	movs	r3, #3
 80084ae:	75fb      	strb	r3, [r7, #23]
 80084b0:	e085      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	78db      	ldrb	r3, [r3, #3]
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d005      	beq.n	80084ca <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	78db      	ldrb	r3, [r3, #3]
 80084c2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80084c6:	2b03      	cmp	r3, #3
 80084c8:	d10a      	bne.n	80084e0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	799b      	ldrb	r3, [r3, #6]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <USBH_ParseEPDesc+0xde>
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	799b      	ldrb	r3, [r3, #6]
 80084d6:	2b10      	cmp	r3, #16
 80084d8:	d970      	bls.n	80085bc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80084da:	2303      	movs	r3, #3
 80084dc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80084de:	e06d      	b.n	80085bc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80084e0:	2303      	movs	r3, #3
 80084e2:	75fb      	strb	r3, [r7, #23]
 80084e4:	e06b      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d13c      	bne.n	800856a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	78db      	ldrb	r3, [r3, #3]
 80084f4:	f003 0303 	and.w	r3, r3, #3
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d005      	beq.n	8008508 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	78db      	ldrb	r3, [r3, #3]
 8008500:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008504:	2b00      	cmp	r3, #0
 8008506:	d106      	bne.n	8008516 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	889b      	ldrh	r3, [r3, #4]
 800850c:	2b40      	cmp	r3, #64	@ 0x40
 800850e:	d956      	bls.n	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008510:	2303      	movs	r3, #3
 8008512:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008514:	e053      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	78db      	ldrb	r3, [r3, #3]
 800851a:	f003 0303 	and.w	r3, r3, #3
 800851e:	2b01      	cmp	r3, #1
 8008520:	d10e      	bne.n	8008540 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	799b      	ldrb	r3, [r3, #6]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d007      	beq.n	800853a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800852e:	2b10      	cmp	r3, #16
 8008530:	d803      	bhi.n	800853a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008536:	2b40      	cmp	r3, #64	@ 0x40
 8008538:	d941      	bls.n	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800853a:	2303      	movs	r3, #3
 800853c:	75fb      	strb	r3, [r7, #23]
 800853e:	e03e      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	78db      	ldrb	r3, [r3, #3]
 8008544:	f003 0303 	and.w	r3, r3, #3
 8008548:	2b03      	cmp	r3, #3
 800854a:	d10b      	bne.n	8008564 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	799b      	ldrb	r3, [r3, #6]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d004      	beq.n	800855e <USBH_ParseEPDesc+0x162>
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	889b      	ldrh	r3, [r3, #4]
 8008558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800855c:	d32f      	bcc.n	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800855e:	2303      	movs	r3, #3
 8008560:	75fb      	strb	r3, [r7, #23]
 8008562:	e02c      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008564:	2303      	movs	r3, #3
 8008566:	75fb      	strb	r3, [r7, #23]
 8008568:	e029      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008570:	2b02      	cmp	r3, #2
 8008572:	d120      	bne.n	80085b6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	78db      	ldrb	r3, [r3, #3]
 8008578:	f003 0303 	and.w	r3, r3, #3
 800857c:	2b00      	cmp	r3, #0
 800857e:	d106      	bne.n	800858e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	889b      	ldrh	r3, [r3, #4]
 8008584:	2b08      	cmp	r3, #8
 8008586:	d01a      	beq.n	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008588:	2303      	movs	r3, #3
 800858a:	75fb      	strb	r3, [r7, #23]
 800858c:	e017      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	78db      	ldrb	r3, [r3, #3]
 8008592:	f003 0303 	and.w	r3, r3, #3
 8008596:	2b03      	cmp	r3, #3
 8008598:	d10a      	bne.n	80085b0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	799b      	ldrb	r3, [r3, #6]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <USBH_ParseEPDesc+0x1ae>
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	889b      	ldrh	r3, [r3, #4]
 80085a6:	2b08      	cmp	r3, #8
 80085a8:	d909      	bls.n	80085be <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085aa:	2303      	movs	r3, #3
 80085ac:	75fb      	strb	r3, [r7, #23]
 80085ae:	e006      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80085b0:	2303      	movs	r3, #3
 80085b2:	75fb      	strb	r3, [r7, #23]
 80085b4:	e003      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80085b6:	2303      	movs	r3, #3
 80085b8:	75fb      	strb	r3, [r7, #23]
 80085ba:	e000      	b.n	80085be <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80085bc:	bf00      	nop
  }

  return status;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	371c      	adds	r7, #28
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b087      	sub	sp, #28
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	4613      	mov	r3, r2
 80085d8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	3301      	adds	r3, #1
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d120      	bne.n	8008626 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	1e9a      	subs	r2, r3, #2
 80085ea:	88fb      	ldrh	r3, [r7, #6]
 80085ec:	4293      	cmp	r3, r2
 80085ee:	bf28      	it	cs
 80085f0:	4613      	movcs	r3, r2
 80085f2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	3302      	adds	r3, #2
 80085f8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80085fa:	2300      	movs	r3, #0
 80085fc:	82fb      	strh	r3, [r7, #22]
 80085fe:	e00b      	b.n	8008618 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008600:	8afb      	ldrh	r3, [r7, #22]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	781a      	ldrb	r2, [r3, #0]
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	3301      	adds	r3, #1
 8008610:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008612:	8afb      	ldrh	r3, [r7, #22]
 8008614:	3302      	adds	r3, #2
 8008616:	82fb      	strh	r3, [r7, #22]
 8008618:	8afa      	ldrh	r2, [r7, #22]
 800861a:	8abb      	ldrh	r3, [r7, #20]
 800861c:	429a      	cmp	r2, r3
 800861e:	d3ef      	bcc.n	8008600 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
  }
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	881b      	ldrh	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	7812      	ldrb	r2, [r2, #0]
 8008644:	4413      	add	r3, r2
 8008646:	b29a      	uxth	r2, r3
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4413      	add	r3, r2
 8008656:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008658:	68fb      	ldr	r3, [r7, #12]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008666:	b580      	push	{r7, lr}
 8008668:	b086      	sub	sp, #24
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	4613      	mov	r3, r2
 8008672:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008674:	2301      	movs	r3, #1
 8008676:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	789b      	ldrb	r3, [r3, #2]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d002      	beq.n	8008686 <USBH_CtlReq+0x20>
 8008680:	2b02      	cmp	r3, #2
 8008682:	d01d      	beq.n	80086c0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8008684:	e043      	b.n	800870e <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	68ba      	ldr	r2, [r7, #8]
 800868a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	88fa      	ldrh	r2, [r7, #6]
 8008690:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2201      	movs	r2, #1
 8008696:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2202      	movs	r2, #2
 800869c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800869e:	2301      	movs	r3, #1
 80086a0:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2203      	movs	r2, #3
 80086a6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80086b6:	2200      	movs	r2, #0
 80086b8:	4619      	mov	r1, r3
 80086ba:	f000 fc61 	bl	8008f80 <osMessagePut>
      break;
 80086be:	e026      	b.n	800870e <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 f829 	bl	8008718 <USBH_HandleControl>
 80086c6:	4603      	mov	r3, r0
 80086c8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80086ca:	7dfb      	ldrb	r3, [r7, #23]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <USBH_CtlReq+0x70>
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d106      	bne.n	80086e4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2201      	movs	r2, #1
 80086da:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	761a      	strb	r2, [r3, #24]
 80086e2:	e005      	b.n	80086f0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80086e4:	7dfb      	ldrb	r3, [r7, #23]
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d102      	bne.n	80086f0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2201      	movs	r2, #1
 80086ee:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2203      	movs	r2, #3
 80086f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008704:	2200      	movs	r2, #0
 8008706:	4619      	mov	r1, r3
 8008708:	f000 fc3a 	bl	8008f80 <osMessagePut>
      break;
 800870c:	bf00      	nop
  }
  return status;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3718      	adds	r7, #24
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af02      	add	r7, sp, #8
 800871e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008720:	2301      	movs	r3, #1
 8008722:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008724:	2300      	movs	r3, #0
 8008726:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	7e1b      	ldrb	r3, [r3, #24]
 800872c:	3b01      	subs	r3, #1
 800872e:	2b0a      	cmp	r3, #10
 8008730:	f200 8229 	bhi.w	8008b86 <USBH_HandleControl+0x46e>
 8008734:	a201      	add	r2, pc, #4	@ (adr r2, 800873c <USBH_HandleControl+0x24>)
 8008736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873a:	bf00      	nop
 800873c:	08008769 	.word	0x08008769
 8008740:	08008783 	.word	0x08008783
 8008744:	08008825 	.word	0x08008825
 8008748:	0800884b 	.word	0x0800884b
 800874c:	080088d7 	.word	0x080088d7
 8008750:	08008901 	.word	0x08008901
 8008754:	080089c3 	.word	0x080089c3
 8008758:	080089e5 	.word	0x080089e5
 800875c:	08008a77 	.word	0x08008a77
 8008760:	08008a9d 	.word	0x08008a9d
 8008764:	08008b2f 	.word	0x08008b2f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f103 0110 	add.w	r1, r3, #16
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	795b      	ldrb	r3, [r3, #5]
 8008772:	461a      	mov	r2, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fa17 	bl	8008ba8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2202      	movs	r2, #2
 800877e:	761a      	strb	r2, [r3, #24]
      break;
 8008780:	e20c      	b.n	8008b9c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	795b      	ldrb	r3, [r3, #5]
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f003 f861 	bl	800b850 <USBH_LL_GetURBState>
 800878e:	4603      	mov	r3, r0
 8008790:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008792:	7bbb      	ldrb	r3, [r7, #14]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d12c      	bne.n	80087f2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	7c1b      	ldrb	r3, [r3, #16]
 800879c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80087a0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8adb      	ldrh	r3, [r3, #22]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d00a      	beq.n	80087c0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80087aa:	7b7b      	ldrb	r3, [r7, #13]
 80087ac:	2b80      	cmp	r3, #128	@ 0x80
 80087ae:	d103      	bne.n	80087b8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2203      	movs	r2, #3
 80087b4:	761a      	strb	r2, [r3, #24]
 80087b6:	e00d      	b.n	80087d4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2205      	movs	r2, #5
 80087bc:	761a      	strb	r2, [r3, #24]
 80087be:	e009      	b.n	80087d4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80087c0:	7b7b      	ldrb	r3, [r7, #13]
 80087c2:	2b80      	cmp	r3, #128	@ 0x80
 80087c4:	d103      	bne.n	80087ce <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2209      	movs	r2, #9
 80087ca:	761a      	strb	r2, [r3, #24]
 80087cc:	e002      	b.n	80087d4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2207      	movs	r2, #7
 80087d2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2203      	movs	r2, #3
 80087d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80087e8:	2200      	movs	r2, #0
 80087ea:	4619      	mov	r1, r3
 80087ec:	f000 fbc8 	bl	8008f80 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80087f0:	e1cb      	b.n	8008b8a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d003      	beq.n	8008800 <USBH_HandleControl+0xe8>
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	2b02      	cmp	r3, #2
 80087fc:	f040 81c5 	bne.w	8008b8a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	220b      	movs	r2, #11
 8008804:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2203      	movs	r2, #3
 800880a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800881a:	2200      	movs	r2, #0
 800881c:	4619      	mov	r1, r3
 800881e:	f000 fbaf 	bl	8008f80 <osMessagePut>
      break;
 8008822:	e1b2      	b.n	8008b8a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800882a:	b29a      	uxth	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6899      	ldr	r1, [r3, #8]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	899a      	ldrh	r2, [r3, #12]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	791b      	ldrb	r3, [r3, #4]
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f000 f9f2 	bl	8008c26 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2204      	movs	r2, #4
 8008846:	761a      	strb	r2, [r3, #24]
      break;
 8008848:	e1a8      	b.n	8008b9c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	791b      	ldrb	r3, [r3, #4]
 800884e:	4619      	mov	r1, r3
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f002 fffd 	bl	800b850 <USBH_LL_GetURBState>
 8008856:	4603      	mov	r3, r0
 8008858:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800885a:	7bbb      	ldrb	r3, [r7, #14]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d110      	bne.n	8008882 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2209      	movs	r2, #9
 8008864:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2203      	movs	r2, #3
 800886a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800887a:	2200      	movs	r2, #0
 800887c:	4619      	mov	r1, r3
 800887e:	f000 fb7f 	bl	8008f80 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008882:	7bbb      	ldrb	r3, [r7, #14]
 8008884:	2b05      	cmp	r3, #5
 8008886:	d110      	bne.n	80088aa <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008888:	2303      	movs	r3, #3
 800888a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2203      	movs	r2, #3
 8008890:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80088a0:	2200      	movs	r2, #0
 80088a2:	4619      	mov	r1, r3
 80088a4:	f000 fb6c 	bl	8008f80 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088a8:	e171      	b.n	8008b8e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	f040 816e 	bne.w	8008b8e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	220b      	movs	r2, #11
 80088b6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2203      	movs	r2, #3
 80088bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80088cc:	2200      	movs	r2, #0
 80088ce:	4619      	mov	r1, r3
 80088d0:	f000 fb56 	bl	8008f80 <osMessagePut>
      break;
 80088d4:	e15b      	b.n	8008b8e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6899      	ldr	r1, [r3, #8]
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	899a      	ldrh	r2, [r3, #12]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	795b      	ldrb	r3, [r3, #5]
 80088e2:	2001      	movs	r0, #1
 80088e4:	9000      	str	r0, [sp, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f978 	bl	8008bdc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088f2:	b29a      	uxth	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2206      	movs	r2, #6
 80088fc:	761a      	strb	r2, [r3, #24]
      break;
 80088fe:	e14d      	b.n	8008b9c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	795b      	ldrb	r3, [r3, #5]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f002 ffa2 	bl	800b850 <USBH_LL_GetURBState>
 800890c:	4603      	mov	r3, r0
 800890e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008910:	7bbb      	ldrb	r3, [r7, #14]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d111      	bne.n	800893a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2207      	movs	r2, #7
 800891a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2203      	movs	r2, #3
 8008920:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008930:	2200      	movs	r2, #0
 8008932:	4619      	mov	r1, r3
 8008934:	f000 fb24 	bl	8008f80 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008938:	e12b      	b.n	8008b92 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b05      	cmp	r3, #5
 800893e:	d113      	bne.n	8008968 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	220c      	movs	r2, #12
 8008944:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008946:	2303      	movs	r3, #3
 8008948:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2203      	movs	r2, #3
 800894e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800895e:	2200      	movs	r2, #0
 8008960:	4619      	mov	r1, r3
 8008962:	f000 fb0d 	bl	8008f80 <osMessagePut>
      break;
 8008966:	e114      	b.n	8008b92 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d111      	bne.n	8008992 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2205      	movs	r2, #5
 8008972:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2203      	movs	r2, #3
 8008978:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008988:	2200      	movs	r2, #0
 800898a:	4619      	mov	r1, r3
 800898c:	f000 faf8 	bl	8008f80 <osMessagePut>
      break;
 8008990:	e0ff      	b.n	8008b92 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	2b04      	cmp	r3, #4
 8008996:	f040 80fc 	bne.w	8008b92 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	220b      	movs	r2, #11
 800899e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80089a0:	2302      	movs	r3, #2
 80089a2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2203      	movs	r2, #3
 80089a8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80089b8:	2200      	movs	r2, #0
 80089ba:	4619      	mov	r1, r3
 80089bc:	f000 fae0 	bl	8008f80 <osMessagePut>
      break;
 80089c0:	e0e7      	b.n	8008b92 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	791b      	ldrb	r3, [r3, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f92b 	bl	8008c26 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089d6:	b29a      	uxth	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2208      	movs	r2, #8
 80089e0:	761a      	strb	r2, [r3, #24]

      break;
 80089e2:	e0db      	b.n	8008b9c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	791b      	ldrb	r3, [r3, #4]
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f002 ff30 	bl	800b850 <USBH_LL_GetURBState>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d113      	bne.n	8008a22 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	220d      	movs	r2, #13
 80089fe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2203      	movs	r2, #3
 8008a08:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	f000 fab0 	bl	8008f80 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a20:	e0b9      	b.n	8008b96 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d111      	bne.n	8008a4c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	220b      	movs	r2, #11
 8008a2c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2203      	movs	r2, #3
 8008a32:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a42:	2200      	movs	r2, #0
 8008a44:	4619      	mov	r1, r3
 8008a46:	f000 fa9b 	bl	8008f80 <osMessagePut>
      break;
 8008a4a:	e0a4      	b.n	8008b96 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8008a4c:	7bbb      	ldrb	r3, [r7, #14]
 8008a4e:	2b05      	cmp	r3, #5
 8008a50:	f040 80a1 	bne.w	8008b96 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8008a54:	2303      	movs	r3, #3
 8008a56:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2203      	movs	r2, #3
 8008a5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	4619      	mov	r1, r3
 8008a70:	f000 fa86 	bl	8008f80 <osMessagePut>
      break;
 8008a74:	e08f      	b.n	8008b96 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	795b      	ldrb	r3, [r3, #5]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	9200      	str	r2, [sp, #0]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	2100      	movs	r1, #0
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f8aa 	bl	8008bdc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a8e:	b29a      	uxth	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	220a      	movs	r2, #10
 8008a98:	761a      	strb	r2, [r3, #24]
      break;
 8008a9a:	e07f      	b.n	8008b9c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	795b      	ldrb	r3, [r3, #5]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 fed4 	bl	800b850 <USBH_LL_GetURBState>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d113      	bne.n	8008ada <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	220d      	movs	r2, #13
 8008aba:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2203      	movs	r2, #3
 8008ac0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	f000 fa54 	bl	8008f80 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ad8:	e05f      	b.n	8008b9a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b02      	cmp	r3, #2
 8008ade:	d111      	bne.n	8008b04 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2209      	movs	r2, #9
 8008ae4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2203      	movs	r2, #3
 8008aea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008afa:	2200      	movs	r2, #0
 8008afc:	4619      	mov	r1, r3
 8008afe:	f000 fa3f 	bl	8008f80 <osMessagePut>
      break;
 8008b02:	e04a      	b.n	8008b9a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8008b04:	7bbb      	ldrb	r3, [r7, #14]
 8008b06:	2b04      	cmp	r3, #4
 8008b08:	d147      	bne.n	8008b9a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	220b      	movs	r2, #11
 8008b0e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2203      	movs	r2, #3
 8008b14:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008b24:	2200      	movs	r2, #0
 8008b26:	4619      	mov	r1, r3
 8008b28:	f000 fa2a 	bl	8008f80 <osMessagePut>
      break;
 8008b2c:	e035      	b.n	8008b9a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	7e5b      	ldrb	r3, [r3, #25]
 8008b32:	3301      	adds	r3, #1
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	765a      	strb	r2, [r3, #25]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	7e5b      	ldrb	r3, [r3, #25]
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d806      	bhi.n	8008b50 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2201      	movs	r2, #1
 8008b46:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008b4e:	e025      	b.n	8008b9c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b56:	2106      	movs	r1, #6
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	795b      	ldrb	r3, [r3, #5]
 8008b66:	4619      	mov	r1, r3
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	f000 f90d 	bl	8008d88 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	791b      	ldrb	r3, [r3, #4]
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 f907 	bl	8008d88 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008b80:	2302      	movs	r3, #2
 8008b82:	73fb      	strb	r3, [r7, #15]
      break;
 8008b84:	e00a      	b.n	8008b9c <USBH_HandleControl+0x484>

    default:
      break;
 8008b86:	bf00      	nop
 8008b88:	e008      	b.n	8008b9c <USBH_HandleControl+0x484>
      break;
 8008b8a:	bf00      	nop
 8008b8c:	e006      	b.n	8008b9c <USBH_HandleControl+0x484>
      break;
 8008b8e:	bf00      	nop
 8008b90:	e004      	b.n	8008b9c <USBH_HandleControl+0x484>
      break;
 8008b92:	bf00      	nop
 8008b94:	e002      	b.n	8008b9c <USBH_HandleControl+0x484>
      break;
 8008b96:	bf00      	nop
 8008b98:	e000      	b.n	8008b9c <USBH_HandleControl+0x484>
      break;
 8008b9a:	bf00      	nop
  }

  return status;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop

08008ba8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af04      	add	r7, sp, #16
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bb6:	79f9      	ldrb	r1, [r7, #7]
 8008bb8:	2300      	movs	r3, #0
 8008bba:	9303      	str	r3, [sp, #12]
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	9302      	str	r3, [sp, #8]
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	9301      	str	r3, [sp, #4]
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	2200      	movs	r2, #0
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f002 fe0e 	bl	800b7ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b088      	sub	sp, #32
 8008be0:	af04      	add	r7, sp, #16
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	4611      	mov	r1, r2
 8008be8:	461a      	mov	r2, r3
 8008bea:	460b      	mov	r3, r1
 8008bec:	80fb      	strh	r3, [r7, #6]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c00:	7979      	ldrb	r1, [r7, #5]
 8008c02:	7e3b      	ldrb	r3, [r7, #24]
 8008c04:	9303      	str	r3, [sp, #12]
 8008c06:	88fb      	ldrh	r3, [r7, #6]
 8008c08:	9302      	str	r3, [sp, #8]
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	9301      	str	r3, [sp, #4]
 8008c0e:	2301      	movs	r3, #1
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	2300      	movs	r3, #0
 8008c14:	2200      	movs	r2, #0
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f002 fde9 	bl	800b7ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3710      	adds	r7, #16
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}

08008c26 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b088      	sub	sp, #32
 8008c2a:	af04      	add	r7, sp, #16
 8008c2c:	60f8      	str	r0, [r7, #12]
 8008c2e:	60b9      	str	r1, [r7, #8]
 8008c30:	4611      	mov	r1, r2
 8008c32:	461a      	mov	r2, r3
 8008c34:	460b      	mov	r3, r1
 8008c36:	80fb      	strh	r3, [r7, #6]
 8008c38:	4613      	mov	r3, r2
 8008c3a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c3c:	7979      	ldrb	r1, [r7, #5]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9303      	str	r3, [sp, #12]
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	9302      	str	r3, [sp, #8]
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	2300      	movs	r3, #0
 8008c50:	2201      	movs	r2, #1
 8008c52:	68f8      	ldr	r0, [r7, #12]
 8008c54:	f002 fdcb 	bl	800b7ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c58:	2300      	movs	r3, #0

}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b088      	sub	sp, #32
 8008c66:	af04      	add	r7, sp, #16
 8008c68:	60f8      	str	r0, [r7, #12]
 8008c6a:	60b9      	str	r1, [r7, #8]
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	461a      	mov	r2, r3
 8008c70:	460b      	mov	r3, r1
 8008c72:	80fb      	strh	r3, [r7, #6]
 8008c74:	4613      	mov	r3, r2
 8008c76:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008c82:	2300      	movs	r3, #0
 8008c84:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c86:	7979      	ldrb	r1, [r7, #5]
 8008c88:	7e3b      	ldrb	r3, [r7, #24]
 8008c8a:	9303      	str	r3, [sp, #12]
 8008c8c:	88fb      	ldrh	r3, [r7, #6]
 8008c8e:	9302      	str	r3, [sp, #8]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	2301      	movs	r3, #1
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	2302      	movs	r3, #2
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f002 fda6 	bl	800b7ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b088      	sub	sp, #32
 8008cb0:	af04      	add	r7, sp, #16
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	4611      	mov	r1, r2
 8008cb8:	461a      	mov	r2, r3
 8008cba:	460b      	mov	r3, r1
 8008cbc:	80fb      	strh	r3, [r7, #6]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008cc2:	7979      	ldrb	r1, [r7, #5]
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9303      	str	r3, [sp, #12]
 8008cc8:	88fb      	ldrh	r3, [r7, #6]
 8008cca:	9302      	str	r3, [sp, #8]
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	9301      	str	r3, [sp, #4]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f002 fd88 	bl	800b7ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008cde:	2300      	movs	r3, #0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3710      	adds	r7, #16
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af04      	add	r7, sp, #16
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	4611      	mov	r1, r2
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	70fb      	strb	r3, [r7, #3]
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	70bb      	strb	r3, [r7, #2]
 8008cfe:	4613      	mov	r3, r2
 8008d00:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008d02:	7878      	ldrb	r0, [r7, #1]
 8008d04:	78ba      	ldrb	r2, [r7, #2]
 8008d06:	78f9      	ldrb	r1, [r7, #3]
 8008d08:	8b3b      	ldrh	r3, [r7, #24]
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	7d3b      	ldrb	r3, [r7, #20]
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	7c3b      	ldrb	r3, [r7, #16]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4603      	mov	r3, r0
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f002 fd1b 	bl	800b752 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3708      	adds	r7, #8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}

08008d26 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008d26:	b580      	push	{r7, lr}
 8008d28:	b082      	sub	sp, #8
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	6078      	str	r0, [r7, #4]
 8008d2e:	460b      	mov	r3, r1
 8008d30:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008d32:	78fb      	ldrb	r3, [r7, #3]
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f002 fd3a 	bl	800b7b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	460b      	mov	r3, r1
 8008d50:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f836 	bl	8008dc4 <USBH_GetFreePipe>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008d5c:	89fb      	ldrh	r3, [r7, #14]
 8008d5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d00a      	beq.n	8008d7c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008d66:	78fa      	ldrb	r2, [r7, #3]
 8008d68:	89fb      	ldrh	r3, [r7, #14]
 8008d6a:	f003 030f 	and.w	r3, r3, #15
 8008d6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	33e0      	adds	r3, #224	@ 0xe0
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	440b      	add	r3, r1
 8008d7a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008d7c:	89fb      	ldrh	r3, [r7, #14]
 8008d7e:	b2db      	uxtb	r3, r3
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3710      	adds	r7, #16
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	460b      	mov	r3, r1
 8008d92:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d94:	78fb      	ldrb	r3, [r7, #3]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d80d      	bhi.n	8008db6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d9a:	78fb      	ldrb	r3, [r7, #3]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	33e0      	adds	r3, #224	@ 0xe0
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	685a      	ldr	r2, [r3, #4]
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	33e0      	adds	r3, #224	@ 0xe0
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b085      	sub	sp, #20
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	73fb      	strb	r3, [r7, #15]
 8008dd4:	e00f      	b.n	8008df6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008dd6:	7bfb      	ldrb	r3, [r7, #15]
 8008dd8:	687a      	ldr	r2, [r7, #4]
 8008dda:	33e0      	adds	r3, #224	@ 0xe0
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d102      	bne.n	8008df0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	e007      	b.n	8008e00 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	3301      	adds	r3, #1
 8008df4:	73fb      	strb	r3, [r7, #15]
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	2b0f      	cmp	r3, #15
 8008dfa:	d9ec      	bls.n	8008dd6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008dfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3714      	adds	r7, #20
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	4603      	mov	r3, r0
 8008e14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008e16:	2300      	movs	r3, #0
 8008e18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008e1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008e1e:	2b84      	cmp	r3, #132	@ 0x84
 8008e20:	d005      	beq.n	8008e2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008e22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	4413      	add	r3, r2
 8008e2a:	3303      	adds	r3, #3
 8008e2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3714      	adds	r7, #20
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	4770      	bx	lr

08008e3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e42:	f3ef 8305 	mrs	r3, IPSR
 8008e46:	607b      	str	r3, [r7, #4]
  return(result);
 8008e48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bf14      	ite	ne
 8008e4e:	2301      	movne	r3, #1
 8008e50:	2300      	moveq	r3, #0
 8008e52:	b2db      	uxtb	r3, r3
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008e64:	f001 f930 	bl	800a0c8 <vTaskStartScheduler>
  
  return osOK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e70:	b089      	sub	sp, #36	@ 0x24
 8008e72:	af04      	add	r7, sp, #16
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	695b      	ldr	r3, [r3, #20]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d020      	beq.n	8008ec2 <osThreadCreate+0x54>
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	699b      	ldr	r3, [r3, #24]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d01c      	beq.n	8008ec2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	685c      	ldr	r4, [r3, #4]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	691e      	ldr	r6, [r3, #16]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff ffb6 	bl	8008e0c <makeFreeRtosPriority>
 8008ea0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	695b      	ldr	r3, [r3, #20]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008eaa:	9202      	str	r2, [sp, #8]
 8008eac:	9301      	str	r3, [sp, #4]
 8008eae:	9100      	str	r1, [sp, #0]
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	4632      	mov	r2, r6
 8008eb4:	4629      	mov	r1, r5
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 ff20 	bl	8009cfc <xTaskCreateStatic>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	e01c      	b.n	8008efc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685c      	ldr	r4, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ece:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff ff98 	bl	8008e0c <makeFreeRtosPriority>
 8008edc:	4602      	mov	r2, r0
 8008ede:	f107 030c 	add.w	r3, r7, #12
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	9200      	str	r2, [sp, #0]
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	4632      	mov	r2, r6
 8008eea:	4629      	mov	r1, r5
 8008eec:	4620      	mov	r0, r4
 8008eee:	f000 ff65 	bl	8009dbc <xTaskCreate>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d001      	beq.n	8008efc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	e000      	b.n	8008efe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008efc:	68fb      	ldr	r3, [r7, #12]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3714      	adds	r7, #20
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008f06:	b580      	push	{r7, lr}
 8008f08:	b084      	sub	sp, #16
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <osDelay+0x16>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	e000      	b.n	8008f1e <osDelay+0x18>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f001 f89c 	bl	800a05c <vTaskDelay>
  
  return osOK;
 8008f24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}

08008f2e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008f2e:	b590      	push	{r4, r7, lr}
 8008f30:	b085      	sub	sp, #20
 8008f32:	af02      	add	r7, sp, #8
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d011      	beq.n	8008f64 <osMessageCreate+0x36>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00d      	beq.n	8008f64 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6818      	ldr	r0, [r3, #0]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6859      	ldr	r1, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689a      	ldr	r2, [r3, #8]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	2400      	movs	r4, #0
 8008f5a:	9400      	str	r4, [sp, #0]
 8008f5c:	f000 f9e2 	bl	8009324 <xQueueGenericCreateStatic>
 8008f60:	4603      	mov	r3, r0
 8008f62:	e008      	b.n	8008f76 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6818      	ldr	r0, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	4619      	mov	r1, r3
 8008f70:	f000 fa55 	bl	800941e <xQueueGenericCreate>
 8008f74:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	370c      	adds	r7, #12
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd90      	pop	{r4, r7, pc}
	...

08008f80 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	60f8      	str	r0, [r7, #12]
 8008f88:	60b9      	str	r1, [r7, #8]
 8008f8a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d101      	bne.n	8008f9e <osMessagePut+0x1e>
    ticks = 1;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008f9e:	f7ff ff4d 	bl	8008e3c <inHandlerMode>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d018      	beq.n	8008fda <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008fa8:	f107 0210 	add.w	r2, r7, #16
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f000 fb90 	bl	80096d8 <xQueueGenericSendFromISR>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d001      	beq.n	8008fc2 <osMessagePut+0x42>
      return osErrorOS;
 8008fbe:	23ff      	movs	r3, #255	@ 0xff
 8008fc0:	e018      	b.n	8008ff4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d014      	beq.n	8008ff2 <osMessagePut+0x72>
 8008fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8008ffc <osMessagePut+0x7c>)
 8008fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fce:	601a      	str	r2, [r3, #0]
 8008fd0:	f3bf 8f4f 	dsb	sy
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	e00b      	b.n	8008ff2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008fda:	f107 0108 	add.w	r1, r7, #8
 8008fde:	2300      	movs	r3, #0
 8008fe0:	697a      	ldr	r2, [r7, #20]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	f000 fa76 	bl	80094d4 <xQueueGenericSend>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b01      	cmp	r3, #1
 8008fec:	d001      	beq.n	8008ff2 <osMessagePut+0x72>
      return osErrorOS;
 8008fee:	23ff      	movs	r3, #255	@ 0xff
 8008ff0:	e000      	b.n	8008ff4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	e000ed04 	.word	0xe000ed04

08009000 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009000:	b590      	push	{r4, r7, lr}
 8009002:	b08b      	sub	sp, #44	@ 0x2c
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	60b9      	str	r1, [r7, #8]
 800900a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009010:	2300      	movs	r3, #0
 8009012:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d10a      	bne.n	8009030 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800901a:	2380      	movs	r3, #128	@ 0x80
 800901c:	617b      	str	r3, [r7, #20]
    return event;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	461c      	mov	r4, r3
 8009022:	f107 0314 	add.w	r3, r7, #20
 8009026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800902a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800902e:	e054      	b.n	80090da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009030:	2300      	movs	r3, #0
 8009032:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009034:	2300      	movs	r3, #0
 8009036:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800903e:	d103      	bne.n	8009048 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009040:	f04f 33ff 	mov.w	r3, #4294967295
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
 8009046:	e009      	b.n	800905c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d006      	beq.n	800905c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <osMessageGet+0x5c>
      ticks = 1;
 8009058:	2301      	movs	r3, #1
 800905a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800905c:	f7ff feee 	bl	8008e3c <inHandlerMode>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d01c      	beq.n	80090a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009066:	f107 0220 	add.w	r2, r7, #32
 800906a:	f107 0314 	add.w	r3, r7, #20
 800906e:	3304      	adds	r3, #4
 8009070:	4619      	mov	r1, r3
 8009072:	68b8      	ldr	r0, [r7, #8]
 8009074:	f000 fcb0 	bl	80099d8 <xQueueReceiveFromISR>
 8009078:	4603      	mov	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d102      	bne.n	8009084 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800907e:	2310      	movs	r3, #16
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	e001      	b.n	8009088 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009084:	2300      	movs	r3, #0
 8009086:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009088:	6a3b      	ldr	r3, [r7, #32]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d01d      	beq.n	80090ca <osMessageGet+0xca>
 800908e:	4b15      	ldr	r3, [pc, #84]	@ (80090e4 <osMessageGet+0xe4>)
 8009090:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	f3bf 8f4f 	dsb	sy
 800909a:	f3bf 8f6f 	isb	sy
 800909e:	e014      	b.n	80090ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80090a0:	f107 0314 	add.w	r3, r7, #20
 80090a4:	3304      	adds	r3, #4
 80090a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090a8:	4619      	mov	r1, r3
 80090aa:	68b8      	ldr	r0, [r7, #8]
 80090ac:	f000 fbb2 	bl	8009814 <xQueueReceive>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b01      	cmp	r3, #1
 80090b4:	d102      	bne.n	80090bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80090b6:	2310      	movs	r3, #16
 80090b8:	617b      	str	r3, [r7, #20]
 80090ba:	e006      	b.n	80090ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80090bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d101      	bne.n	80090c6 <osMessageGet+0xc6>
 80090c2:	2300      	movs	r3, #0
 80090c4:	e000      	b.n	80090c8 <osMessageGet+0xc8>
 80090c6:	2340      	movs	r3, #64	@ 0x40
 80090c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	461c      	mov	r4, r3
 80090ce:	f107 0314 	add.w	r3, r7, #20
 80090d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	372c      	adds	r7, #44	@ 0x2c
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd90      	pop	{r4, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	e000ed04 	.word	0xe000ed04

080090e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f103 0208 	add.w	r2, r3, #8
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009100:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f103 0208 	add.w	r2, r3, #8
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f103 0208 	add.w	r2, r3, #8
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800911c:	bf00      	nop
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009136:	bf00      	nop
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
 800914a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	68fa      	ldr	r2, [r7, #12]
 8009156:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	683a      	ldr	r2, [r7, #0]
 8009166:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	683a      	ldr	r2, [r7, #0]
 800916c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	1c5a      	adds	r2, r3, #1
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	601a      	str	r2, [r3, #0]
}
 800917e:	bf00      	nop
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800918a:	b480      	push	{r7}
 800918c:	b085      	sub	sp, #20
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a0:	d103      	bne.n	80091aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	60fb      	str	r3, [r7, #12]
 80091a8:	e00c      	b.n	80091c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3308      	adds	r3, #8
 80091ae:	60fb      	str	r3, [r7, #12]
 80091b0:	e002      	b.n	80091b8 <vListInsert+0x2e>
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	60fb      	str	r3, [r7, #12]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d2f6      	bcs.n	80091b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	685a      	ldr	r2, [r3, #4]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	683a      	ldr	r2, [r7, #0]
 80091d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	683a      	ldr	r2, [r7, #0]
 80091de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	1c5a      	adds	r2, r3, #1
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	601a      	str	r2, [r3, #0]
}
 80091f0:	bf00      	nop
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	691b      	ldr	r3, [r3, #16]
 8009208:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	6892      	ldr	r2, [r2, #8]
 8009212:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	6852      	ldr	r2, [r2, #4]
 800921c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	687a      	ldr	r2, [r7, #4]
 8009224:	429a      	cmp	r2, r3
 8009226:	d103      	bne.n	8009230 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	1e5a      	subs	r2, r3, #1
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b084      	sub	sp, #16
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d10b      	bne.n	800927c <xQueueGenericReset+0x2c>
	__asm volatile
 8009264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009268:	f383 8811 	msr	BASEPRI, r3
 800926c:	f3bf 8f6f 	isb	sy
 8009270:	f3bf 8f4f 	dsb	sy
 8009274:	60bb      	str	r3, [r7, #8]
}
 8009276:	bf00      	nop
 8009278:	bf00      	nop
 800927a:	e7fd      	b.n	8009278 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800927c:	f001 fd84 	bl	800ad88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	68f9      	ldr	r1, [r7, #12]
 800928a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800928c:	fb01 f303 	mul.w	r3, r1, r3
 8009290:	441a      	add	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681a      	ldr	r2, [r3, #0]
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ac:	3b01      	subs	r3, #1
 80092ae:	68f9      	ldr	r1, [r7, #12]
 80092b0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80092b2:	fb01 f303 	mul.w	r3, r1, r3
 80092b6:	441a      	add	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	22ff      	movs	r2, #255	@ 0xff
 80092c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	22ff      	movs	r2, #255	@ 0xff
 80092c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d114      	bne.n	80092fc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d01a      	beq.n	8009310 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	3310      	adds	r3, #16
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 f94c 	bl	800a57c <xTaskRemoveFromEventList>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d012      	beq.n	8009310 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80092ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009320 <xQueueGenericReset+0xd0>)
 80092ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092f0:	601a      	str	r2, [r3, #0]
 80092f2:	f3bf 8f4f 	dsb	sy
 80092f6:	f3bf 8f6f 	isb	sy
 80092fa:	e009      	b.n	8009310 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	3310      	adds	r3, #16
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff fef1 	bl	80090e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3324      	adds	r3, #36	@ 0x24
 800930a:	4618      	mov	r0, r3
 800930c:	f7ff feec 	bl	80090e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009310:	f001 fd6c 	bl	800adec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009314:	2301      	movs	r3, #1
}
 8009316:	4618      	mov	r0, r3
 8009318:	3710      	adds	r7, #16
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	e000ed04 	.word	0xe000ed04

08009324 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08e      	sub	sp, #56	@ 0x38
 8009328:	af02      	add	r7, sp, #8
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d10b      	bne.n	8009350 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800933c:	f383 8811 	msr	BASEPRI, r3
 8009340:	f3bf 8f6f 	isb	sy
 8009344:	f3bf 8f4f 	dsb	sy
 8009348:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800934a:	bf00      	nop
 800934c:	bf00      	nop
 800934e:	e7fd      	b.n	800934c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d10b      	bne.n	800936e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935a:	f383 8811 	msr	BASEPRI, r3
 800935e:	f3bf 8f6f 	isb	sy
 8009362:	f3bf 8f4f 	dsb	sy
 8009366:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009368:	bf00      	nop
 800936a:	bf00      	nop
 800936c:	e7fd      	b.n	800936a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <xQueueGenericCreateStatic+0x56>
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <xQueueGenericCreateStatic+0x5a>
 800937a:	2301      	movs	r3, #1
 800937c:	e000      	b.n	8009380 <xQueueGenericCreateStatic+0x5c>
 800937e:	2300      	movs	r3, #0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10b      	bne.n	800939c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009388:	f383 8811 	msr	BASEPRI, r3
 800938c:	f3bf 8f6f 	isb	sy
 8009390:	f3bf 8f4f 	dsb	sy
 8009394:	623b      	str	r3, [r7, #32]
}
 8009396:	bf00      	nop
 8009398:	bf00      	nop
 800939a:	e7fd      	b.n	8009398 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d102      	bne.n	80093a8 <xQueueGenericCreateStatic+0x84>
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d101      	bne.n	80093ac <xQueueGenericCreateStatic+0x88>
 80093a8:	2301      	movs	r3, #1
 80093aa:	e000      	b.n	80093ae <xQueueGenericCreateStatic+0x8a>
 80093ac:	2300      	movs	r3, #0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10b      	bne.n	80093ca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80093b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b6:	f383 8811 	msr	BASEPRI, r3
 80093ba:	f3bf 8f6f 	isb	sy
 80093be:	f3bf 8f4f 	dsb	sy
 80093c2:	61fb      	str	r3, [r7, #28]
}
 80093c4:	bf00      	nop
 80093c6:	bf00      	nop
 80093c8:	e7fd      	b.n	80093c6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80093ca:	2348      	movs	r3, #72	@ 0x48
 80093cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	2b48      	cmp	r3, #72	@ 0x48
 80093d2:	d00b      	beq.n	80093ec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	61bb      	str	r3, [r7, #24]
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80093ec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80093f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00d      	beq.n	8009414 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80093f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009400:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	9300      	str	r3, [sp, #0]
 8009408:	4613      	mov	r3, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	68b9      	ldr	r1, [r7, #8]
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 f840 	bl	8009494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009416:	4618      	mov	r0, r3
 8009418:	3730      	adds	r7, #48	@ 0x30
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800941e:	b580      	push	{r7, lr}
 8009420:	b08a      	sub	sp, #40	@ 0x28
 8009422:	af02      	add	r7, sp, #8
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	4613      	mov	r3, r2
 800942a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10b      	bne.n	800944a <xQueueGenericCreate+0x2c>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	613b      	str	r3, [r7, #16]
}
 8009444:	bf00      	nop
 8009446:	bf00      	nop
 8009448:	e7fd      	b.n	8009446 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	fb02 f303 	mul.w	r3, r2, r3
 8009452:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	3348      	adds	r3, #72	@ 0x48
 8009458:	4618      	mov	r0, r3
 800945a:	f001 fdb7 	bl	800afcc <pvPortMalloc>
 800945e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d011      	beq.n	800948a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	3348      	adds	r3, #72	@ 0x48
 800946e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009478:	79fa      	ldrb	r2, [r7, #7]
 800947a:	69bb      	ldr	r3, [r7, #24]
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	4613      	mov	r3, r2
 8009480:	697a      	ldr	r2, [r7, #20]
 8009482:	68b9      	ldr	r1, [r7, #8]
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f805 	bl	8009494 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800948a:	69bb      	ldr	r3, [r7, #24]
	}
 800948c:	4618      	mov	r0, r3
 800948e:	3720      	adds	r7, #32
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
 80094a0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d103      	bne.n	80094b0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	69ba      	ldr	r2, [r7, #24]
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e002      	b.n	80094b6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	68fa      	ldr	r2, [r7, #12]
 80094ba:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80094c2:	2101      	movs	r1, #1
 80094c4:	69b8      	ldr	r0, [r7, #24]
 80094c6:	f7ff fec3 	bl	8009250 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80094ca:	bf00      	nop
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
	...

080094d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08e      	sub	sp, #56	@ 0x38
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80094e2:	2300      	movs	r3, #0
 80094e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80094ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d10b      	bne.n	8009508 <xQueueGenericSend+0x34>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009502:	bf00      	nop
 8009504:	bf00      	nop
 8009506:	e7fd      	b.n	8009504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d103      	bne.n	8009516 <xQueueGenericSend+0x42>
 800950e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009512:	2b00      	cmp	r3, #0
 8009514:	d101      	bne.n	800951a <xQueueGenericSend+0x46>
 8009516:	2301      	movs	r3, #1
 8009518:	e000      	b.n	800951c <xQueueGenericSend+0x48>
 800951a:	2300      	movs	r3, #0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d10b      	bne.n	8009538 <xQueueGenericSend+0x64>
	__asm volatile
 8009520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009532:	bf00      	nop
 8009534:	bf00      	nop
 8009536:	e7fd      	b.n	8009534 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	2b02      	cmp	r3, #2
 800953c:	d103      	bne.n	8009546 <xQueueGenericSend+0x72>
 800953e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009542:	2b01      	cmp	r3, #1
 8009544:	d101      	bne.n	800954a <xQueueGenericSend+0x76>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <xQueueGenericSend+0x78>
 800954a:	2300      	movs	r3, #0
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10b      	bne.n	8009568 <xQueueGenericSend+0x94>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	623b      	str	r3, [r7, #32]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009568:	f001 f9ce 	bl	800a908 <xTaskGetSchedulerState>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d102      	bne.n	8009578 <xQueueGenericSend+0xa4>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <xQueueGenericSend+0xa8>
 8009578:	2301      	movs	r3, #1
 800957a:	e000      	b.n	800957e <xQueueGenericSend+0xaa>
 800957c:	2300      	movs	r3, #0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10b      	bne.n	800959a <xQueueGenericSend+0xc6>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	61fb      	str	r3, [r7, #28]
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	e7fd      	b.n	8009596 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800959a:	f001 fbf5 	bl	800ad88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800959e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80095a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d302      	bcc.n	80095b0 <xQueueGenericSend+0xdc>
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d129      	bne.n	8009604 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	68b9      	ldr	r1, [r7, #8]
 80095b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80095b6:	f000 fa91 	bl	8009adc <prvCopyDataToQueue>
 80095ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d010      	beq.n	80095e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	3324      	adds	r3, #36	@ 0x24
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 ffd7 	bl	800a57c <xTaskRemoveFromEventList>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d013      	beq.n	80095fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80095d4:	4b3f      	ldr	r3, [pc, #252]	@ (80096d4 <xQueueGenericSend+0x200>)
 80095d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	e00a      	b.n	80095fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80095e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d007      	beq.n	80095fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80095ec:	4b39      	ldr	r3, [pc, #228]	@ (80096d4 <xQueueGenericSend+0x200>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80095fc:	f001 fbf6 	bl	800adec <vPortExitCritical>
				return pdPASS;
 8009600:	2301      	movs	r3, #1
 8009602:	e063      	b.n	80096cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800960a:	f001 fbef 	bl	800adec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800960e:	2300      	movs	r3, #0
 8009610:	e05c      	b.n	80096cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	4618      	mov	r0, r3
 800961e:	f001 f811 	bl	800a644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009622:	2301      	movs	r3, #1
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009626:	f001 fbe1 	bl	800adec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800962a:	f000 fdb7 	bl	800a19c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800962e:	f001 fbab 	bl	800ad88 <vPortEnterCritical>
 8009632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009638:	b25b      	sxtb	r3, r3
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d103      	bne.n	8009648 <xQueueGenericSend+0x174>
 8009640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800964a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800964e:	b25b      	sxtb	r3, r3
 8009650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009654:	d103      	bne.n	800965e <xQueueGenericSend+0x18a>
 8009656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009658:	2200      	movs	r2, #0
 800965a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800965e:	f001 fbc5 	bl	800adec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009662:	1d3a      	adds	r2, r7, #4
 8009664:	f107 0314 	add.w	r3, r7, #20
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f001 f800 	bl	800a670 <xTaskCheckForTimeOut>
 8009670:	4603      	mov	r3, r0
 8009672:	2b00      	cmp	r3, #0
 8009674:	d124      	bne.n	80096c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009676:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009678:	f000 fb28 	bl	8009ccc <prvIsQueueFull>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d018      	beq.n	80096b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	3310      	adds	r3, #16
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	4611      	mov	r1, r2
 800968a:	4618      	mov	r0, r3
 800968c:	f000 ff50 	bl	800a530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009692:	f000 fab3 	bl	8009bfc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009696:	f000 fd8f 	bl	800a1b8 <xTaskResumeAll>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	f47f af7c 	bne.w	800959a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80096a2:	4b0c      	ldr	r3, [pc, #48]	@ (80096d4 <xQueueGenericSend+0x200>)
 80096a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80096a8:	601a      	str	r2, [r3, #0]
 80096aa:	f3bf 8f4f 	dsb	sy
 80096ae:	f3bf 8f6f 	isb	sy
 80096b2:	e772      	b.n	800959a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80096b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096b6:	f000 faa1 	bl	8009bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096ba:	f000 fd7d 	bl	800a1b8 <xTaskResumeAll>
 80096be:	e76c      	b.n	800959a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80096c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80096c2:	f000 fa9b 	bl	8009bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096c6:	f000 fd77 	bl	800a1b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80096ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3738      	adds	r7, #56	@ 0x38
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	e000ed04 	.word	0xe000ed04

080096d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b090      	sub	sp, #64	@ 0x40
 80096dc:	af00      	add	r7, sp, #0
 80096de:	60f8      	str	r0, [r7, #12]
 80096e0:	60b9      	str	r1, [r7, #8]
 80096e2:	607a      	str	r2, [r7, #4]
 80096e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80096ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10b      	bne.n	8009708 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d103      	bne.n	8009716 <xQueueGenericSendFromISR+0x3e>
 800970e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009712:	2b00      	cmp	r3, #0
 8009714:	d101      	bne.n	800971a <xQueueGenericSendFromISR+0x42>
 8009716:	2301      	movs	r3, #1
 8009718:	e000      	b.n	800971c <xQueueGenericSendFromISR+0x44>
 800971a:	2300      	movs	r3, #0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d10b      	bne.n	8009738 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009732:	bf00      	nop
 8009734:	bf00      	nop
 8009736:	e7fd      	b.n	8009734 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	2b02      	cmp	r3, #2
 800973c:	d103      	bne.n	8009746 <xQueueGenericSendFromISR+0x6e>
 800973e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <xQueueGenericSendFromISR+0x72>
 8009746:	2301      	movs	r3, #1
 8009748:	e000      	b.n	800974c <xQueueGenericSendFromISR+0x74>
 800974a:	2300      	movs	r3, #0
 800974c:	2b00      	cmp	r3, #0
 800974e:	d10b      	bne.n	8009768 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009754:	f383 8811 	msr	BASEPRI, r3
 8009758:	f3bf 8f6f 	isb	sy
 800975c:	f3bf 8f4f 	dsb	sy
 8009760:	623b      	str	r3, [r7, #32]
}
 8009762:	bf00      	nop
 8009764:	bf00      	nop
 8009766:	e7fd      	b.n	8009764 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009768:	f001 fbee 	bl	800af48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800976c:	f3ef 8211 	mrs	r2, BASEPRI
 8009770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	61fa      	str	r2, [r7, #28]
 8009782:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009784:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009786:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800978c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800978e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009790:	429a      	cmp	r2, r3
 8009792:	d302      	bcc.n	800979a <xQueueGenericSendFromISR+0xc2>
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b02      	cmp	r3, #2
 8009798:	d12f      	bne.n	80097fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800979a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80097a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80097b0:	f000 f994 	bl	8009adc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80097b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80097b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097bc:	d112      	bne.n	80097e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d016      	beq.n	80097f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097c8:	3324      	adds	r3, #36	@ 0x24
 80097ca:	4618      	mov	r0, r3
 80097cc:	f000 fed6 	bl	800a57c <xTaskRemoveFromEventList>
 80097d0:	4603      	mov	r3, r0
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00e      	beq.n	80097f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d00b      	beq.n	80097f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	e007      	b.n	80097f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80097e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80097e8:	3301      	adds	r3, #1
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	b25a      	sxtb	r2, r3
 80097ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80097f4:	2301      	movs	r3, #1
 80097f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80097f8:	e001      	b.n	80097fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80097fa:	2300      	movs	r3, #0
 80097fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009800:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009802:	697b      	ldr	r3, [r7, #20]
 8009804:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009808:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800980a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800980c:	4618      	mov	r0, r3
 800980e:	3740      	adds	r7, #64	@ 0x40
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b08c      	sub	sp, #48	@ 0x30
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009820:	2300      	movs	r3, #0
 8009822:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	2b00      	cmp	r3, #0
 800982c:	d10b      	bne.n	8009846 <xQueueReceive+0x32>
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	623b      	str	r3, [r7, #32]
}
 8009840:	bf00      	nop
 8009842:	bf00      	nop
 8009844:	e7fd      	b.n	8009842 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d103      	bne.n	8009854 <xQueueReceive+0x40>
 800984c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800984e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d101      	bne.n	8009858 <xQueueReceive+0x44>
 8009854:	2301      	movs	r3, #1
 8009856:	e000      	b.n	800985a <xQueueReceive+0x46>
 8009858:	2300      	movs	r3, #0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d10b      	bne.n	8009876 <xQueueReceive+0x62>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61fb      	str	r3, [r7, #28]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009876:	f001 f847 	bl	800a908 <xTaskGetSchedulerState>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <xQueueReceive+0x72>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <xQueueReceive+0x76>
 8009886:	2301      	movs	r3, #1
 8009888:	e000      	b.n	800988c <xQueueReceive+0x78>
 800988a:	2300      	movs	r3, #0
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10b      	bne.n	80098a8 <xQueueReceive+0x94>
	__asm volatile
 8009890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009894:	f383 8811 	msr	BASEPRI, r3
 8009898:	f3bf 8f6f 	isb	sy
 800989c:	f3bf 8f4f 	dsb	sy
 80098a0:	61bb      	str	r3, [r7, #24]
}
 80098a2:	bf00      	nop
 80098a4:	bf00      	nop
 80098a6:	e7fd      	b.n	80098a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098a8:	f001 fa6e 	bl	800ad88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80098ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80098b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d01f      	beq.n	80098f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80098bc:	f000 f978 	bl	8009bb0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80098c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098c2:	1e5a      	subs	r2, r3, #1
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ca:	691b      	ldr	r3, [r3, #16]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00f      	beq.n	80098f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d2:	3310      	adds	r3, #16
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 fe51 	bl	800a57c <xTaskRemoveFromEventList>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d007      	beq.n	80098f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098e0:	4b3c      	ldr	r3, [pc, #240]	@ (80099d4 <xQueueReceive+0x1c0>)
 80098e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80098e6:	601a      	str	r2, [r3, #0]
 80098e8:	f3bf 8f4f 	dsb	sy
 80098ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098f0:	f001 fa7c 	bl	800adec <vPortExitCritical>
				return pdPASS;
 80098f4:	2301      	movs	r3, #1
 80098f6:	e069      	b.n	80099cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d103      	bne.n	8009906 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098fe:	f001 fa75 	bl	800adec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009902:	2300      	movs	r3, #0
 8009904:	e062      	b.n	80099cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009908:	2b00      	cmp	r3, #0
 800990a:	d106      	bne.n	800991a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800990c:	f107 0310 	add.w	r3, r7, #16
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fe97 	bl	800a644 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009916:	2301      	movs	r3, #1
 8009918:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800991a:	f001 fa67 	bl	800adec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800991e:	f000 fc3d 	bl	800a19c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009922:	f001 fa31 	bl	800ad88 <vPortEnterCritical>
 8009926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800992c:	b25b      	sxtb	r3, r3
 800992e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009932:	d103      	bne.n	800993c <xQueueReceive+0x128>
 8009934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009936:	2200      	movs	r2, #0
 8009938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800993c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009942:	b25b      	sxtb	r3, r3
 8009944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009948:	d103      	bne.n	8009952 <xQueueReceive+0x13e>
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009952:	f001 fa4b 	bl	800adec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009956:	1d3a      	adds	r2, r7, #4
 8009958:	f107 0310 	add.w	r3, r7, #16
 800995c:	4611      	mov	r1, r2
 800995e:	4618      	mov	r0, r3
 8009960:	f000 fe86 	bl	800a670 <xTaskCheckForTimeOut>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d123      	bne.n	80099b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800996a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800996c:	f000 f998 	bl	8009ca0 <prvIsQueueEmpty>
 8009970:	4603      	mov	r3, r0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d017      	beq.n	80099a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	3324      	adds	r3, #36	@ 0x24
 800997a:	687a      	ldr	r2, [r7, #4]
 800997c:	4611      	mov	r1, r2
 800997e:	4618      	mov	r0, r3
 8009980:	f000 fdd6 	bl	800a530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009986:	f000 f939 	bl	8009bfc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800998a:	f000 fc15 	bl	800a1b8 <xTaskResumeAll>
 800998e:	4603      	mov	r3, r0
 8009990:	2b00      	cmp	r3, #0
 8009992:	d189      	bne.n	80098a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009994:	4b0f      	ldr	r3, [pc, #60]	@ (80099d4 <xQueueReceive+0x1c0>)
 8009996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	f3bf 8f6f 	isb	sy
 80099a4:	e780      	b.n	80098a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80099a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099a8:	f000 f928 	bl	8009bfc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099ac:	f000 fc04 	bl	800a1b8 <xTaskResumeAll>
 80099b0:	e77a      	b.n	80098a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80099b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099b4:	f000 f922 	bl	8009bfc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099b8:	f000 fbfe 	bl	800a1b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099be:	f000 f96f 	bl	8009ca0 <prvIsQueueEmpty>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f43f af6f 	beq.w	80098a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80099ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3730      	adds	r7, #48	@ 0x30
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	e000ed04 	.word	0xe000ed04

080099d8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b08e      	sub	sp, #56	@ 0x38
 80099dc:	af00      	add	r7, sp, #0
 80099de:	60f8      	str	r0, [r7, #12]
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80099e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	623b      	str	r3, [r7, #32]
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d103      	bne.n	8009a14 <xQueueReceiveFromISR+0x3c>
 8009a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d101      	bne.n	8009a18 <xQueueReceiveFromISR+0x40>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <xQueueReceiveFromISR+0x42>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d10b      	bne.n	8009a36 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	61fb      	str	r3, [r7, #28]
}
 8009a30:	bf00      	nop
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a36:	f001 fa87 	bl	800af48 <vPortValidateInterruptPriority>
	__asm volatile
 8009a3a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a42:	f383 8811 	msr	BASEPRI, r3
 8009a46:	f3bf 8f6f 	isb	sy
 8009a4a:	f3bf 8f4f 	dsb	sy
 8009a4e:	61ba      	str	r2, [r7, #24]
 8009a50:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009a52:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a5a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d02f      	beq.n	8009ac2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009a6c:	68b9      	ldr	r1, [r7, #8]
 8009a6e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009a70:	f000 f89e 	bl	8009bb0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a76:	1e5a      	subs	r2, r3, #1
 8009a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a7a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009a7c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a84:	d112      	bne.n	8009aac <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d016      	beq.n	8009abc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	3310      	adds	r3, #16
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 fd72 	bl	800a57c <xTaskRemoveFromEventList>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d00e      	beq.n	8009abc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	601a      	str	r2, [r3, #0]
 8009aaa:	e007      	b.n	8009abc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	b25a      	sxtb	r2, r3
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8009abc:	2301      	movs	r3, #1
 8009abe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac0:	e001      	b.n	8009ac6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ac8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	f383 8811 	msr	BASEPRI, r3
}
 8009ad0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3738      	adds	r7, #56	@ 0x38
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}

08009adc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b086      	sub	sp, #24
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009af0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10d      	bne.n	8009b16 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d14d      	bne.n	8009b9e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f000 ff1c 	bl	800a944 <xTaskPriorityDisinherit>
 8009b0c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2200      	movs	r2, #0
 8009b12:	609a      	str	r2, [r3, #8]
 8009b14:	e043      	b.n	8009b9e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d119      	bne.n	8009b50 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6858      	ldr	r0, [r3, #4]
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b24:	461a      	mov	r2, r3
 8009b26:	68b9      	ldr	r1, [r7, #8]
 8009b28:	f002 f8a2 	bl	800bc70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b34:	441a      	add	r2, r3
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	685a      	ldr	r2, [r3, #4]
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d32b      	bcc.n	8009b9e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]
 8009b4e:	e026      	b.n	8009b9e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	68d8      	ldr	r0, [r3, #12]
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b58:	461a      	mov	r2, r3
 8009b5a:	68b9      	ldr	r1, [r7, #8]
 8009b5c:	f002 f888 	bl	800bc70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	68da      	ldr	r2, [r3, #12]
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b68:	425b      	negs	r3, r3
 8009b6a:	441a      	add	r2, r3
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	68da      	ldr	r2, [r3, #12]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d207      	bcs.n	8009b8c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	689a      	ldr	r2, [r3, #8]
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b84:	425b      	negs	r3, r3
 8009b86:	441a      	add	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d105      	bne.n	8009b9e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b92:	693b      	ldr	r3, [r7, #16]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d002      	beq.n	8009b9e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	3b01      	subs	r3, #1
 8009b9c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	1c5a      	adds	r2, r3, #1
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009ba6:	697b      	ldr	r3, [r7, #20]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d018      	beq.n	8009bf4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	68da      	ldr	r2, [r3, #12]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bca:	441a      	add	r2, r3
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68da      	ldr	r2, [r3, #12]
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d303      	bcc.n	8009be4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681a      	ldr	r2, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	68d9      	ldr	r1, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bec:	461a      	mov	r2, r3
 8009bee:	6838      	ldr	r0, [r7, #0]
 8009bf0:	f002 f83e 	bl	800bc70 <memcpy>
	}
}
 8009bf4:	bf00      	nop
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c04:	f001 f8c0 	bl	800ad88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009c0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c10:	e011      	b.n	8009c36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d012      	beq.n	8009c40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	3324      	adds	r3, #36	@ 0x24
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f000 fcac 	bl	800a57c <xTaskRemoveFromEventList>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009c2a:	f000 fd85 	bl	800a738 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009c2e:	7bfb      	ldrb	r3, [r7, #15]
 8009c30:	3b01      	subs	r3, #1
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	dce9      	bgt.n	8009c12 <prvUnlockQueue+0x16>
 8009c3e:	e000      	b.n	8009c42 <prvUnlockQueue+0x46>
					break;
 8009c40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	22ff      	movs	r2, #255	@ 0xff
 8009c46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009c4a:	f001 f8cf 	bl	800adec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009c4e:	f001 f89b 	bl	800ad88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009c58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c5a:	e011      	b.n	8009c80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d012      	beq.n	8009c8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3310      	adds	r3, #16
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fc87 	bl	800a57c <xTaskRemoveFromEventList>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d001      	beq.n	8009c78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009c74:	f000 fd60 	bl	800a738 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009c78:	7bbb      	ldrb	r3, [r7, #14]
 8009c7a:	3b01      	subs	r3, #1
 8009c7c:	b2db      	uxtb	r3, r3
 8009c7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009c80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	dce9      	bgt.n	8009c5c <prvUnlockQueue+0x60>
 8009c88:	e000      	b.n	8009c8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009c8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	22ff      	movs	r2, #255	@ 0xff
 8009c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009c94:	f001 f8aa 	bl	800adec <vPortExitCritical>
}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ca8:	f001 f86e 	bl	800ad88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d102      	bne.n	8009cba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	e001      	b.n	8009cbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cbe:	f001 f895 	bl	800adec <vPortExitCritical>

	return xReturn;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009cd4:	f001 f858 	bl	800ad88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d102      	bne.n	8009cea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	60fb      	str	r3, [r7, #12]
 8009ce8:	e001      	b.n	8009cee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009cee:	f001 f87d 	bl	800adec <vPortExitCritical>

	return xReturn;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08e      	sub	sp, #56	@ 0x38
 8009d00:	af04      	add	r7, sp, #16
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d10b      	bne.n	8009d28 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	623b      	str	r3, [r7, #32]
}
 8009d22:	bf00      	nop
 8009d24:	bf00      	nop
 8009d26:	e7fd      	b.n	8009d24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10b      	bne.n	8009d46 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d32:	f383 8811 	msr	BASEPRI, r3
 8009d36:	f3bf 8f6f 	isb	sy
 8009d3a:	f3bf 8f4f 	dsb	sy
 8009d3e:	61fb      	str	r3, [r7, #28]
}
 8009d40:	bf00      	nop
 8009d42:	bf00      	nop
 8009d44:	e7fd      	b.n	8009d42 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d46:	23a0      	movs	r3, #160	@ 0xa0
 8009d48:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8009d4e:	d00b      	beq.n	8009d68 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	61bb      	str	r3, [r7, #24]
}
 8009d62:	bf00      	nop
 8009d64:	bf00      	nop
 8009d66:	e7fd      	b.n	8009d64 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d68:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d01e      	beq.n	8009dae <xTaskCreateStatic+0xb2>
 8009d70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d01b      	beq.n	8009dae <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d78:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d7c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d7e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009d88:	2300      	movs	r3, #0
 8009d8a:	9303      	str	r3, [sp, #12]
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d8e:	9302      	str	r3, [sp, #8]
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	68b9      	ldr	r1, [r7, #8]
 8009da0:	68f8      	ldr	r0, [r7, #12]
 8009da2:	f000 f851 	bl	8009e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009da8:	f000 f8ee 	bl	8009f88 <prvAddNewTaskToReadyList>
 8009dac:	e001      	b.n	8009db2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009db2:	697b      	ldr	r3, [r7, #20]
	}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	@ 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b08c      	sub	sp, #48	@ 0x30
 8009dc0:	af04      	add	r7, sp, #16
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	603b      	str	r3, [r7, #0]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009dcc:	88fb      	ldrh	r3, [r7, #6]
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f001 f8fb 	bl	800afcc <pvPortMalloc>
 8009dd6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00e      	beq.n	8009dfc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009dde:	20a0      	movs	r0, #160	@ 0xa0
 8009de0:	f001 f8f4 	bl	800afcc <pvPortMalloc>
 8009de4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	697a      	ldr	r2, [r7, #20]
 8009df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8009df2:	e005      	b.n	8009e00 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009df4:	6978      	ldr	r0, [r7, #20]
 8009df6:	f001 f9b7 	bl	800b168 <vPortFree>
 8009dfa:	e001      	b.n	8009e00 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d017      	beq.n	8009e36 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e0e:	88fa      	ldrh	r2, [r7, #6]
 8009e10:	2300      	movs	r3, #0
 8009e12:	9303      	str	r3, [sp, #12]
 8009e14:	69fb      	ldr	r3, [r7, #28]
 8009e16:	9302      	str	r3, [sp, #8]
 8009e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	68b9      	ldr	r1, [r7, #8]
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f80f 	bl	8009e48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e2a:	69f8      	ldr	r0, [r7, #28]
 8009e2c:	f000 f8ac 	bl	8009f88 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e30:	2301      	movs	r3, #1
 8009e32:	61bb      	str	r3, [r7, #24]
 8009e34:	e002      	b.n	8009e3c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e36:	f04f 33ff 	mov.w	r3, #4294967295
 8009e3a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e3c:	69bb      	ldr	r3, [r7, #24]
	}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3720      	adds	r7, #32
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}
	...

08009e48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009e60:	3b01      	subs	r3, #1
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	f003 0307 	and.w	r3, r3, #7
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00b      	beq.n	8009e92 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	617b      	str	r3, [r7, #20]
}
 8009e8c:	bf00      	nop
 8009e8e:	bf00      	nop
 8009e90:	e7fd      	b.n	8009e8e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d01f      	beq.n	8009ed8 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
 8009e9c:	e012      	b.n	8009ec4 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	69fb      	ldr	r3, [r7, #28]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	7819      	ldrb	r1, [r3, #0]
 8009ea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ea8:	69fb      	ldr	r3, [r7, #28]
 8009eaa:	4413      	add	r3, r2
 8009eac:	3334      	adds	r3, #52	@ 0x34
 8009eae:	460a      	mov	r2, r1
 8009eb0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009eb2:	68ba      	ldr	r2, [r7, #8]
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d006      	beq.n	8009ecc <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	61fb      	str	r3, [r7, #28]
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	2b0f      	cmp	r3, #15
 8009ec8:	d9e9      	bls.n	8009e9e <prvInitialiseNewTask+0x56>
 8009eca:	e000      	b.n	8009ece <prvInitialiseNewTask+0x86>
			{
				break;
 8009ecc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009ed6:	e003      	b.n	8009ee0 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eda:	2200      	movs	r2, #0
 8009edc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee2:	2b06      	cmp	r3, #6
 8009ee4:	d901      	bls.n	8009eea <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009ee6:	2306      	movs	r3, #6
 8009ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009eee:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ef4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	2200      	movs	r2, #0
 8009efa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efe:	3304      	adds	r3, #4
 8009f00:	4618      	mov	r0, r3
 8009f02:	f7ff f911 	bl	8009128 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	3318      	adds	r3, #24
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7ff f90c 	bl	8009128 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f14:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f18:	f1c3 0207 	rsb	r2, r3, #7
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f24:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f38:	334c      	adds	r3, #76	@ 0x4c
 8009f3a:	224c      	movs	r2, #76	@ 0x4c
 8009f3c:	2100      	movs	r1, #0
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f001 fdf4 	bl	800bb2c <memset>
 8009f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f46:	4a0d      	ldr	r2, [pc, #52]	@ (8009f7c <prvInitialiseNewTask+0x134>)
 8009f48:	651a      	str	r2, [r3, #80]	@ 0x50
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f80 <prvInitialiseNewTask+0x138>)
 8009f4e:	655a      	str	r2, [r3, #84]	@ 0x54
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	4a0c      	ldr	r2, [pc, #48]	@ (8009f84 <prvInitialiseNewTask+0x13c>)
 8009f54:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f56:	683a      	ldr	r2, [r7, #0]
 8009f58:	68f9      	ldr	r1, [r7, #12]
 8009f5a:	69b8      	ldr	r0, [r7, #24]
 8009f5c:	f000 fde0 	bl	800ab20 <pxPortInitialiseStack>
 8009f60:	4602      	mov	r2, r0
 8009f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f72:	bf00      	nop
 8009f74:	3720      	adds	r7, #32
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20004d6c 	.word	0x20004d6c
 8009f80:	20004dd4 	.word	0x20004dd4
 8009f84:	20004e3c 	.word	0x20004e3c

08009f88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f90:	f000 fefa 	bl	800ad88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f94:	4b2a      	ldr	r3, [pc, #168]	@ (800a040 <prvAddNewTaskToReadyList+0xb8>)
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	4a29      	ldr	r2, [pc, #164]	@ (800a040 <prvAddNewTaskToReadyList+0xb8>)
 8009f9c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f9e:	4b29      	ldr	r3, [pc, #164]	@ (800a044 <prvAddNewTaskToReadyList+0xbc>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d109      	bne.n	8009fba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fa6:	4a27      	ldr	r2, [pc, #156]	@ (800a044 <prvAddNewTaskToReadyList+0xbc>)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fac:	4b24      	ldr	r3, [pc, #144]	@ (800a040 <prvAddNewTaskToReadyList+0xb8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d110      	bne.n	8009fd6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fb4:	f000 fbe4 	bl	800a780 <prvInitialiseTaskLists>
 8009fb8:	e00d      	b.n	8009fd6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fba:	4b23      	ldr	r3, [pc, #140]	@ (800a048 <prvAddNewTaskToReadyList+0xc0>)
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d109      	bne.n	8009fd6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fc2:	4b20      	ldr	r3, [pc, #128]	@ (800a044 <prvAddNewTaskToReadyList+0xbc>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d802      	bhi.n	8009fd6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fd0:	4a1c      	ldr	r2, [pc, #112]	@ (800a044 <prvAddNewTaskToReadyList+0xbc>)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fd6:	4b1d      	ldr	r3, [pc, #116]	@ (800a04c <prvAddNewTaskToReadyList+0xc4>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	3301      	adds	r3, #1
 8009fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800a04c <prvAddNewTaskToReadyList+0xc4>)
 8009fde:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	409a      	lsls	r2, r3
 8009fe8:	4b19      	ldr	r3, [pc, #100]	@ (800a050 <prvAddNewTaskToReadyList+0xc8>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4313      	orrs	r3, r2
 8009fee:	4a18      	ldr	r2, [pc, #96]	@ (800a050 <prvAddNewTaskToReadyList+0xc8>)
 8009ff0:	6013      	str	r3, [r2, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4a15      	ldr	r2, [pc, #84]	@ (800a054 <prvAddNewTaskToReadyList+0xcc>)
 800a000:	441a      	add	r2, r3
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	3304      	adds	r3, #4
 800a006:	4619      	mov	r1, r3
 800a008:	4610      	mov	r0, r2
 800a00a:	f7ff f89a 	bl	8009142 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a00e:	f000 feed 	bl	800adec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a012:	4b0d      	ldr	r3, [pc, #52]	@ (800a048 <prvAddNewTaskToReadyList+0xc0>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00e      	beq.n	800a038 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a01a:	4b0a      	ldr	r3, [pc, #40]	@ (800a044 <prvAddNewTaskToReadyList+0xbc>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a024:	429a      	cmp	r2, r3
 800a026:	d207      	bcs.n	800a038 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a028:	4b0b      	ldr	r3, [pc, #44]	@ (800a058 <prvAddNewTaskToReadyList+0xd0>)
 800a02a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a038:	bf00      	nop
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20000948 	.word	0x20000948
 800a044:	20000848 	.word	0x20000848
 800a048:	20000954 	.word	0x20000954
 800a04c:	20000964 	.word	0x20000964
 800a050:	20000950 	.word	0x20000950
 800a054:	2000084c 	.word	0x2000084c
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a064:	2300      	movs	r3, #0
 800a066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d018      	beq.n	800a0a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a06e:	4b14      	ldr	r3, [pc, #80]	@ (800a0c0 <vTaskDelay+0x64>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d00b      	beq.n	800a08e <vTaskDelay+0x32>
	__asm volatile
 800a076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a07a:	f383 8811 	msr	BASEPRI, r3
 800a07e:	f3bf 8f6f 	isb	sy
 800a082:	f3bf 8f4f 	dsb	sy
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
 800a08a:	bf00      	nop
 800a08c:	e7fd      	b.n	800a08a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a08e:	f000 f885 	bl	800a19c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a092:	2100      	movs	r1, #0
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fcdd 	bl	800aa54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a09a:	f000 f88d 	bl	800a1b8 <xTaskResumeAll>
 800a09e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800a0a6:	4b07      	ldr	r3, [pc, #28]	@ (800a0c4 <vTaskDelay+0x68>)
 800a0a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0ac:	601a      	str	r2, [r3, #0]
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0b6:	bf00      	nop
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	20000970 	.word	0x20000970
 800a0c4:	e000ed04 	.word	0xe000ed04

0800a0c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b08a      	sub	sp, #40	@ 0x28
 800a0cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0d6:	463a      	mov	r2, r7
 800a0d8:	1d39      	adds	r1, r7, #4
 800a0da:	f107 0308 	add.w	r3, r7, #8
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7f6 fa0c 	bl	80004fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	68ba      	ldr	r2, [r7, #8]
 800a0ea:	9202      	str	r2, [sp, #8]
 800a0ec:	9301      	str	r3, [sp, #4]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	460a      	mov	r2, r1
 800a0f6:	4921      	ldr	r1, [pc, #132]	@ (800a17c <vTaskStartScheduler+0xb4>)
 800a0f8:	4821      	ldr	r0, [pc, #132]	@ (800a180 <vTaskStartScheduler+0xb8>)
 800a0fa:	f7ff fdff 	bl	8009cfc <xTaskCreateStatic>
 800a0fe:	4603      	mov	r3, r0
 800a100:	4a20      	ldr	r2, [pc, #128]	@ (800a184 <vTaskStartScheduler+0xbc>)
 800a102:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a104:	4b1f      	ldr	r3, [pc, #124]	@ (800a184 <vTaskStartScheduler+0xbc>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a10c:	2301      	movs	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e001      	b.n	800a116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a112:	2300      	movs	r3, #0
 800a114:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d11b      	bne.n	800a154 <vTaskStartScheduler+0x8c>
	__asm volatile
 800a11c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	613b      	str	r3, [r7, #16]
}
 800a12e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a130:	4b15      	ldr	r3, [pc, #84]	@ (800a188 <vTaskStartScheduler+0xc0>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	334c      	adds	r3, #76	@ 0x4c
 800a136:	4a15      	ldr	r2, [pc, #84]	@ (800a18c <vTaskStartScheduler+0xc4>)
 800a138:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a13a:	4b15      	ldr	r3, [pc, #84]	@ (800a190 <vTaskStartScheduler+0xc8>)
 800a13c:	f04f 32ff 	mov.w	r2, #4294967295
 800a140:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a142:	4b14      	ldr	r3, [pc, #80]	@ (800a194 <vTaskStartScheduler+0xcc>)
 800a144:	2201      	movs	r2, #1
 800a146:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a148:	4b13      	ldr	r3, [pc, #76]	@ (800a198 <vTaskStartScheduler+0xd0>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a14e:	f000 fd77 	bl	800ac40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a152:	e00f      	b.n	800a174 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15a:	d10b      	bne.n	800a174 <vTaskStartScheduler+0xac>
	__asm volatile
 800a15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a160:	f383 8811 	msr	BASEPRI, r3
 800a164:	f3bf 8f6f 	isb	sy
 800a168:	f3bf 8f4f 	dsb	sy
 800a16c:	60fb      	str	r3, [r7, #12]
}
 800a16e:	bf00      	nop
 800a170:	bf00      	nop
 800a172:	e7fd      	b.n	800a170 <vTaskStartScheduler+0xa8>
}
 800a174:	bf00      	nop
 800a176:	3718      	adds	r7, #24
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	0800bdb0 	.word	0x0800bdb0
 800a180:	0800a751 	.word	0x0800a751
 800a184:	2000096c 	.word	0x2000096c
 800a188:	20000848 	.word	0x20000848
 800a18c:	20000030 	.word	0x20000030
 800a190:	20000968 	.word	0x20000968
 800a194:	20000954 	.word	0x20000954
 800a198:	2000094c 	.word	0x2000094c

0800a19c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a1a0:	4b04      	ldr	r3, [pc, #16]	@ (800a1b4 <vTaskSuspendAll+0x18>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	4a03      	ldr	r2, [pc, #12]	@ (800a1b4 <vTaskSuspendAll+0x18>)
 800a1a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a1aa:	bf00      	nop
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	20000970 	.word	0x20000970

0800a1b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1c6:	4b42      	ldr	r3, [pc, #264]	@ (800a2d0 <xTaskResumeAll+0x118>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <xTaskResumeAll+0x2e>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	603b      	str	r3, [r7, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1e6:	f000 fdcf 	bl	800ad88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1ea:	4b39      	ldr	r3, [pc, #228]	@ (800a2d0 <xTaskResumeAll+0x118>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	4a37      	ldr	r2, [pc, #220]	@ (800a2d0 <xTaskResumeAll+0x118>)
 800a1f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f4:	4b36      	ldr	r3, [pc, #216]	@ (800a2d0 <xTaskResumeAll+0x118>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d161      	bne.n	800a2c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1fc:	4b35      	ldr	r3, [pc, #212]	@ (800a2d4 <xTaskResumeAll+0x11c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d05d      	beq.n	800a2c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a204:	e02e      	b.n	800a264 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a206:	4b34      	ldr	r3, [pc, #208]	@ (800a2d8 <xTaskResumeAll+0x120>)
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	68db      	ldr	r3, [r3, #12]
 800a20c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3318      	adds	r3, #24
 800a212:	4618      	mov	r0, r3
 800a214:	f7fe fff2 	bl	80091fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3304      	adds	r3, #4
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fe ffed 	bl	80091fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a226:	2201      	movs	r2, #1
 800a228:	409a      	lsls	r2, r3
 800a22a:	4b2c      	ldr	r3, [pc, #176]	@ (800a2dc <xTaskResumeAll+0x124>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4313      	orrs	r3, r2
 800a230:	4a2a      	ldr	r2, [pc, #168]	@ (800a2dc <xTaskResumeAll+0x124>)
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a238:	4613      	mov	r3, r2
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	4a27      	ldr	r2, [pc, #156]	@ (800a2e0 <xTaskResumeAll+0x128>)
 800a242:	441a      	add	r2, r3
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	3304      	adds	r3, #4
 800a248:	4619      	mov	r1, r3
 800a24a:	4610      	mov	r0, r2
 800a24c:	f7fe ff79 	bl	8009142 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a254:	4b23      	ldr	r3, [pc, #140]	@ (800a2e4 <xTaskResumeAll+0x12c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d302      	bcc.n	800a264 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a25e:	4b22      	ldr	r3, [pc, #136]	@ (800a2e8 <xTaskResumeAll+0x130>)
 800a260:	2201      	movs	r2, #1
 800a262:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a264:	4b1c      	ldr	r3, [pc, #112]	@ (800a2d8 <xTaskResumeAll+0x120>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1cc      	bne.n	800a206 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a272:	f000 fb29 	bl	800a8c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a276:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ec <xTaskResumeAll+0x134>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d010      	beq.n	800a2a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a282:	f000 f837 	bl	800a2f4 <xTaskIncrementTick>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a28c:	4b16      	ldr	r3, [pc, #88]	@ (800a2e8 <xTaskResumeAll+0x130>)
 800a28e:	2201      	movs	r2, #1
 800a290:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	3b01      	subs	r3, #1
 800a296:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d1f1      	bne.n	800a282 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a29e:	4b13      	ldr	r3, [pc, #76]	@ (800a2ec <xTaskResumeAll+0x134>)
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2a4:	4b10      	ldr	r3, [pc, #64]	@ (800a2e8 <xTaskResumeAll+0x130>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d009      	beq.n	800a2c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b0f      	ldr	r3, [pc, #60]	@ (800a2f0 <xTaskResumeAll+0x138>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2c0:	f000 fd94 	bl	800adec <vPortExitCritical>

	return xAlreadyYielded;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20000970 	.word	0x20000970
 800a2d4:	20000948 	.word	0x20000948
 800a2d8:	20000908 	.word	0x20000908
 800a2dc:	20000950 	.word	0x20000950
 800a2e0:	2000084c 	.word	0x2000084c
 800a2e4:	20000848 	.word	0x20000848
 800a2e8:	2000095c 	.word	0x2000095c
 800a2ec:	20000958 	.word	0x20000958
 800a2f0:	e000ed04 	.word	0xe000ed04

0800a2f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b086      	sub	sp, #24
 800a2f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2fe:	4b4f      	ldr	r3, [pc, #316]	@ (800a43c <xTaskIncrementTick+0x148>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	f040 808f 	bne.w	800a426 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a308:	4b4d      	ldr	r3, [pc, #308]	@ (800a440 <xTaskIncrementTick+0x14c>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	3301      	adds	r3, #1
 800a30e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a310:	4a4b      	ldr	r2, [pc, #300]	@ (800a440 <xTaskIncrementTick+0x14c>)
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d121      	bne.n	800a360 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a31c:	4b49      	ldr	r3, [pc, #292]	@ (800a444 <xTaskIncrementTick+0x150>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00b      	beq.n	800a33e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	603b      	str	r3, [r7, #0]
}
 800a338:	bf00      	nop
 800a33a:	bf00      	nop
 800a33c:	e7fd      	b.n	800a33a <xTaskIncrementTick+0x46>
 800a33e:	4b41      	ldr	r3, [pc, #260]	@ (800a444 <xTaskIncrementTick+0x150>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	4b40      	ldr	r3, [pc, #256]	@ (800a448 <xTaskIncrementTick+0x154>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a3e      	ldr	r2, [pc, #248]	@ (800a444 <xTaskIncrementTick+0x150>)
 800a34a:	6013      	str	r3, [r2, #0]
 800a34c:	4a3e      	ldr	r2, [pc, #248]	@ (800a448 <xTaskIncrementTick+0x154>)
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	4b3e      	ldr	r3, [pc, #248]	@ (800a44c <xTaskIncrementTick+0x158>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3301      	adds	r3, #1
 800a358:	4a3c      	ldr	r2, [pc, #240]	@ (800a44c <xTaskIncrementTick+0x158>)
 800a35a:	6013      	str	r3, [r2, #0]
 800a35c:	f000 fab4 	bl	800a8c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a360:	4b3b      	ldr	r3, [pc, #236]	@ (800a450 <xTaskIncrementTick+0x15c>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	693a      	ldr	r2, [r7, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	d348      	bcc.n	800a3fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a36a:	4b36      	ldr	r3, [pc, #216]	@ (800a444 <xTaskIncrementTick+0x150>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d104      	bne.n	800a37e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a374:	4b36      	ldr	r3, [pc, #216]	@ (800a450 <xTaskIncrementTick+0x15c>)
 800a376:	f04f 32ff 	mov.w	r2, #4294967295
 800a37a:	601a      	str	r2, [r3, #0]
					break;
 800a37c:	e03e      	b.n	800a3fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a37e:	4b31      	ldr	r3, [pc, #196]	@ (800a444 <xTaskIncrementTick+0x150>)
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	429a      	cmp	r2, r3
 800a394:	d203      	bcs.n	800a39e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a396:	4a2e      	ldr	r2, [pc, #184]	@ (800a450 <xTaskIncrementTick+0x15c>)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a39c:	e02e      	b.n	800a3fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	3304      	adds	r3, #4
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	f7fe ff2a 	bl	80091fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d004      	beq.n	800a3ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	3318      	adds	r3, #24
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7fe ff21 	bl	80091fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3be:	2201      	movs	r2, #1
 800a3c0:	409a      	lsls	r2, r3
 800a3c2:	4b24      	ldr	r3, [pc, #144]	@ (800a454 <xTaskIncrementTick+0x160>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	4a22      	ldr	r2, [pc, #136]	@ (800a454 <xTaskIncrementTick+0x160>)
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	4a1f      	ldr	r2, [pc, #124]	@ (800a458 <xTaskIncrementTick+0x164>)
 800a3da:	441a      	add	r2, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	3304      	adds	r3, #4
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	4610      	mov	r0, r2
 800a3e4:	f7fe fead 	bl	8009142 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3ec:	4b1b      	ldr	r3, [pc, #108]	@ (800a45c <xTaskIncrementTick+0x168>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3b9      	bcc.n	800a36a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3fa:	e7b6      	b.n	800a36a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a3fc:	4b17      	ldr	r3, [pc, #92]	@ (800a45c <xTaskIncrementTick+0x168>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a402:	4915      	ldr	r1, [pc, #84]	@ (800a458 <xTaskIncrementTick+0x164>)
 800a404:	4613      	mov	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	440b      	add	r3, r1
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b01      	cmp	r3, #1
 800a412:	d901      	bls.n	800a418 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a414:	2301      	movs	r3, #1
 800a416:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a418:	4b11      	ldr	r3, [pc, #68]	@ (800a460 <xTaskIncrementTick+0x16c>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d007      	beq.n	800a430 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e004      	b.n	800a430 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a426:	4b0f      	ldr	r3, [pc, #60]	@ (800a464 <xTaskIncrementTick+0x170>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	3301      	adds	r3, #1
 800a42c:	4a0d      	ldr	r2, [pc, #52]	@ (800a464 <xTaskIncrementTick+0x170>)
 800a42e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a430:	697b      	ldr	r3, [r7, #20]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	20000970 	.word	0x20000970
 800a440:	2000094c 	.word	0x2000094c
 800a444:	20000900 	.word	0x20000900
 800a448:	20000904 	.word	0x20000904
 800a44c:	20000960 	.word	0x20000960
 800a450:	20000968 	.word	0x20000968
 800a454:	20000950 	.word	0x20000950
 800a458:	2000084c 	.word	0x2000084c
 800a45c:	20000848 	.word	0x20000848
 800a460:	2000095c 	.word	0x2000095c
 800a464:	20000958 	.word	0x20000958

0800a468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a468:	b480      	push	{r7}
 800a46a:	b087      	sub	sp, #28
 800a46c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a46e:	4b2a      	ldr	r3, [pc, #168]	@ (800a518 <vTaskSwitchContext+0xb0>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a476:	4b29      	ldr	r3, [pc, #164]	@ (800a51c <vTaskSwitchContext+0xb4>)
 800a478:	2201      	movs	r2, #1
 800a47a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a47c:	e045      	b.n	800a50a <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 800a47e:	4b27      	ldr	r3, [pc, #156]	@ (800a51c <vTaskSwitchContext+0xb4>)
 800a480:	2200      	movs	r2, #0
 800a482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a484:	4b26      	ldr	r3, [pc, #152]	@ (800a520 <vTaskSwitchContext+0xb8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	fab3 f383 	clz	r3, r3
 800a490:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	f1c3 031f 	rsb	r3, r3, #31
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	4922      	ldr	r1, [pc, #136]	@ (800a524 <vTaskSwitchContext+0xbc>)
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d10b      	bne.n	800a4c6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b2:	f383 8811 	msr	BASEPRI, r3
 800a4b6:	f3bf 8f6f 	isb	sy
 800a4ba:	f3bf 8f4f 	dsb	sy
 800a4be:	607b      	str	r3, [r7, #4]
}
 800a4c0:	bf00      	nop
 800a4c2:	bf00      	nop
 800a4c4:	e7fd      	b.n	800a4c2 <vTaskSwitchContext+0x5a>
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	4413      	add	r3, r2
 800a4ce:	009b      	lsls	r3, r3, #2
 800a4d0:	4a14      	ldr	r2, [pc, #80]	@ (800a524 <vTaskSwitchContext+0xbc>)
 800a4d2:	4413      	add	r3, r2
 800a4d4:	613b      	str	r3, [r7, #16]
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	605a      	str	r2, [r3, #4]
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	685a      	ldr	r2, [r3, #4]
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	3308      	adds	r3, #8
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d104      	bne.n	800a4f6 <vTaskSwitchContext+0x8e>
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	685a      	ldr	r2, [r3, #4]
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	605a      	str	r2, [r3, #4]
 800a4f6:	693b      	ldr	r3, [r7, #16]
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	68db      	ldr	r3, [r3, #12]
 800a4fc:	4a0a      	ldr	r2, [pc, #40]	@ (800a528 <vTaskSwitchContext+0xc0>)
 800a4fe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a500:	4b09      	ldr	r3, [pc, #36]	@ (800a528 <vTaskSwitchContext+0xc0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	334c      	adds	r3, #76	@ 0x4c
 800a506:	4a09      	ldr	r2, [pc, #36]	@ (800a52c <vTaskSwitchContext+0xc4>)
 800a508:	6013      	str	r3, [r2, #0]
}
 800a50a:	bf00      	nop
 800a50c:	371c      	adds	r7, #28
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	20000970 	.word	0x20000970
 800a51c:	2000095c 	.word	0x2000095c
 800a520:	20000950 	.word	0x20000950
 800a524:	2000084c 	.word	0x2000084c
 800a528:	20000848 	.word	0x20000848
 800a52c:	20000030 	.word	0x20000030

0800a530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d10b      	bne.n	800a558 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	60fb      	str	r3, [r7, #12]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a558:	4b07      	ldr	r3, [pc, #28]	@ (800a578 <vTaskPlaceOnEventList+0x48>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3318      	adds	r3, #24
 800a55e:	4619      	mov	r1, r3
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f7fe fe12 	bl	800918a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a566:	2101      	movs	r1, #1
 800a568:	6838      	ldr	r0, [r7, #0]
 800a56a:	f000 fa73 	bl	800aa54 <prvAddCurrentTaskToDelayedList>
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	20000848 	.word	0x20000848

0800a57c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d10b      	bne.n	800a5aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a596:	f383 8811 	msr	BASEPRI, r3
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	f3bf 8f4f 	dsb	sy
 800a5a2:	60fb      	str	r3, [r7, #12]
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop
 800a5a8:	e7fd      	b.n	800a5a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	3318      	adds	r3, #24
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fe24 	bl	80091fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5b4:	4b1d      	ldr	r3, [pc, #116]	@ (800a62c <xTaskRemoveFromEventList+0xb0>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d11c      	bne.n	800a5f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	3304      	adds	r3, #4
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	f7fe fe1b 	bl	80091fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	409a      	lsls	r2, r3
 800a5ce:	4b18      	ldr	r3, [pc, #96]	@ (800a630 <xTaskRemoveFromEventList+0xb4>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	4a16      	ldr	r2, [pc, #88]	@ (800a630 <xTaskRemoveFromEventList+0xb4>)
 800a5d6:	6013      	str	r3, [r2, #0]
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5dc:	4613      	mov	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	4413      	add	r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4a13      	ldr	r2, [pc, #76]	@ (800a634 <xTaskRemoveFromEventList+0xb8>)
 800a5e6:	441a      	add	r2, r3
 800a5e8:	693b      	ldr	r3, [r7, #16]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4610      	mov	r0, r2
 800a5f0:	f7fe fda7 	bl	8009142 <vListInsertEnd>
 800a5f4:	e005      	b.n	800a602 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	3318      	adds	r3, #24
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	480e      	ldr	r0, [pc, #56]	@ (800a638 <xTaskRemoveFromEventList+0xbc>)
 800a5fe:	f7fe fda0 	bl	8009142 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a606:	4b0d      	ldr	r3, [pc, #52]	@ (800a63c <xTaskRemoveFromEventList+0xc0>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d905      	bls.n	800a61c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a610:	2301      	movs	r3, #1
 800a612:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a614:	4b0a      	ldr	r3, [pc, #40]	@ (800a640 <xTaskRemoveFromEventList+0xc4>)
 800a616:	2201      	movs	r2, #1
 800a618:	601a      	str	r2, [r3, #0]
 800a61a:	e001      	b.n	800a620 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a61c:	2300      	movs	r3, #0
 800a61e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a620:	697b      	ldr	r3, [r7, #20]
}
 800a622:	4618      	mov	r0, r3
 800a624:	3718      	adds	r7, #24
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000970 	.word	0x20000970
 800a630:	20000950 	.word	0x20000950
 800a634:	2000084c 	.word	0x2000084c
 800a638:	20000908 	.word	0x20000908
 800a63c:	20000848 	.word	0x20000848
 800a640:	2000095c 	.word	0x2000095c

0800a644 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a64c:	4b06      	ldr	r3, [pc, #24]	@ (800a668 <vTaskInternalSetTimeOutState+0x24>)
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a654:	4b05      	ldr	r3, [pc, #20]	@ (800a66c <vTaskInternalSetTimeOutState+0x28>)
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	605a      	str	r2, [r3, #4]
}
 800a65c:	bf00      	nop
 800a65e:	370c      	adds	r7, #12
 800a660:	46bd      	mov	sp, r7
 800a662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a666:	4770      	bx	lr
 800a668:	20000960 	.word	0x20000960
 800a66c:	2000094c 	.word	0x2000094c

0800a670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b088      	sub	sp, #32
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10b      	bne.n	800a698 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	613b      	str	r3, [r7, #16]
}
 800a692:	bf00      	nop
 800a694:	bf00      	nop
 800a696:	e7fd      	b.n	800a694 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a69e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a2:	f383 8811 	msr	BASEPRI, r3
 800a6a6:	f3bf 8f6f 	isb	sy
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	60fb      	str	r3, [r7, #12]
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	e7fd      	b.n	800a6b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a6b6:	f000 fb67 	bl	800ad88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	@ (800a730 <xTaskCheckForTimeOut+0xc0>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	69ba      	ldr	r2, [r7, #24]
 800a6c6:	1ad3      	subs	r3, r2, r3
 800a6c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d2:	d102      	bne.n	800a6da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61fb      	str	r3, [r7, #28]
 800a6d8:	e023      	b.n	800a722 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	4b15      	ldr	r3, [pc, #84]	@ (800a734 <xTaskCheckForTimeOut+0xc4>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d007      	beq.n	800a6f6 <xTaskCheckForTimeOut+0x86>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	69ba      	ldr	r2, [r7, #24]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d302      	bcc.n	800a6f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	61fb      	str	r3, [r7, #28]
 800a6f4:	e015      	b.n	800a722 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d20b      	bcs.n	800a718 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	1ad2      	subs	r2, r2, r3
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f7ff ff99 	bl	800a644 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a712:	2300      	movs	r3, #0
 800a714:	61fb      	str	r3, [r7, #28]
 800a716:	e004      	b.n	800a722 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a71e:	2301      	movs	r3, #1
 800a720:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a722:	f000 fb63 	bl	800adec <vPortExitCritical>

	return xReturn;
 800a726:	69fb      	ldr	r3, [r7, #28]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3720      	adds	r7, #32
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	2000094c 	.word	0x2000094c
 800a734:	20000960 	.word	0x20000960

0800a738 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a738:	b480      	push	{r7}
 800a73a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a73c:	4b03      	ldr	r3, [pc, #12]	@ (800a74c <vTaskMissedYield+0x14>)
 800a73e:	2201      	movs	r2, #1
 800a740:	601a      	str	r2, [r3, #0]
}
 800a742:	bf00      	nop
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	2000095c 	.word	0x2000095c

0800a750 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a758:	f000 f852 	bl	800a800 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a75c:	4b06      	ldr	r3, [pc, #24]	@ (800a778 <prvIdleTask+0x28>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d9f9      	bls.n	800a758 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a764:	4b05      	ldr	r3, [pc, #20]	@ (800a77c <prvIdleTask+0x2c>)
 800a766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a774:	e7f0      	b.n	800a758 <prvIdleTask+0x8>
 800a776:	bf00      	nop
 800a778:	2000084c 	.word	0x2000084c
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a786:	2300      	movs	r3, #0
 800a788:	607b      	str	r3, [r7, #4]
 800a78a:	e00c      	b.n	800a7a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a78c:	687a      	ldr	r2, [r7, #4]
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4a12      	ldr	r2, [pc, #72]	@ (800a7e0 <prvInitialiseTaskLists+0x60>)
 800a798:	4413      	add	r3, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7fe fca4 	bl	80090e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	607b      	str	r3, [r7, #4]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b06      	cmp	r3, #6
 800a7aa:	d9ef      	bls.n	800a78c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a7ac:	480d      	ldr	r0, [pc, #52]	@ (800a7e4 <prvInitialiseTaskLists+0x64>)
 800a7ae:	f7fe fc9b 	bl	80090e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a7b2:	480d      	ldr	r0, [pc, #52]	@ (800a7e8 <prvInitialiseTaskLists+0x68>)
 800a7b4:	f7fe fc98 	bl	80090e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a7b8:	480c      	ldr	r0, [pc, #48]	@ (800a7ec <prvInitialiseTaskLists+0x6c>)
 800a7ba:	f7fe fc95 	bl	80090e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a7be:	480c      	ldr	r0, [pc, #48]	@ (800a7f0 <prvInitialiseTaskLists+0x70>)
 800a7c0:	f7fe fc92 	bl	80090e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a7c4:	480b      	ldr	r0, [pc, #44]	@ (800a7f4 <prvInitialiseTaskLists+0x74>)
 800a7c6:	f7fe fc8f 	bl	80090e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a7ca:	4b0b      	ldr	r3, [pc, #44]	@ (800a7f8 <prvInitialiseTaskLists+0x78>)
 800a7cc:	4a05      	ldr	r2, [pc, #20]	@ (800a7e4 <prvInitialiseTaskLists+0x64>)
 800a7ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a7d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a7fc <prvInitialiseTaskLists+0x7c>)
 800a7d2:	4a05      	ldr	r2, [pc, #20]	@ (800a7e8 <prvInitialiseTaskLists+0x68>)
 800a7d4:	601a      	str	r2, [r3, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	3708      	adds	r7, #8
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	2000084c 	.word	0x2000084c
 800a7e4:	200008d8 	.word	0x200008d8
 800a7e8:	200008ec 	.word	0x200008ec
 800a7ec:	20000908 	.word	0x20000908
 800a7f0:	2000091c 	.word	0x2000091c
 800a7f4:	20000934 	.word	0x20000934
 800a7f8:	20000900 	.word	0x20000900
 800a7fc:	20000904 	.word	0x20000904

0800a800 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a806:	e019      	b.n	800a83c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a808:	f000 fabe 	bl	800ad88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a80c:	4b10      	ldr	r3, [pc, #64]	@ (800a850 <prvCheckTasksWaitingTermination+0x50>)
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3304      	adds	r3, #4
 800a818:	4618      	mov	r0, r3
 800a81a:	f7fe fcef 	bl	80091fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a81e:	4b0d      	ldr	r3, [pc, #52]	@ (800a854 <prvCheckTasksWaitingTermination+0x54>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	3b01      	subs	r3, #1
 800a824:	4a0b      	ldr	r2, [pc, #44]	@ (800a854 <prvCheckTasksWaitingTermination+0x54>)
 800a826:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a828:	4b0b      	ldr	r3, [pc, #44]	@ (800a858 <prvCheckTasksWaitingTermination+0x58>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	4a0a      	ldr	r2, [pc, #40]	@ (800a858 <prvCheckTasksWaitingTermination+0x58>)
 800a830:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a832:	f000 fadb 	bl	800adec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 f810 	bl	800a85c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a83c:	4b06      	ldr	r3, [pc, #24]	@ (800a858 <prvCheckTasksWaitingTermination+0x58>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1e1      	bne.n	800a808 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	3708      	adds	r7, #8
 800a84a:	46bd      	mov	sp, r7
 800a84c:	bd80      	pop	{r7, pc}
 800a84e:	bf00      	nop
 800a850:	2000091c 	.word	0x2000091c
 800a854:	20000948 	.word	0x20000948
 800a858:	20000930 	.word	0x20000930

0800a85c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b084      	sub	sp, #16
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	334c      	adds	r3, #76	@ 0x4c
 800a868:	4618      	mov	r0, r3
 800a86a:	f001 f967 	bl	800bb3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a874:	2b00      	cmp	r3, #0
 800a876:	d108      	bne.n	800a88a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a87c:	4618      	mov	r0, r3
 800a87e:	f000 fc73 	bl	800b168 <vPortFree>
				vPortFree( pxTCB );
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fc70 	bl	800b168 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a888:	e019      	b.n	800a8be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a890:	2b01      	cmp	r3, #1
 800a892:	d103      	bne.n	800a89c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fc67 	bl	800b168 <vPortFree>
	}
 800a89a:	e010      	b.n	800a8be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d00b      	beq.n	800a8be <prvDeleteTCB+0x62>
	__asm volatile
 800a8a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8aa:	f383 8811 	msr	BASEPRI, r3
 800a8ae:	f3bf 8f6f 	isb	sy
 800a8b2:	f3bf 8f4f 	dsb	sy
 800a8b6:	60fb      	str	r3, [r7, #12]
}
 800a8b8:	bf00      	nop
 800a8ba:	bf00      	nop
 800a8bc:	e7fd      	b.n	800a8ba <prvDeleteTCB+0x5e>
	}
 800a8be:	bf00      	nop
 800a8c0:	3710      	adds	r7, #16
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a8ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a900 <prvResetNextTaskUnblockTime+0x38>)
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d104      	bne.n	800a8e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a8d8:	4b0a      	ldr	r3, [pc, #40]	@ (800a904 <prvResetNextTaskUnblockTime+0x3c>)
 800a8da:	f04f 32ff 	mov.w	r2, #4294967295
 800a8de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a8e0:	e008      	b.n	800a8f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8e2:	4b07      	ldr	r3, [pc, #28]	@ (800a900 <prvResetNextTaskUnblockTime+0x38>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	4a04      	ldr	r2, [pc, #16]	@ (800a904 <prvResetNextTaskUnblockTime+0x3c>)
 800a8f2:	6013      	str	r3, [r2, #0]
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20000900 	.word	0x20000900
 800a904:	20000968 	.word	0x20000968

0800a908 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a90e:	4b0b      	ldr	r3, [pc, #44]	@ (800a93c <xTaskGetSchedulerState+0x34>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a916:	2301      	movs	r3, #1
 800a918:	607b      	str	r3, [r7, #4]
 800a91a:	e008      	b.n	800a92e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a91c:	4b08      	ldr	r3, [pc, #32]	@ (800a940 <xTaskGetSchedulerState+0x38>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a924:	2302      	movs	r3, #2
 800a926:	607b      	str	r3, [r7, #4]
 800a928:	e001      	b.n	800a92e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a92a:	2300      	movs	r3, #0
 800a92c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a92e:	687b      	ldr	r3, [r7, #4]
	}
 800a930:	4618      	mov	r0, r3
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	20000954 	.word	0x20000954
 800a940:	20000970 	.word	0x20000970

0800a944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a944:	b580      	push	{r7, lr}
 800a946:	b086      	sub	sp, #24
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a950:	2300      	movs	r3, #0
 800a952:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d070      	beq.n	800aa3c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a95a:	4b3b      	ldr	r3, [pc, #236]	@ (800aa48 <xTaskPriorityDisinherit+0x104>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	429a      	cmp	r2, r3
 800a962:	d00b      	beq.n	800a97c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	60fb      	str	r3, [r7, #12]
}
 800a976:	bf00      	nop
 800a978:	bf00      	nop
 800a97a:	e7fd      	b.n	800a978 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a980:	2b00      	cmp	r3, #0
 800a982:	d10b      	bne.n	800a99c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	60bb      	str	r3, [r7, #8]
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9a0:	1e5a      	subs	r2, r3, #1
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a9a6:	693b      	ldr	r3, [r7, #16]
 800a9a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d044      	beq.n	800aa3c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d140      	bne.n	800aa3c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fc1c 	bl	80091fc <uxListRemove>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d115      	bne.n	800a9f6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9ce:	491f      	ldr	r1, [pc, #124]	@ (800aa4c <xTaskPriorityDisinherit+0x108>)
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	009b      	lsls	r3, r3, #2
 800a9d8:	440b      	add	r3, r1
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <xTaskPriorityDisinherit+0xb2>
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ea:	43da      	mvns	r2, r3
 800a9ec:	4b18      	ldr	r3, [pc, #96]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	4a17      	ldr	r2, [pc, #92]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800a9f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa02:	f1c3 0207 	rsb	r2, r3, #7
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa0e:	2201      	movs	r2, #1
 800aa10:	409a      	lsls	r2, r3
 800aa12:	4b0f      	ldr	r3, [pc, #60]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	4a0d      	ldr	r2, [pc, #52]	@ (800aa50 <xTaskPriorityDisinherit+0x10c>)
 800aa1a:	6013      	str	r3, [r2, #0]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa20:	4613      	mov	r3, r2
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	4413      	add	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4a08      	ldr	r2, [pc, #32]	@ (800aa4c <xTaskPriorityDisinherit+0x108>)
 800aa2a:	441a      	add	r2, r3
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	3304      	adds	r3, #4
 800aa30:	4619      	mov	r1, r3
 800aa32:	4610      	mov	r0, r2
 800aa34:	f7fe fb85 	bl	8009142 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aa3c:	697b      	ldr	r3, [r7, #20]
	}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3718      	adds	r7, #24
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	20000848 	.word	0x20000848
 800aa4c:	2000084c 	.word	0x2000084c
 800aa50:	20000950 	.word	0x20000950

0800aa54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800aa5e:	4b29      	ldr	r3, [pc, #164]	@ (800ab04 <prvAddCurrentTaskToDelayedList+0xb0>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa64:	4b28      	ldr	r3, [pc, #160]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	3304      	adds	r3, #4
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fbc6 	bl	80091fc <uxListRemove>
 800aa70:	4603      	mov	r3, r0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800aa76:	4b24      	ldr	r3, [pc, #144]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa7c:	2201      	movs	r2, #1
 800aa7e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa82:	43da      	mvns	r2, r3
 800aa84:	4b21      	ldr	r3, [pc, #132]	@ (800ab0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4013      	ands	r3, r2
 800aa8a:	4a20      	ldr	r2, [pc, #128]	@ (800ab0c <prvAddCurrentTaskToDelayedList+0xb8>)
 800aa8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa94:	d10a      	bne.n	800aaac <prvAddCurrentTaskToDelayedList+0x58>
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d007      	beq.n	800aaac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aa9c:	4b1a      	ldr	r3, [pc, #104]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	481a      	ldr	r0, [pc, #104]	@ (800ab10 <prvAddCurrentTaskToDelayedList+0xbc>)
 800aaa6:	f7fe fb4c 	bl	8009142 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800aaaa:	e026      	b.n	800aafa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4413      	add	r3, r2
 800aab2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800aab4:	4b14      	ldr	r3, [pc, #80]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68ba      	ldr	r2, [r7, #8]
 800aaba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d209      	bcs.n	800aad8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aac4:	4b13      	ldr	r3, [pc, #76]	@ (800ab14 <prvAddCurrentTaskToDelayedList+0xc0>)
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	3304      	adds	r3, #4
 800aace:	4619      	mov	r1, r3
 800aad0:	4610      	mov	r0, r2
 800aad2:	f7fe fb5a 	bl	800918a <vListInsert>
}
 800aad6:	e010      	b.n	800aafa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aad8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab18 <prvAddCurrentTaskToDelayedList+0xc4>)
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	4b0a      	ldr	r3, [pc, #40]	@ (800ab08 <prvAddCurrentTaskToDelayedList+0xb4>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	3304      	adds	r3, #4
 800aae2:	4619      	mov	r1, r3
 800aae4:	4610      	mov	r0, r2
 800aae6:	f7fe fb50 	bl	800918a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aaea:	4b0c      	ldr	r3, [pc, #48]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	429a      	cmp	r2, r3
 800aaf2:	d202      	bcs.n	800aafa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800aaf4:	4a09      	ldr	r2, [pc, #36]	@ (800ab1c <prvAddCurrentTaskToDelayedList+0xc8>)
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	6013      	str	r3, [r2, #0]
}
 800aafa:	bf00      	nop
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	2000094c 	.word	0x2000094c
 800ab08:	20000848 	.word	0x20000848
 800ab0c:	20000950 	.word	0x20000950
 800ab10:	20000934 	.word	0x20000934
 800ab14:	20000904 	.word	0x20000904
 800ab18:	20000900 	.word	0x20000900
 800ab1c:	20000968 	.word	0x20000968

0800ab20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3b04      	subs	r3, #4
 800ab30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ab38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3b04      	subs	r3, #4
 800ab3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f023 0201 	bic.w	r2, r3, #1
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	3b04      	subs	r3, #4
 800ab4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ab50:	4a0c      	ldr	r2, [pc, #48]	@ (800ab84 <pxPortInitialiseStack+0x64>)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3b14      	subs	r3, #20
 800ab5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	3b04      	subs	r3, #4
 800ab66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f06f 0202 	mvn.w	r2, #2
 800ab6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	3b20      	subs	r3, #32
 800ab74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ab76:	68fb      	ldr	r3, [r7, #12]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	4770      	bx	lr
 800ab84:	0800ab89 	.word	0x0800ab89

0800ab88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ab92:	4b13      	ldr	r3, [pc, #76]	@ (800abe0 <prvTaskExitError+0x58>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9a:	d00b      	beq.n	800abb4 <prvTaskExitError+0x2c>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	60fb      	str	r3, [r7, #12]
}
 800abae:	bf00      	nop
 800abb0:	bf00      	nop
 800abb2:	e7fd      	b.n	800abb0 <prvTaskExitError+0x28>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	60bb      	str	r3, [r7, #8]
}
 800abc6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800abc8:	bf00      	nop
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d0fc      	beq.n	800abca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800abd0:	bf00      	nop
 800abd2:	bf00      	nop
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	2000002c 	.word	0x2000002c
	...

0800abf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800abf0:	4b07      	ldr	r3, [pc, #28]	@ (800ac10 <pxCurrentTCBConst2>)
 800abf2:	6819      	ldr	r1, [r3, #0]
 800abf4:	6808      	ldr	r0, [r1, #0]
 800abf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abfa:	f380 8809 	msr	PSP, r0
 800abfe:	f3bf 8f6f 	isb	sy
 800ac02:	f04f 0000 	mov.w	r0, #0
 800ac06:	f380 8811 	msr	BASEPRI, r0
 800ac0a:	4770      	bx	lr
 800ac0c:	f3af 8000 	nop.w

0800ac10 <pxCurrentTCBConst2>:
 800ac10:	20000848 	.word	0x20000848
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac14:	bf00      	nop
 800ac16:	bf00      	nop

0800ac18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac18:	4808      	ldr	r0, [pc, #32]	@ (800ac3c <prvPortStartFirstTask+0x24>)
 800ac1a:	6800      	ldr	r0, [r0, #0]
 800ac1c:	6800      	ldr	r0, [r0, #0]
 800ac1e:	f380 8808 	msr	MSP, r0
 800ac22:	f04f 0000 	mov.w	r0, #0
 800ac26:	f380 8814 	msr	CONTROL, r0
 800ac2a:	b662      	cpsie	i
 800ac2c:	b661      	cpsie	f
 800ac2e:	f3bf 8f4f 	dsb	sy
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	df00      	svc	0
 800ac38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac3a:	bf00      	nop
 800ac3c:	e000ed08 	.word	0xe000ed08

0800ac40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b086      	sub	sp, #24
 800ac44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac46:	4b47      	ldr	r3, [pc, #284]	@ (800ad64 <xPortStartScheduler+0x124>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a47      	ldr	r2, [pc, #284]	@ (800ad68 <xPortStartScheduler+0x128>)
 800ac4c:	4293      	cmp	r3, r2
 800ac4e:	d10b      	bne.n	800ac68 <xPortStartScheduler+0x28>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	60fb      	str	r3, [r7, #12]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ac68:	4b3e      	ldr	r3, [pc, #248]	@ (800ad64 <xPortStartScheduler+0x124>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	4a3f      	ldr	r2, [pc, #252]	@ (800ad6c <xPortStartScheduler+0x12c>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d10b      	bne.n	800ac8a <xPortStartScheduler+0x4a>
	__asm volatile
 800ac72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac76:	f383 8811 	msr	BASEPRI, r3
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	613b      	str	r3, [r7, #16]
}
 800ac84:	bf00      	nop
 800ac86:	bf00      	nop
 800ac88:	e7fd      	b.n	800ac86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ac8a:	4b39      	ldr	r3, [pc, #228]	@ (800ad70 <xPortStartScheduler+0x130>)
 800ac8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	22ff      	movs	r2, #255	@ 0xff
 800ac9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800acac:	b2da      	uxtb	r2, r3
 800acae:	4b31      	ldr	r3, [pc, #196]	@ (800ad74 <xPortStartScheduler+0x134>)
 800acb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acb2:	4b31      	ldr	r3, [pc, #196]	@ (800ad78 <xPortStartScheduler+0x138>)
 800acb4:	2207      	movs	r2, #7
 800acb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acb8:	e009      	b.n	800acce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800acba:	4b2f      	ldr	r3, [pc, #188]	@ (800ad78 <xPortStartScheduler+0x138>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	3b01      	subs	r3, #1
 800acc0:	4a2d      	ldr	r2, [pc, #180]	@ (800ad78 <xPortStartScheduler+0x138>)
 800acc2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800acc4:	78fb      	ldrb	r3, [r7, #3]
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	005b      	lsls	r3, r3, #1
 800acca:	b2db      	uxtb	r3, r3
 800accc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800acce:	78fb      	ldrb	r3, [r7, #3]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acd6:	2b80      	cmp	r3, #128	@ 0x80
 800acd8:	d0ef      	beq.n	800acba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800acda:	4b27      	ldr	r3, [pc, #156]	@ (800ad78 <xPortStartScheduler+0x138>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f1c3 0307 	rsb	r3, r3, #7
 800ace2:	2b04      	cmp	r3, #4
 800ace4:	d00b      	beq.n	800acfe <xPortStartScheduler+0xbe>
	__asm volatile
 800ace6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acea:	f383 8811 	msr	BASEPRI, r3
 800acee:	f3bf 8f6f 	isb	sy
 800acf2:	f3bf 8f4f 	dsb	sy
 800acf6:	60bb      	str	r3, [r7, #8]
}
 800acf8:	bf00      	nop
 800acfa:	bf00      	nop
 800acfc:	e7fd      	b.n	800acfa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800acfe:	4b1e      	ldr	r3, [pc, #120]	@ (800ad78 <xPortStartScheduler+0x138>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	021b      	lsls	r3, r3, #8
 800ad04:	4a1c      	ldr	r2, [pc, #112]	@ (800ad78 <xPortStartScheduler+0x138>)
 800ad06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad08:	4b1b      	ldr	r3, [pc, #108]	@ (800ad78 <xPortStartScheduler+0x138>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ad10:	4a19      	ldr	r2, [pc, #100]	@ (800ad78 <xPortStartScheduler+0x138>)
 800ad12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	b2da      	uxtb	r2, r3
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad1c:	4b17      	ldr	r3, [pc, #92]	@ (800ad7c <xPortStartScheduler+0x13c>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a16      	ldr	r2, [pc, #88]	@ (800ad7c <xPortStartScheduler+0x13c>)
 800ad22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ad26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad28:	4b14      	ldr	r3, [pc, #80]	@ (800ad7c <xPortStartScheduler+0x13c>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a13      	ldr	r2, [pc, #76]	@ (800ad7c <xPortStartScheduler+0x13c>)
 800ad2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ad32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad34:	f000 f8da 	bl	800aeec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad38:	4b11      	ldr	r3, [pc, #68]	@ (800ad80 <xPortStartScheduler+0x140>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad3e:	f000 f8f9 	bl	800af34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad42:	4b10      	ldr	r3, [pc, #64]	@ (800ad84 <xPortStartScheduler+0x144>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4a0f      	ldr	r2, [pc, #60]	@ (800ad84 <xPortStartScheduler+0x144>)
 800ad48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ad4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad4e:	f7ff ff63 	bl	800ac18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad52:	f7ff fb89 	bl	800a468 <vTaskSwitchContext>
	prvTaskExitError();
 800ad56:	f7ff ff17 	bl	800ab88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3718      	adds	r7, #24
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	e000ed00 	.word	0xe000ed00
 800ad68:	410fc271 	.word	0x410fc271
 800ad6c:	410fc270 	.word	0x410fc270
 800ad70:	e000e400 	.word	0xe000e400
 800ad74:	20000974 	.word	0x20000974
 800ad78:	20000978 	.word	0x20000978
 800ad7c:	e000ed20 	.word	0xe000ed20
 800ad80:	2000002c 	.word	0x2000002c
 800ad84:	e000ef34 	.word	0xe000ef34

0800ad88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	607b      	str	r3, [r7, #4]
}
 800ada0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ada2:	4b10      	ldr	r3, [pc, #64]	@ (800ade4 <vPortEnterCritical+0x5c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a0e      	ldr	r2, [pc, #56]	@ (800ade4 <vPortEnterCritical+0x5c>)
 800adaa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adac:	4b0d      	ldr	r3, [pc, #52]	@ (800ade4 <vPortEnterCritical+0x5c>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d110      	bne.n	800add6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800adb4:	4b0c      	ldr	r3, [pc, #48]	@ (800ade8 <vPortEnterCritical+0x60>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	b2db      	uxtb	r3, r3
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00b      	beq.n	800add6 <vPortEnterCritical+0x4e>
	__asm volatile
 800adbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc2:	f383 8811 	msr	BASEPRI, r3
 800adc6:	f3bf 8f6f 	isb	sy
 800adca:	f3bf 8f4f 	dsb	sy
 800adce:	603b      	str	r3, [r7, #0]
}
 800add0:	bf00      	nop
 800add2:	bf00      	nop
 800add4:	e7fd      	b.n	800add2 <vPortEnterCritical+0x4a>
	}
}
 800add6:	bf00      	nop
 800add8:	370c      	adds	r7, #12
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr
 800ade2:	bf00      	nop
 800ade4:	2000002c 	.word	0x2000002c
 800ade8:	e000ed04 	.word	0xe000ed04

0800adec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800adf2:	4b12      	ldr	r3, [pc, #72]	@ (800ae3c <vPortExitCritical+0x50>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d10b      	bne.n	800ae12 <vPortExitCritical+0x26>
	__asm volatile
 800adfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfe:	f383 8811 	msr	BASEPRI, r3
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	f3bf 8f4f 	dsb	sy
 800ae0a:	607b      	str	r3, [r7, #4]
}
 800ae0c:	bf00      	nop
 800ae0e:	bf00      	nop
 800ae10:	e7fd      	b.n	800ae0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae12:	4b0a      	ldr	r3, [pc, #40]	@ (800ae3c <vPortExitCritical+0x50>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	4a08      	ldr	r2, [pc, #32]	@ (800ae3c <vPortExitCritical+0x50>)
 800ae1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae1c:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <vPortExitCritical+0x50>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d105      	bne.n	800ae30 <vPortExitCritical+0x44>
 800ae24:	2300      	movs	r3, #0
 800ae26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	f383 8811 	msr	BASEPRI, r3
}
 800ae2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae30:	bf00      	nop
 800ae32:	370c      	adds	r7, #12
 800ae34:	46bd      	mov	sp, r7
 800ae36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3a:	4770      	bx	lr
 800ae3c:	2000002c 	.word	0x2000002c

0800ae40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae40:	f3ef 8009 	mrs	r0, PSP
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	4b15      	ldr	r3, [pc, #84]	@ (800aea0 <pxCurrentTCBConst>)
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	f01e 0f10 	tst.w	lr, #16
 800ae50:	bf08      	it	eq
 800ae52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ae56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae5a:	6010      	str	r0, [r2, #0]
 800ae5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ae60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ae64:	f380 8811 	msr	BASEPRI, r0
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	f3bf 8f6f 	isb	sy
 800ae70:	f7ff fafa 	bl	800a468 <vTaskSwitchContext>
 800ae74:	f04f 0000 	mov.w	r0, #0
 800ae78:	f380 8811 	msr	BASEPRI, r0
 800ae7c:	bc09      	pop	{r0, r3}
 800ae7e:	6819      	ldr	r1, [r3, #0]
 800ae80:	6808      	ldr	r0, [r1, #0]
 800ae82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae86:	f01e 0f10 	tst.w	lr, #16
 800ae8a:	bf08      	it	eq
 800ae8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ae90:	f380 8809 	msr	PSP, r0
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	f3af 8000 	nop.w

0800aea0 <pxCurrentTCBConst>:
 800aea0:	20000848 	.word	0x20000848
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aea4:	bf00      	nop
 800aea6:	bf00      	nop

0800aea8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b082      	sub	sp, #8
 800aeac:	af00      	add	r7, sp, #0
	__asm volatile
 800aeae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb2:	f383 8811 	msr	BASEPRI, r3
 800aeb6:	f3bf 8f6f 	isb	sy
 800aeba:	f3bf 8f4f 	dsb	sy
 800aebe:	607b      	str	r3, [r7, #4]
}
 800aec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aec2:	f7ff fa17 	bl	800a2f4 <xTaskIncrementTick>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d003      	beq.n	800aed4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aecc:	4b06      	ldr	r3, [pc, #24]	@ (800aee8 <SysTick_Handler+0x40>)
 800aece:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	2300      	movs	r3, #0
 800aed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	f383 8811 	msr	BASEPRI, r3
}
 800aede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aee0:	bf00      	nop
 800aee2:	3708      	adds	r7, #8
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	e000ed04 	.word	0xe000ed04

0800aeec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aeec:	b480      	push	{r7}
 800aeee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aef0:	4b0b      	ldr	r3, [pc, #44]	@ (800af20 <vPortSetupTimerInterrupt+0x34>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aef6:	4b0b      	ldr	r3, [pc, #44]	@ (800af24 <vPortSetupTimerInterrupt+0x38>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aefc:	4b0a      	ldr	r3, [pc, #40]	@ (800af28 <vPortSetupTimerInterrupt+0x3c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a0a      	ldr	r2, [pc, #40]	@ (800af2c <vPortSetupTimerInterrupt+0x40>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	099b      	lsrs	r3, r3, #6
 800af08:	4a09      	ldr	r2, [pc, #36]	@ (800af30 <vPortSetupTimerInterrupt+0x44>)
 800af0a:	3b01      	subs	r3, #1
 800af0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af0e:	4b04      	ldr	r3, [pc, #16]	@ (800af20 <vPortSetupTimerInterrupt+0x34>)
 800af10:	2207      	movs	r2, #7
 800af12:	601a      	str	r2, [r3, #0]
}
 800af14:	bf00      	nop
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	e000e010 	.word	0xe000e010
 800af24:	e000e018 	.word	0xe000e018
 800af28:	20000000 	.word	0x20000000
 800af2c:	10624dd3 	.word	0x10624dd3
 800af30:	e000e014 	.word	0xe000e014

0800af34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800af44 <vPortEnableVFP+0x10>
 800af38:	6801      	ldr	r1, [r0, #0]
 800af3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800af3e:	6001      	str	r1, [r0, #0]
 800af40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af42:	bf00      	nop
 800af44:	e000ed88 	.word	0xe000ed88

0800af48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af4e:	f3ef 8305 	mrs	r3, IPSR
 800af52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2b0f      	cmp	r3, #15
 800af58:	d915      	bls.n	800af86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800af5a:	4a18      	ldr	r2, [pc, #96]	@ (800afbc <vPortValidateInterruptPriority+0x74>)
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	4413      	add	r3, r2
 800af60:	781b      	ldrb	r3, [r3, #0]
 800af62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800af64:	4b16      	ldr	r3, [pc, #88]	@ (800afc0 <vPortValidateInterruptPriority+0x78>)
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	7afa      	ldrb	r2, [r7, #11]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d20b      	bcs.n	800af86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800af6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af72:	f383 8811 	msr	BASEPRI, r3
 800af76:	f3bf 8f6f 	isb	sy
 800af7a:	f3bf 8f4f 	dsb	sy
 800af7e:	607b      	str	r3, [r7, #4]
}
 800af80:	bf00      	nop
 800af82:	bf00      	nop
 800af84:	e7fd      	b.n	800af82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800af86:	4b0f      	ldr	r3, [pc, #60]	@ (800afc4 <vPortValidateInterruptPriority+0x7c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800af8e:	4b0e      	ldr	r3, [pc, #56]	@ (800afc8 <vPortValidateInterruptPriority+0x80>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	429a      	cmp	r2, r3
 800af94:	d90b      	bls.n	800afae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	603b      	str	r3, [r7, #0]
}
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <vPortValidateInterruptPriority+0x62>
	}
 800afae:	bf00      	nop
 800afb0:	3714      	adds	r7, #20
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	e000e3f0 	.word	0xe000e3f0
 800afc0:	20000974 	.word	0x20000974
 800afc4:	e000ed0c 	.word	0xe000ed0c
 800afc8:	20000978 	.word	0x20000978

0800afcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08a      	sub	sp, #40	@ 0x28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800afd8:	f7ff f8e0 	bl	800a19c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800afdc:	4b5c      	ldr	r3, [pc, #368]	@ (800b150 <pvPortMalloc+0x184>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800afe4:	f000 f924 	bl	800b230 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800afe8:	4b5a      	ldr	r3, [pc, #360]	@ (800b154 <pvPortMalloc+0x188>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4013      	ands	r3, r2
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	f040 8095 	bne.w	800b120 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d01e      	beq.n	800b03a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800affc:	2208      	movs	r2, #8
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	4413      	add	r3, r2
 800b002:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	f003 0307 	and.w	r3, r3, #7
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d015      	beq.n	800b03a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f023 0307 	bic.w	r3, r3, #7
 800b014:	3308      	adds	r3, #8
 800b016:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f003 0307 	and.w	r3, r3, #7
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00b      	beq.n	800b03a <pvPortMalloc+0x6e>
	__asm volatile
 800b022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b026:	f383 8811 	msr	BASEPRI, r3
 800b02a:	f3bf 8f6f 	isb	sy
 800b02e:	f3bf 8f4f 	dsb	sy
 800b032:	617b      	str	r3, [r7, #20]
}
 800b034:	bf00      	nop
 800b036:	bf00      	nop
 800b038:	e7fd      	b.n	800b036 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d06f      	beq.n	800b120 <pvPortMalloc+0x154>
 800b040:	4b45      	ldr	r3, [pc, #276]	@ (800b158 <pvPortMalloc+0x18c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	687a      	ldr	r2, [r7, #4]
 800b046:	429a      	cmp	r2, r3
 800b048:	d86a      	bhi.n	800b120 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b04a:	4b44      	ldr	r3, [pc, #272]	@ (800b15c <pvPortMalloc+0x190>)
 800b04c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b04e:	4b43      	ldr	r3, [pc, #268]	@ (800b15c <pvPortMalloc+0x190>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b054:	e004      	b.n	800b060 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b058:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b05a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	429a      	cmp	r2, r3
 800b068:	d903      	bls.n	800b072 <pvPortMalloc+0xa6>
 800b06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d1f1      	bne.n	800b056 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b072:	4b37      	ldr	r3, [pc, #220]	@ (800b150 <pvPortMalloc+0x184>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b078:	429a      	cmp	r2, r3
 800b07a:	d051      	beq.n	800b120 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b07c:	6a3b      	ldr	r3, [r7, #32]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2208      	movs	r2, #8
 800b082:	4413      	add	r3, r2
 800b084:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b088:	681a      	ldr	r2, [r3, #0]
 800b08a:	6a3b      	ldr	r3, [r7, #32]
 800b08c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b090:	685a      	ldr	r2, [r3, #4]
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	1ad2      	subs	r2, r2, r3
 800b096:	2308      	movs	r3, #8
 800b098:	005b      	lsls	r3, r3, #1
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d920      	bls.n	800b0e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b09e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	f003 0307 	and.w	r3, r3, #7
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d00b      	beq.n	800b0c8 <pvPortMalloc+0xfc>
	__asm volatile
 800b0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	613b      	str	r3, [r7, #16]
}
 800b0c2:	bf00      	nop
 800b0c4:	bf00      	nop
 800b0c6:	e7fd      	b.n	800b0c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b0c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	1ad2      	subs	r2, r2, r3
 800b0d0:	69bb      	ldr	r3, [r7, #24]
 800b0d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b0d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b0da:	69b8      	ldr	r0, [r7, #24]
 800b0dc:	f000 f90a 	bl	800b2f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b158 <pvPortMalloc+0x18c>)
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e6:	685b      	ldr	r3, [r3, #4]
 800b0e8:	1ad3      	subs	r3, r2, r3
 800b0ea:	4a1b      	ldr	r2, [pc, #108]	@ (800b158 <pvPortMalloc+0x18c>)
 800b0ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b0ee:	4b1a      	ldr	r3, [pc, #104]	@ (800b158 <pvPortMalloc+0x18c>)
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b160 <pvPortMalloc+0x194>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d203      	bcs.n	800b102 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b0fa:	4b17      	ldr	r3, [pc, #92]	@ (800b158 <pvPortMalloc+0x18c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4a18      	ldr	r2, [pc, #96]	@ (800b160 <pvPortMalloc+0x194>)
 800b100:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b104:	685a      	ldr	r2, [r3, #4]
 800b106:	4b13      	ldr	r3, [pc, #76]	@ (800b154 <pvPortMalloc+0x188>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	431a      	orrs	r2, r3
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b116:	4b13      	ldr	r3, [pc, #76]	@ (800b164 <pvPortMalloc+0x198>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	4a11      	ldr	r2, [pc, #68]	@ (800b164 <pvPortMalloc+0x198>)
 800b11e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b120:	f7ff f84a 	bl	800a1b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d00b      	beq.n	800b146 <pvPortMalloc+0x17a>
	__asm volatile
 800b12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	60fb      	str	r3, [r7, #12]
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	e7fd      	b.n	800b142 <pvPortMalloc+0x176>
	return pvReturn;
 800b146:	69fb      	ldr	r3, [r7, #28]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3728      	adds	r7, #40	@ 0x28
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}
 800b150:	20004584 	.word	0x20004584
 800b154:	20004598 	.word	0x20004598
 800b158:	20004588 	.word	0x20004588
 800b15c:	2000457c 	.word	0x2000457c
 800b160:	2000458c 	.word	0x2000458c
 800b164:	20004590 	.word	0x20004590

0800b168 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b086      	sub	sp, #24
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d04f      	beq.n	800b21a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b17a:	2308      	movs	r3, #8
 800b17c:	425b      	negs	r3, r3
 800b17e:	697a      	ldr	r2, [r7, #20]
 800b180:	4413      	add	r3, r2
 800b182:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	685a      	ldr	r2, [r3, #4]
 800b18c:	4b25      	ldr	r3, [pc, #148]	@ (800b224 <vPortFree+0xbc>)
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4013      	ands	r3, r2
 800b192:	2b00      	cmp	r3, #0
 800b194:	d10b      	bne.n	800b1ae <vPortFree+0x46>
	__asm volatile
 800b196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b19a:	f383 8811 	msr	BASEPRI, r3
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f3bf 8f4f 	dsb	sy
 800b1a6:	60fb      	str	r3, [r7, #12]
}
 800b1a8:	bf00      	nop
 800b1aa:	bf00      	nop
 800b1ac:	e7fd      	b.n	800b1aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d00b      	beq.n	800b1ce <vPortFree+0x66>
	__asm volatile
 800b1b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	60bb      	str	r3, [r7, #8]
}
 800b1c8:	bf00      	nop
 800b1ca:	bf00      	nop
 800b1cc:	e7fd      	b.n	800b1ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	685a      	ldr	r2, [r3, #4]
 800b1d2:	4b14      	ldr	r3, [pc, #80]	@ (800b224 <vPortFree+0xbc>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4013      	ands	r3, r2
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d01e      	beq.n	800b21a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d11a      	bne.n	800b21a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	685a      	ldr	r2, [r3, #4]
 800b1e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b224 <vPortFree+0xbc>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	401a      	ands	r2, r3
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b1f4:	f7fe ffd2 	bl	800a19c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b228 <vPortFree+0xc0>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4413      	add	r3, r2
 800b202:	4a09      	ldr	r2, [pc, #36]	@ (800b228 <vPortFree+0xc0>)
 800b204:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b206:	6938      	ldr	r0, [r7, #16]
 800b208:	f000 f874 	bl	800b2f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b20c:	4b07      	ldr	r3, [pc, #28]	@ (800b22c <vPortFree+0xc4>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	3301      	adds	r3, #1
 800b212:	4a06      	ldr	r2, [pc, #24]	@ (800b22c <vPortFree+0xc4>)
 800b214:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b216:	f7fe ffcf 	bl	800a1b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b21a:	bf00      	nop
 800b21c:	3718      	adds	r7, #24
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
 800b222:	bf00      	nop
 800b224:	20004598 	.word	0x20004598
 800b228:	20004588 	.word	0x20004588
 800b22c:	20004594 	.word	0x20004594

0800b230 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b230:	b480      	push	{r7}
 800b232:	b085      	sub	sp, #20
 800b234:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b236:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800b23a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b23c:	4b27      	ldr	r3, [pc, #156]	@ (800b2dc <prvHeapInit+0xac>)
 800b23e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f003 0307 	and.w	r3, r3, #7
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00c      	beq.n	800b264 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	3307      	adds	r3, #7
 800b24e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f023 0307 	bic.w	r3, r3, #7
 800b256:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	4a1f      	ldr	r2, [pc, #124]	@ (800b2dc <prvHeapInit+0xac>)
 800b260:	4413      	add	r3, r2
 800b262:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b268:	4a1d      	ldr	r2, [pc, #116]	@ (800b2e0 <prvHeapInit+0xb0>)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b26e:	4b1c      	ldr	r3, [pc, #112]	@ (800b2e0 <prvHeapInit+0xb0>)
 800b270:	2200      	movs	r2, #0
 800b272:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	4413      	add	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b27c:	2208      	movs	r2, #8
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	1a9b      	subs	r3, r3, r2
 800b282:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f023 0307 	bic.w	r3, r3, #7
 800b28a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4a15      	ldr	r2, [pc, #84]	@ (800b2e4 <prvHeapInit+0xb4>)
 800b290:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b292:	4b14      	ldr	r3, [pc, #80]	@ (800b2e4 <prvHeapInit+0xb4>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2200      	movs	r2, #0
 800b298:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b29a:	4b12      	ldr	r3, [pc, #72]	@ (800b2e4 <prvHeapInit+0xb4>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2b0:	4b0c      	ldr	r3, [pc, #48]	@ (800b2e4 <prvHeapInit+0xb4>)
 800b2b2:	681a      	ldr	r2, [r3, #0]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685b      	ldr	r3, [r3, #4]
 800b2bc:	4a0a      	ldr	r2, [pc, #40]	@ (800b2e8 <prvHeapInit+0xb8>)
 800b2be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	4a09      	ldr	r2, [pc, #36]	@ (800b2ec <prvHeapInit+0xbc>)
 800b2c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b2c8:	4b09      	ldr	r3, [pc, #36]	@ (800b2f0 <prvHeapInit+0xc0>)
 800b2ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b2ce:	601a      	str	r2, [r3, #0]
}
 800b2d0:	bf00      	nop
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr
 800b2dc:	2000097c 	.word	0x2000097c
 800b2e0:	2000457c 	.word	0x2000457c
 800b2e4:	20004584 	.word	0x20004584
 800b2e8:	2000458c 	.word	0x2000458c
 800b2ec:	20004588 	.word	0x20004588
 800b2f0:	20004598 	.word	0x20004598

0800b2f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b2fc:	4b28      	ldr	r3, [pc, #160]	@ (800b3a0 <prvInsertBlockIntoFreeList+0xac>)
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	e002      	b.n	800b308 <prvInsertBlockIntoFreeList+0x14>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	60fb      	str	r3, [r7, #12]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	687a      	ldr	r2, [r7, #4]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d8f7      	bhi.n	800b302 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	68ba      	ldr	r2, [r7, #8]
 800b31c:	4413      	add	r3, r2
 800b31e:	687a      	ldr	r2, [r7, #4]
 800b320:	429a      	cmp	r2, r3
 800b322:	d108      	bne.n	800b336 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	441a      	add	r2, r3
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	441a      	add	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	429a      	cmp	r2, r3
 800b348:	d118      	bne.n	800b37c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681a      	ldr	r2, [r3, #0]
 800b34e:	4b15      	ldr	r3, [pc, #84]	@ (800b3a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	429a      	cmp	r2, r3
 800b354:	d00d      	beq.n	800b372 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685a      	ldr	r2, [r3, #4]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	441a      	add	r2, r3
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	601a      	str	r2, [r3, #0]
 800b370:	e008      	b.n	800b384 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b372:	4b0c      	ldr	r3, [pc, #48]	@ (800b3a4 <prvInsertBlockIntoFreeList+0xb0>)
 800b374:	681a      	ldr	r2, [r3, #0]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	601a      	str	r2, [r3, #0]
 800b37a:	e003      	b.n	800b384 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b384:	68fa      	ldr	r2, [r7, #12]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d002      	beq.n	800b392 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	687a      	ldr	r2, [r7, #4]
 800b390:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b392:	bf00      	nop
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	2000457c 	.word	0x2000457c
 800b3a4:	20004584 	.word	0x20004584

0800b3a8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	490e      	ldr	r1, [pc, #56]	@ (800b3e8 <MX_USB_HOST_Init+0x40>)
 800b3b0:	480e      	ldr	r0, [pc, #56]	@ (800b3ec <MX_USB_HOST_Init+0x44>)
 800b3b2:	f7fb fe13 	bl	8006fdc <USBH_Init>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b3bc:	f7f5 fafe 	bl	80009bc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b3c0:	490b      	ldr	r1, [pc, #44]	@ (800b3f0 <MX_USB_HOST_Init+0x48>)
 800b3c2:	480a      	ldr	r0, [pc, #40]	@ (800b3ec <MX_USB_HOST_Init+0x44>)
 800b3c4:	f7fb fedf 	bl	8007186 <USBH_RegisterClass>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d001      	beq.n	800b3d2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b3ce:	f7f5 faf5 	bl	80009bc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b3d2:	4806      	ldr	r0, [pc, #24]	@ (800b3ec <MX_USB_HOST_Init+0x44>)
 800b3d4:	f7fb ff63 	bl	800729e <USBH_Start>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d001      	beq.n	800b3e2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b3de:	f7f5 faed 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b3e2:	bf00      	nop
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	0800b3f5 	.word	0x0800b3f5
 800b3ec:	2000459c 	.word	0x2000459c
 800b3f0:	2000000c 	.word	0x2000000c

0800b3f4 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b083      	sub	sp, #12
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b400:	78fb      	ldrb	r3, [r7, #3]
 800b402:	3b01      	subs	r3, #1
 800b404:	2b04      	cmp	r3, #4
 800b406:	d819      	bhi.n	800b43c <USBH_UserProcess+0x48>
 800b408:	a201      	add	r2, pc, #4	@ (adr r2, 800b410 <USBH_UserProcess+0x1c>)
 800b40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b40e:	bf00      	nop
 800b410:	0800b43d 	.word	0x0800b43d
 800b414:	0800b42d 	.word	0x0800b42d
 800b418:	0800b43d 	.word	0x0800b43d
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b425 	.word	0x0800b425
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b424:	4b09      	ldr	r3, [pc, #36]	@ (800b44c <USBH_UserProcess+0x58>)
 800b426:	2203      	movs	r2, #3
 800b428:	701a      	strb	r2, [r3, #0]
  break;
 800b42a:	e008      	b.n	800b43e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b42c:	4b07      	ldr	r3, [pc, #28]	@ (800b44c <USBH_UserProcess+0x58>)
 800b42e:	2202      	movs	r2, #2
 800b430:	701a      	strb	r2, [r3, #0]
  break;
 800b432:	e004      	b.n	800b43e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b434:	4b05      	ldr	r3, [pc, #20]	@ (800b44c <USBH_UserProcess+0x58>)
 800b436:	2201      	movs	r2, #1
 800b438:	701a      	strb	r2, [r3, #0]
  break;
 800b43a:	e000      	b.n	800b43e <USBH_UserProcess+0x4a>

  default:
  break;
 800b43c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b43e:	bf00      	nop
 800b440:	370c      	adds	r7, #12
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	20004980 	.word	0x20004980

0800b450 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b08a      	sub	sp, #40	@ 0x28
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b458:	f107 0314 	add.w	r3, r7, #20
 800b45c:	2200      	movs	r2, #0
 800b45e:	601a      	str	r2, [r3, #0]
 800b460:	605a      	str	r2, [r3, #4]
 800b462:	609a      	str	r2, [r3, #8]
 800b464:	60da      	str	r2, [r3, #12]
 800b466:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b470:	d147      	bne.n	800b502 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b472:	2300      	movs	r3, #0
 800b474:	613b      	str	r3, [r7, #16]
 800b476:	4b25      	ldr	r3, [pc, #148]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47a:	4a24      	ldr	r2, [pc, #144]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b47c:	f043 0301 	orr.w	r3, r3, #1
 800b480:	6313      	str	r3, [r2, #48]	@ 0x30
 800b482:	4b22      	ldr	r3, [pc, #136]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b486:	f003 0301 	and.w	r3, r3, #1
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b48e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b494:	2300      	movs	r3, #0
 800b496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b498:	2300      	movs	r3, #0
 800b49a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b49c:	f107 0314 	add.w	r3, r7, #20
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	481b      	ldr	r0, [pc, #108]	@ (800b510 <HAL_HCD_MspInit+0xc0>)
 800b4a4:	f7f5 fe62 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b4a8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b4ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b4ba:	230a      	movs	r3, #10
 800b4bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4be:	f107 0314 	add.w	r3, r7, #20
 800b4c2:	4619      	mov	r1, r3
 800b4c4:	4812      	ldr	r0, [pc, #72]	@ (800b510 <HAL_HCD_MspInit+0xc0>)
 800b4c6:	f7f5 fe51 	bl	800116c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b4ca:	4b10      	ldr	r3, [pc, #64]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b4ce:	4a0f      	ldr	r2, [pc, #60]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4d4:	6353      	str	r3, [r2, #52]	@ 0x34
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	4b0c      	ldr	r3, [pc, #48]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4de:	4a0b      	ldr	r2, [pc, #44]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b4e4:	6453      	str	r3, [r2, #68]	@ 0x44
 800b4e6:	4b09      	ldr	r3, [pc, #36]	@ (800b50c <HAL_HCD_MspInit+0xbc>)
 800b4e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4ee:	60fb      	str	r3, [r7, #12]
 800b4f0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	2105      	movs	r1, #5
 800b4f6:	2043      	movs	r0, #67	@ 0x43
 800b4f8:	f7f5 fe0e 	bl	8001118 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b4fc:	2043      	movs	r0, #67	@ 0x43
 800b4fe:	f7f5 fe27 	bl	8001150 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b502:	bf00      	nop
 800b504:	3728      	adds	r7, #40	@ 0x28
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	40023800 	.word	0x40023800
 800b510:	40020000 	.word	0x40020000

0800b514 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b522:	4618      	mov	r0, r3
 800b524:	f7fc fb6d 	bl	8007c02 <USBH_LL_IncTimer>
}
 800b528:	bf00      	nop
 800b52a:	3708      	adds	r7, #8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}

0800b530 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b082      	sub	sp, #8
 800b534:	af00      	add	r7, sp, #0
 800b536:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fc fbb1 	bl	8007ca6 <USBH_LL_Connect>
}
 800b544:	bf00      	nop
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fc fbc6 	bl	8007cec <USBH_LL_Disconnect>
}
 800b560:	bf00      	nop
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}

0800b568 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b082      	sub	sp, #8
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	460b      	mov	r3, r1
 800b572:	70fb      	strb	r3, [r7, #3]
 800b574:	4613      	mov	r3, r2
 800b576:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b57e:	4618      	mov	r0, r3
 800b580:	f7fc fbfb 	bl	8007d7a <USBH_LL_NotifyURBChange>
#endif
}
 800b584:	bf00      	nop
 800b586:	3708      	adds	r7, #8
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}

0800b58c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b082      	sub	sp, #8
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7fc fb5b 	bl	8007c56 <USBH_LL_PortEnabled>
}
 800b5a0:	bf00      	nop
 800b5a2:	3708      	adds	r7, #8
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b082      	sub	sp, #8
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	f7fc fb67 	bl	8007c8a <USBH_LL_PortDisabled>
}
 800b5bc:	bf00      	nop
 800b5be:	3708      	adds	r7, #8
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	bd80      	pop	{r7, pc}

0800b5c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b5d2:	2b01      	cmp	r3, #1
 800b5d4:	d12a      	bne.n	800b62c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b5d6:	4a18      	ldr	r2, [pc, #96]	@ (800b638 <USBH_LL_Init+0x74>)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a15      	ldr	r2, [pc, #84]	@ (800b638 <USBH_LL_Init+0x74>)
 800b5e2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b5e6:	4b14      	ldr	r3, [pc, #80]	@ (800b638 <USBH_LL_Init+0x74>)
 800b5e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b5ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b5ee:	4b12      	ldr	r3, [pc, #72]	@ (800b638 <USBH_LL_Init+0x74>)
 800b5f0:	2208      	movs	r2, #8
 800b5f2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b5f4:	4b10      	ldr	r3, [pc, #64]	@ (800b638 <USBH_LL_Init+0x74>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800b638 <USBH_LL_Init+0x74>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b600:	4b0d      	ldr	r3, [pc, #52]	@ (800b638 <USBH_LL_Init+0x74>)
 800b602:	2202      	movs	r2, #2
 800b604:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b606:	4b0c      	ldr	r3, [pc, #48]	@ (800b638 <USBH_LL_Init+0x74>)
 800b608:	2200      	movs	r2, #0
 800b60a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b60c:	480a      	ldr	r0, [pc, #40]	@ (800b638 <USBH_LL_Init+0x74>)
 800b60e:	f7f5 ff62 	bl	80014d6 <HAL_HCD_Init>
 800b612:	4603      	mov	r3, r0
 800b614:	2b00      	cmp	r3, #0
 800b616:	d001      	beq.n	800b61c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b618:	f7f5 f9d0 	bl	80009bc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b61c:	4806      	ldr	r0, [pc, #24]	@ (800b638 <USBH_LL_Init+0x74>)
 800b61e:	f7f6 fbc3 	bl	8001da8 <HAL_HCD_GetCurrentFrame>
 800b622:	4603      	mov	r3, r0
 800b624:	4619      	mov	r1, r3
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f7fc fadc 	bl	8007be4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b62c:	2300      	movs	r3, #0
}
 800b62e:	4618      	mov	r0, r3
 800b630:	3708      	adds	r7, #8
 800b632:	46bd      	mov	sp, r7
 800b634:	bd80      	pop	{r7, pc}
 800b636:	bf00      	nop
 800b638:	20004984 	.word	0x20004984

0800b63c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	b084      	sub	sp, #16
 800b640:	af00      	add	r7, sp, #0
 800b642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b652:	4618      	mov	r0, r3
 800b654:	f7f6 fb30 	bl	8001cb8 <HAL_HCD_Start>
 800b658:	4603      	mov	r3, r0
 800b65a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	4618      	mov	r0, r3
 800b660:	f000 f95e 	bl	800b920 <USBH_Get_USB_Status>
 800b664:	4603      	mov	r3, r0
 800b666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b668:	7bbb      	ldrb	r3, [r7, #14]
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3710      	adds	r7, #16
 800b66e:	46bd      	mov	sp, r7
 800b670:	bd80      	pop	{r7, pc}

0800b672 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b672:	b580      	push	{r7, lr}
 800b674:	b084      	sub	sp, #16
 800b676:	af00      	add	r7, sp, #0
 800b678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b67a:	2300      	movs	r3, #0
 800b67c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b67e:	2300      	movs	r3, #0
 800b680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f6 fb38 	bl	8001cfe <HAL_HCD_Stop>
 800b68e:	4603      	mov	r3, r0
 800b690:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b692:	7bfb      	ldrb	r3, [r7, #15]
 800b694:	4618      	mov	r0, r3
 800b696:	f000 f943 	bl	800b920 <USBH_Get_USB_Status>
 800b69a:	4603      	mov	r3, r0
 800b69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	3710      	adds	r7, #16
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	f7f6 fb82 	bl	8001dc4 <HAL_HCD_GetCurrentSpeed>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b02      	cmp	r3, #2
 800b6c4:	d00c      	beq.n	800b6e0 <USBH_LL_GetSpeed+0x38>
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d80d      	bhi.n	800b6e6 <USBH_LL_GetSpeed+0x3e>
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d002      	beq.n	800b6d4 <USBH_LL_GetSpeed+0x2c>
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d003      	beq.n	800b6da <USBH_LL_GetSpeed+0x32>
 800b6d2:	e008      	b.n	800b6e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b6d8:	e008      	b.n	800b6ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b6de:	e005      	b.n	800b6ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b6e0:	2302      	movs	r3, #2
 800b6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6e4:	e002      	b.n	800b6ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6ea:	bf00      	nop
  }
  return  speed;
 800b6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3710      	adds	r7, #16
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}

0800b6f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b6f6:	b580      	push	{r7, lr}
 800b6f8:	b084      	sub	sp, #16
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6fe:	2300      	movs	r3, #0
 800b700:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b702:	2300      	movs	r3, #0
 800b704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7f6 fb13 	bl	8001d38 <HAL_HCD_ResetPort>
 800b712:	4603      	mov	r3, r0
 800b714:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b716:	7bfb      	ldrb	r3, [r7, #15]
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 f901 	bl	800b920 <USBH_Get_USB_Status>
 800b71e:	4603      	mov	r3, r0
 800b720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b722:	7bbb      	ldrb	r3, [r7, #14]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3710      	adds	r7, #16
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
 800b734:	460b      	mov	r3, r1
 800b736:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b73e:	78fa      	ldrb	r2, [r7, #3]
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f7f6 fb1b 	bl	8001d7e <HAL_HCD_HC_GetXferCount>
 800b748:	4603      	mov	r3, r0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}

0800b752 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b752:	b590      	push	{r4, r7, lr}
 800b754:	b089      	sub	sp, #36	@ 0x24
 800b756:	af04      	add	r7, sp, #16
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	4608      	mov	r0, r1
 800b75c:	4611      	mov	r1, r2
 800b75e:	461a      	mov	r2, r3
 800b760:	4603      	mov	r3, r0
 800b762:	70fb      	strb	r3, [r7, #3]
 800b764:	460b      	mov	r3, r1
 800b766:	70bb      	strb	r3, [r7, #2]
 800b768:	4613      	mov	r3, r2
 800b76a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b76c:	2300      	movs	r3, #0
 800b76e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b770:	2300      	movs	r3, #0
 800b772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b77a:	787c      	ldrb	r4, [r7, #1]
 800b77c:	78ba      	ldrb	r2, [r7, #2]
 800b77e:	78f9      	ldrb	r1, [r7, #3]
 800b780:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b782:	9302      	str	r3, [sp, #8]
 800b784:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b788:	9301      	str	r3, [sp, #4]
 800b78a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	4623      	mov	r3, r4
 800b792:	f7f5 ff07 	bl	80015a4 <HAL_HCD_HC_Init>
 800b796:	4603      	mov	r3, r0
 800b798:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
 800b79c:	4618      	mov	r0, r3
 800b79e:	f000 f8bf 	bl	800b920 <USBH_Get_USB_Status>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd90      	pop	{r4, r7, pc}

0800b7b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b084      	sub	sp, #16
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b7ca:	78fa      	ldrb	r2, [r7, #3]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7f5 ffa0 	bl	8001714 <HAL_HCD_HC_Halt>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b7d8:	7bfb      	ldrb	r3, [r7, #15]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f000 f8a0 	bl	800b920 <USBH_Get_USB_Status>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3710      	adds	r7, #16
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}

0800b7ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b7ee:	b590      	push	{r4, r7, lr}
 800b7f0:	b089      	sub	sp, #36	@ 0x24
 800b7f2:	af04      	add	r7, sp, #16
 800b7f4:	6078      	str	r0, [r7, #4]
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	4611      	mov	r1, r2
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	70fb      	strb	r3, [r7, #3]
 800b800:	460b      	mov	r3, r1
 800b802:	70bb      	strb	r3, [r7, #2]
 800b804:	4613      	mov	r3, r2
 800b806:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b808:	2300      	movs	r3, #0
 800b80a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b80c:	2300      	movs	r3, #0
 800b80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b816:	787c      	ldrb	r4, [r7, #1]
 800b818:	78ba      	ldrb	r2, [r7, #2]
 800b81a:	78f9      	ldrb	r1, [r7, #3]
 800b81c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b820:	9303      	str	r3, [sp, #12]
 800b822:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b824:	9302      	str	r3, [sp, #8]
 800b826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b828:	9301      	str	r3, [sp, #4]
 800b82a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	4623      	mov	r3, r4
 800b832:	f7f5 ff93 	bl	800175c <HAL_HCD_HC_SubmitRequest>
 800b836:	4603      	mov	r3, r0
 800b838:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b83a:	7bfb      	ldrb	r3, [r7, #15]
 800b83c:	4618      	mov	r0, r3
 800b83e:	f000 f86f 	bl	800b920 <USBH_Get_USB_Status>
 800b842:	4603      	mov	r3, r0
 800b844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b846:	7bbb      	ldrb	r3, [r7, #14]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd90      	pop	{r4, r7, pc}

0800b850 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	460b      	mov	r3, r1
 800b85a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b862:	78fa      	ldrb	r2, [r7, #3]
 800b864:	4611      	mov	r1, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f7f6 fa74 	bl	8001d54 <HAL_HCD_HC_GetURBState>
 800b86c:	4603      	mov	r3, r0
}
 800b86e:	4618      	mov	r0, r3
 800b870:	3708      	adds	r7, #8
 800b872:	46bd      	mov	sp, r7
 800b874:	bd80      	pop	{r7, pc}

0800b876 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b876:	b580      	push	{r7, lr}
 800b878:	b082      	sub	sp, #8
 800b87a:	af00      	add	r7, sp, #0
 800b87c:	6078      	str	r0, [r7, #4]
 800b87e:	460b      	mov	r3, r1
 800b880:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d103      	bne.n	800b894 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b88c:	78fb      	ldrb	r3, [r7, #3]
 800b88e:	4618      	mov	r0, r3
 800b890:	f000 f872 	bl	800b978 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b894:	20c8      	movs	r0, #200	@ 0xc8
 800b896:	f7f5 fb63 	bl	8000f60 <HAL_Delay>
  return USBH_OK;
 800b89a:	2300      	movs	r3, #0
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	3708      	adds	r7, #8
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	460b      	mov	r3, r1
 800b8ae:	70fb      	strb	r3, [r7, #3]
 800b8b0:	4613      	mov	r3, r2
 800b8b2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b8ba:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b8bc:	78fa      	ldrb	r2, [r7, #3]
 800b8be:	68f9      	ldr	r1, [r7, #12]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	011b      	lsls	r3, r3, #4
 800b8c4:	1a9b      	subs	r3, r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	440b      	add	r3, r1
 800b8ca:	3317      	adds	r3, #23
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00a      	beq.n	800b8e8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b8d2:	78fa      	ldrb	r2, [r7, #3]
 800b8d4:	68f9      	ldr	r1, [r7, #12]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	1a9b      	subs	r3, r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	440b      	add	r3, r1
 800b8e0:	333c      	adds	r3, #60	@ 0x3c
 800b8e2:	78ba      	ldrb	r2, [r7, #2]
 800b8e4:	701a      	strb	r2, [r3, #0]
 800b8e6:	e009      	b.n	800b8fc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b8e8:	78fa      	ldrb	r2, [r7, #3]
 800b8ea:	68f9      	ldr	r1, [r7, #12]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	011b      	lsls	r3, r3, #4
 800b8f0:	1a9b      	subs	r3, r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	333d      	adds	r3, #61	@ 0x3d
 800b8f8:	78ba      	ldrb	r2, [r7, #2]
 800b8fa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr

0800b90a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f7f5 fb24 	bl	8000f60 <HAL_Delay>
}
 800b918:	bf00      	nop
 800b91a:	3708      	adds	r7, #8
 800b91c:	46bd      	mov	sp, r7
 800b91e:	bd80      	pop	{r7, pc}

0800b920 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b92a:	2300      	movs	r3, #0
 800b92c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b03      	cmp	r3, #3
 800b932:	d817      	bhi.n	800b964 <USBH_Get_USB_Status+0x44>
 800b934:	a201      	add	r2, pc, #4	@ (adr r2, 800b93c <USBH_Get_USB_Status+0x1c>)
 800b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b93a:	bf00      	nop
 800b93c:	0800b94d 	.word	0x0800b94d
 800b940:	0800b953 	.word	0x0800b953
 800b944:	0800b959 	.word	0x0800b959
 800b948:	0800b95f 	.word	0x0800b95f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]
    break;
 800b950:	e00b      	b.n	800b96a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b952:	2302      	movs	r3, #2
 800b954:	73fb      	strb	r3, [r7, #15]
    break;
 800b956:	e008      	b.n	800b96a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b958:	2301      	movs	r3, #1
 800b95a:	73fb      	strb	r3, [r7, #15]
    break;
 800b95c:	e005      	b.n	800b96a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b95e:	2302      	movs	r3, #2
 800b960:	73fb      	strb	r3, [r7, #15]
    break;
 800b962:	e002      	b.n	800b96a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b964:	2302      	movs	r3, #2
 800b966:	73fb      	strb	r3, [r7, #15]
    break;
 800b968:	bf00      	nop
  }
  return usb_status;
 800b96a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	3714      	adds	r7, #20
 800b970:	46bd      	mov	sp, r7
 800b972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b976:	4770      	bx	lr

0800b978 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	4603      	mov	r3, r0
 800b980:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b982:	79fb      	ldrb	r3, [r7, #7]
 800b984:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b986:	79fb      	ldrb	r3, [r7, #7]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d102      	bne.n	800b992 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]
 800b990:	e001      	b.n	800b996 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b992:	2301      	movs	r3, #1
 800b994:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	461a      	mov	r2, r3
 800b99a:	2101      	movs	r1, #1
 800b99c:	4803      	ldr	r0, [pc, #12]	@ (800b9ac <MX_DriverVbusFS+0x34>)
 800b99e:	f7f5 fd81 	bl	80014a4 <HAL_GPIO_WritePin>
}
 800b9a2:	bf00      	nop
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	40020800 	.word	0x40020800

0800b9b0 <malloc>:
 800b9b0:	4b02      	ldr	r3, [pc, #8]	@ (800b9bc <malloc+0xc>)
 800b9b2:	4601      	mov	r1, r0
 800b9b4:	6818      	ldr	r0, [r3, #0]
 800b9b6:	f000 b82d 	b.w	800ba14 <_malloc_r>
 800b9ba:	bf00      	nop
 800b9bc:	20000030 	.word	0x20000030

0800b9c0 <free>:
 800b9c0:	4b02      	ldr	r3, [pc, #8]	@ (800b9cc <free+0xc>)
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	f000 b961 	b.w	800bc8c <_free_r>
 800b9ca:	bf00      	nop
 800b9cc:	20000030 	.word	0x20000030

0800b9d0 <sbrk_aligned>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	4e0f      	ldr	r6, [pc, #60]	@ (800ba10 <sbrk_aligned+0x40>)
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	6831      	ldr	r1, [r6, #0]
 800b9d8:	4605      	mov	r5, r0
 800b9da:	b911      	cbnz	r1, 800b9e2 <sbrk_aligned+0x12>
 800b9dc:	f000 f90c 	bl	800bbf8 <_sbrk_r>
 800b9e0:	6030      	str	r0, [r6, #0]
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f000 f907 	bl	800bbf8 <_sbrk_r>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d103      	bne.n	800b9f6 <sbrk_aligned+0x26>
 800b9ee:	f04f 34ff 	mov.w	r4, #4294967295
 800b9f2:	4620      	mov	r0, r4
 800b9f4:	bd70      	pop	{r4, r5, r6, pc}
 800b9f6:	1cc4      	adds	r4, r0, #3
 800b9f8:	f024 0403 	bic.w	r4, r4, #3
 800b9fc:	42a0      	cmp	r0, r4
 800b9fe:	d0f8      	beq.n	800b9f2 <sbrk_aligned+0x22>
 800ba00:	1a21      	subs	r1, r4, r0
 800ba02:	4628      	mov	r0, r5
 800ba04:	f000 f8f8 	bl	800bbf8 <_sbrk_r>
 800ba08:	3001      	adds	r0, #1
 800ba0a:	d1f2      	bne.n	800b9f2 <sbrk_aligned+0x22>
 800ba0c:	e7ef      	b.n	800b9ee <sbrk_aligned+0x1e>
 800ba0e:	bf00      	nop
 800ba10:	20004d64 	.word	0x20004d64

0800ba14 <_malloc_r>:
 800ba14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba18:	1ccd      	adds	r5, r1, #3
 800ba1a:	f025 0503 	bic.w	r5, r5, #3
 800ba1e:	3508      	adds	r5, #8
 800ba20:	2d0c      	cmp	r5, #12
 800ba22:	bf38      	it	cc
 800ba24:	250c      	movcc	r5, #12
 800ba26:	2d00      	cmp	r5, #0
 800ba28:	4606      	mov	r6, r0
 800ba2a:	db01      	blt.n	800ba30 <_malloc_r+0x1c>
 800ba2c:	42a9      	cmp	r1, r5
 800ba2e:	d904      	bls.n	800ba3a <_malloc_r+0x26>
 800ba30:	230c      	movs	r3, #12
 800ba32:	6033      	str	r3, [r6, #0]
 800ba34:	2000      	movs	r0, #0
 800ba36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb10 <_malloc_r+0xfc>
 800ba3e:	f000 f869 	bl	800bb14 <__malloc_lock>
 800ba42:	f8d8 3000 	ldr.w	r3, [r8]
 800ba46:	461c      	mov	r4, r3
 800ba48:	bb44      	cbnz	r4, 800ba9c <_malloc_r+0x88>
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	f7ff ffbf 	bl	800b9d0 <sbrk_aligned>
 800ba52:	1c43      	adds	r3, r0, #1
 800ba54:	4604      	mov	r4, r0
 800ba56:	d158      	bne.n	800bb0a <_malloc_r+0xf6>
 800ba58:	f8d8 4000 	ldr.w	r4, [r8]
 800ba5c:	4627      	mov	r7, r4
 800ba5e:	2f00      	cmp	r7, #0
 800ba60:	d143      	bne.n	800baea <_malloc_r+0xd6>
 800ba62:	2c00      	cmp	r4, #0
 800ba64:	d04b      	beq.n	800bafe <_malloc_r+0xea>
 800ba66:	6823      	ldr	r3, [r4, #0]
 800ba68:	4639      	mov	r1, r7
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	eb04 0903 	add.w	r9, r4, r3
 800ba70:	f000 f8c2 	bl	800bbf8 <_sbrk_r>
 800ba74:	4581      	cmp	r9, r0
 800ba76:	d142      	bne.n	800bafe <_malloc_r+0xea>
 800ba78:	6821      	ldr	r1, [r4, #0]
 800ba7a:	1a6d      	subs	r5, r5, r1
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7ff ffa6 	bl	800b9d0 <sbrk_aligned>
 800ba84:	3001      	adds	r0, #1
 800ba86:	d03a      	beq.n	800bafe <_malloc_r+0xea>
 800ba88:	6823      	ldr	r3, [r4, #0]
 800ba8a:	442b      	add	r3, r5
 800ba8c:	6023      	str	r3, [r4, #0]
 800ba8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	bb62      	cbnz	r2, 800baf0 <_malloc_r+0xdc>
 800ba96:	f8c8 7000 	str.w	r7, [r8]
 800ba9a:	e00f      	b.n	800babc <_malloc_r+0xa8>
 800ba9c:	6822      	ldr	r2, [r4, #0]
 800ba9e:	1b52      	subs	r2, r2, r5
 800baa0:	d420      	bmi.n	800bae4 <_malloc_r+0xd0>
 800baa2:	2a0b      	cmp	r2, #11
 800baa4:	d917      	bls.n	800bad6 <_malloc_r+0xc2>
 800baa6:	1961      	adds	r1, r4, r5
 800baa8:	42a3      	cmp	r3, r4
 800baaa:	6025      	str	r5, [r4, #0]
 800baac:	bf18      	it	ne
 800baae:	6059      	strne	r1, [r3, #4]
 800bab0:	6863      	ldr	r3, [r4, #4]
 800bab2:	bf08      	it	eq
 800bab4:	f8c8 1000 	streq.w	r1, [r8]
 800bab8:	5162      	str	r2, [r4, r5]
 800baba:	604b      	str	r3, [r1, #4]
 800babc:	4630      	mov	r0, r6
 800babe:	f000 f82f 	bl	800bb20 <__malloc_unlock>
 800bac2:	f104 000b 	add.w	r0, r4, #11
 800bac6:	1d23      	adds	r3, r4, #4
 800bac8:	f020 0007 	bic.w	r0, r0, #7
 800bacc:	1ac2      	subs	r2, r0, r3
 800bace:	bf1c      	itt	ne
 800bad0:	1a1b      	subne	r3, r3, r0
 800bad2:	50a3      	strne	r3, [r4, r2]
 800bad4:	e7af      	b.n	800ba36 <_malloc_r+0x22>
 800bad6:	6862      	ldr	r2, [r4, #4]
 800bad8:	42a3      	cmp	r3, r4
 800bada:	bf0c      	ite	eq
 800badc:	f8c8 2000 	streq.w	r2, [r8]
 800bae0:	605a      	strne	r2, [r3, #4]
 800bae2:	e7eb      	b.n	800babc <_malloc_r+0xa8>
 800bae4:	4623      	mov	r3, r4
 800bae6:	6864      	ldr	r4, [r4, #4]
 800bae8:	e7ae      	b.n	800ba48 <_malloc_r+0x34>
 800baea:	463c      	mov	r4, r7
 800baec:	687f      	ldr	r7, [r7, #4]
 800baee:	e7b6      	b.n	800ba5e <_malloc_r+0x4a>
 800baf0:	461a      	mov	r2, r3
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	42a3      	cmp	r3, r4
 800baf6:	d1fb      	bne.n	800baf0 <_malloc_r+0xdc>
 800baf8:	2300      	movs	r3, #0
 800bafa:	6053      	str	r3, [r2, #4]
 800bafc:	e7de      	b.n	800babc <_malloc_r+0xa8>
 800bafe:	230c      	movs	r3, #12
 800bb00:	6033      	str	r3, [r6, #0]
 800bb02:	4630      	mov	r0, r6
 800bb04:	f000 f80c 	bl	800bb20 <__malloc_unlock>
 800bb08:	e794      	b.n	800ba34 <_malloc_r+0x20>
 800bb0a:	6005      	str	r5, [r0, #0]
 800bb0c:	e7d6      	b.n	800babc <_malloc_r+0xa8>
 800bb0e:	bf00      	nop
 800bb10:	20004d68 	.word	0x20004d68

0800bb14 <__malloc_lock>:
 800bb14:	4801      	ldr	r0, [pc, #4]	@ (800bb1c <__malloc_lock+0x8>)
 800bb16:	f000 b8a9 	b.w	800bc6c <__retarget_lock_acquire_recursive>
 800bb1a:	bf00      	nop
 800bb1c:	20004ea8 	.word	0x20004ea8

0800bb20 <__malloc_unlock>:
 800bb20:	4801      	ldr	r0, [pc, #4]	@ (800bb28 <__malloc_unlock+0x8>)
 800bb22:	f000 b8a4 	b.w	800bc6e <__retarget_lock_release_recursive>
 800bb26:	bf00      	nop
 800bb28:	20004ea8 	.word	0x20004ea8

0800bb2c <memset>:
 800bb2c:	4402      	add	r2, r0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d100      	bne.n	800bb36 <memset+0xa>
 800bb34:	4770      	bx	lr
 800bb36:	f803 1b01 	strb.w	r1, [r3], #1
 800bb3a:	e7f9      	b.n	800bb30 <memset+0x4>

0800bb3c <_reclaim_reent>:
 800bb3c:	4b2d      	ldr	r3, [pc, #180]	@ (800bbf4 <_reclaim_reent+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4283      	cmp	r3, r0
 800bb42:	b570      	push	{r4, r5, r6, lr}
 800bb44:	4604      	mov	r4, r0
 800bb46:	d053      	beq.n	800bbf0 <_reclaim_reent+0xb4>
 800bb48:	69c3      	ldr	r3, [r0, #28]
 800bb4a:	b31b      	cbz	r3, 800bb94 <_reclaim_reent+0x58>
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	b163      	cbz	r3, 800bb6a <_reclaim_reent+0x2e>
 800bb50:	2500      	movs	r5, #0
 800bb52:	69e3      	ldr	r3, [r4, #28]
 800bb54:	68db      	ldr	r3, [r3, #12]
 800bb56:	5959      	ldr	r1, [r3, r5]
 800bb58:	b9b1      	cbnz	r1, 800bb88 <_reclaim_reent+0x4c>
 800bb5a:	3504      	adds	r5, #4
 800bb5c:	2d80      	cmp	r5, #128	@ 0x80
 800bb5e:	d1f8      	bne.n	800bb52 <_reclaim_reent+0x16>
 800bb60:	69e3      	ldr	r3, [r4, #28]
 800bb62:	4620      	mov	r0, r4
 800bb64:	68d9      	ldr	r1, [r3, #12]
 800bb66:	f000 f891 	bl	800bc8c <_free_r>
 800bb6a:	69e3      	ldr	r3, [r4, #28]
 800bb6c:	6819      	ldr	r1, [r3, #0]
 800bb6e:	b111      	cbz	r1, 800bb76 <_reclaim_reent+0x3a>
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 f88b 	bl	800bc8c <_free_r>
 800bb76:	69e3      	ldr	r3, [r4, #28]
 800bb78:	689d      	ldr	r5, [r3, #8]
 800bb7a:	b15d      	cbz	r5, 800bb94 <_reclaim_reent+0x58>
 800bb7c:	4629      	mov	r1, r5
 800bb7e:	4620      	mov	r0, r4
 800bb80:	682d      	ldr	r5, [r5, #0]
 800bb82:	f000 f883 	bl	800bc8c <_free_r>
 800bb86:	e7f8      	b.n	800bb7a <_reclaim_reent+0x3e>
 800bb88:	680e      	ldr	r6, [r1, #0]
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f000 f87e 	bl	800bc8c <_free_r>
 800bb90:	4631      	mov	r1, r6
 800bb92:	e7e1      	b.n	800bb58 <_reclaim_reent+0x1c>
 800bb94:	6961      	ldr	r1, [r4, #20]
 800bb96:	b111      	cbz	r1, 800bb9e <_reclaim_reent+0x62>
 800bb98:	4620      	mov	r0, r4
 800bb9a:	f000 f877 	bl	800bc8c <_free_r>
 800bb9e:	69e1      	ldr	r1, [r4, #28]
 800bba0:	b111      	cbz	r1, 800bba8 <_reclaim_reent+0x6c>
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f872 	bl	800bc8c <_free_r>
 800bba8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bbaa:	b111      	cbz	r1, 800bbb2 <_reclaim_reent+0x76>
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 f86d 	bl	800bc8c <_free_r>
 800bbb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bbb4:	b111      	cbz	r1, 800bbbc <_reclaim_reent+0x80>
 800bbb6:	4620      	mov	r0, r4
 800bbb8:	f000 f868 	bl	800bc8c <_free_r>
 800bbbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bbbe:	b111      	cbz	r1, 800bbc6 <_reclaim_reent+0x8a>
 800bbc0:	4620      	mov	r0, r4
 800bbc2:	f000 f863 	bl	800bc8c <_free_r>
 800bbc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bbc8:	b111      	cbz	r1, 800bbd0 <_reclaim_reent+0x94>
 800bbca:	4620      	mov	r0, r4
 800bbcc:	f000 f85e 	bl	800bc8c <_free_r>
 800bbd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bbd2:	b111      	cbz	r1, 800bbda <_reclaim_reent+0x9e>
 800bbd4:	4620      	mov	r0, r4
 800bbd6:	f000 f859 	bl	800bc8c <_free_r>
 800bbda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bbdc:	b111      	cbz	r1, 800bbe4 <_reclaim_reent+0xa8>
 800bbde:	4620      	mov	r0, r4
 800bbe0:	f000 f854 	bl	800bc8c <_free_r>
 800bbe4:	6a23      	ldr	r3, [r4, #32]
 800bbe6:	b11b      	cbz	r3, 800bbf0 <_reclaim_reent+0xb4>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbee:	4718      	bx	r3
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
 800bbf2:	bf00      	nop
 800bbf4:	20000030 	.word	0x20000030

0800bbf8 <_sbrk_r>:
 800bbf8:	b538      	push	{r3, r4, r5, lr}
 800bbfa:	4d06      	ldr	r5, [pc, #24]	@ (800bc14 <_sbrk_r+0x1c>)
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	4604      	mov	r4, r0
 800bc00:	4608      	mov	r0, r1
 800bc02:	602b      	str	r3, [r5, #0]
 800bc04:	f7f5 f8c0 	bl	8000d88 <_sbrk>
 800bc08:	1c43      	adds	r3, r0, #1
 800bc0a:	d102      	bne.n	800bc12 <_sbrk_r+0x1a>
 800bc0c:	682b      	ldr	r3, [r5, #0]
 800bc0e:	b103      	cbz	r3, 800bc12 <_sbrk_r+0x1a>
 800bc10:	6023      	str	r3, [r4, #0]
 800bc12:	bd38      	pop	{r3, r4, r5, pc}
 800bc14:	20004ea4 	.word	0x20004ea4

0800bc18 <__errno>:
 800bc18:	4b01      	ldr	r3, [pc, #4]	@ (800bc20 <__errno+0x8>)
 800bc1a:	6818      	ldr	r0, [r3, #0]
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20000030 	.word	0x20000030

0800bc24 <__libc_init_array>:
 800bc24:	b570      	push	{r4, r5, r6, lr}
 800bc26:	4d0d      	ldr	r5, [pc, #52]	@ (800bc5c <__libc_init_array+0x38>)
 800bc28:	4c0d      	ldr	r4, [pc, #52]	@ (800bc60 <__libc_init_array+0x3c>)
 800bc2a:	1b64      	subs	r4, r4, r5
 800bc2c:	10a4      	asrs	r4, r4, #2
 800bc2e:	2600      	movs	r6, #0
 800bc30:	42a6      	cmp	r6, r4
 800bc32:	d109      	bne.n	800bc48 <__libc_init_array+0x24>
 800bc34:	4d0b      	ldr	r5, [pc, #44]	@ (800bc64 <__libc_init_array+0x40>)
 800bc36:	4c0c      	ldr	r4, [pc, #48]	@ (800bc68 <__libc_init_array+0x44>)
 800bc38:	f000 f872 	bl	800bd20 <_init>
 800bc3c:	1b64      	subs	r4, r4, r5
 800bc3e:	10a4      	asrs	r4, r4, #2
 800bc40:	2600      	movs	r6, #0
 800bc42:	42a6      	cmp	r6, r4
 800bc44:	d105      	bne.n	800bc52 <__libc_init_array+0x2e>
 800bc46:	bd70      	pop	{r4, r5, r6, pc}
 800bc48:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc4c:	4798      	blx	r3
 800bc4e:	3601      	adds	r6, #1
 800bc50:	e7ee      	b.n	800bc30 <__libc_init_array+0xc>
 800bc52:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc56:	4798      	blx	r3
 800bc58:	3601      	adds	r6, #1
 800bc5a:	e7f2      	b.n	800bc42 <__libc_init_array+0x1e>
 800bc5c:	0800bdd8 	.word	0x0800bdd8
 800bc60:	0800bdd8 	.word	0x0800bdd8
 800bc64:	0800bdd8 	.word	0x0800bdd8
 800bc68:	0800bddc 	.word	0x0800bddc

0800bc6c <__retarget_lock_acquire_recursive>:
 800bc6c:	4770      	bx	lr

0800bc6e <__retarget_lock_release_recursive>:
 800bc6e:	4770      	bx	lr

0800bc70 <memcpy>:
 800bc70:	440a      	add	r2, r1
 800bc72:	4291      	cmp	r1, r2
 800bc74:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc78:	d100      	bne.n	800bc7c <memcpy+0xc>
 800bc7a:	4770      	bx	lr
 800bc7c:	b510      	push	{r4, lr}
 800bc7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc82:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc86:	4291      	cmp	r1, r2
 800bc88:	d1f9      	bne.n	800bc7e <memcpy+0xe>
 800bc8a:	bd10      	pop	{r4, pc}

0800bc8c <_free_r>:
 800bc8c:	b538      	push	{r3, r4, r5, lr}
 800bc8e:	4605      	mov	r5, r0
 800bc90:	2900      	cmp	r1, #0
 800bc92:	d041      	beq.n	800bd18 <_free_r+0x8c>
 800bc94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc98:	1f0c      	subs	r4, r1, #4
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	bfb8      	it	lt
 800bc9e:	18e4      	addlt	r4, r4, r3
 800bca0:	f7ff ff38 	bl	800bb14 <__malloc_lock>
 800bca4:	4a1d      	ldr	r2, [pc, #116]	@ (800bd1c <_free_r+0x90>)
 800bca6:	6813      	ldr	r3, [r2, #0]
 800bca8:	b933      	cbnz	r3, 800bcb8 <_free_r+0x2c>
 800bcaa:	6063      	str	r3, [r4, #4]
 800bcac:	6014      	str	r4, [r2, #0]
 800bcae:	4628      	mov	r0, r5
 800bcb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcb4:	f7ff bf34 	b.w	800bb20 <__malloc_unlock>
 800bcb8:	42a3      	cmp	r3, r4
 800bcba:	d908      	bls.n	800bcce <_free_r+0x42>
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	1821      	adds	r1, r4, r0
 800bcc0:	428b      	cmp	r3, r1
 800bcc2:	bf01      	itttt	eq
 800bcc4:	6819      	ldreq	r1, [r3, #0]
 800bcc6:	685b      	ldreq	r3, [r3, #4]
 800bcc8:	1809      	addeq	r1, r1, r0
 800bcca:	6021      	streq	r1, [r4, #0]
 800bccc:	e7ed      	b.n	800bcaa <_free_r+0x1e>
 800bcce:	461a      	mov	r2, r3
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	b10b      	cbz	r3, 800bcd8 <_free_r+0x4c>
 800bcd4:	42a3      	cmp	r3, r4
 800bcd6:	d9fa      	bls.n	800bcce <_free_r+0x42>
 800bcd8:	6811      	ldr	r1, [r2, #0]
 800bcda:	1850      	adds	r0, r2, r1
 800bcdc:	42a0      	cmp	r0, r4
 800bcde:	d10b      	bne.n	800bcf8 <_free_r+0x6c>
 800bce0:	6820      	ldr	r0, [r4, #0]
 800bce2:	4401      	add	r1, r0
 800bce4:	1850      	adds	r0, r2, r1
 800bce6:	4283      	cmp	r3, r0
 800bce8:	6011      	str	r1, [r2, #0]
 800bcea:	d1e0      	bne.n	800bcae <_free_r+0x22>
 800bcec:	6818      	ldr	r0, [r3, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	6053      	str	r3, [r2, #4]
 800bcf2:	4408      	add	r0, r1
 800bcf4:	6010      	str	r0, [r2, #0]
 800bcf6:	e7da      	b.n	800bcae <_free_r+0x22>
 800bcf8:	d902      	bls.n	800bd00 <_free_r+0x74>
 800bcfa:	230c      	movs	r3, #12
 800bcfc:	602b      	str	r3, [r5, #0]
 800bcfe:	e7d6      	b.n	800bcae <_free_r+0x22>
 800bd00:	6820      	ldr	r0, [r4, #0]
 800bd02:	1821      	adds	r1, r4, r0
 800bd04:	428b      	cmp	r3, r1
 800bd06:	bf04      	itt	eq
 800bd08:	6819      	ldreq	r1, [r3, #0]
 800bd0a:	685b      	ldreq	r3, [r3, #4]
 800bd0c:	6063      	str	r3, [r4, #4]
 800bd0e:	bf04      	itt	eq
 800bd10:	1809      	addeq	r1, r1, r0
 800bd12:	6021      	streq	r1, [r4, #0]
 800bd14:	6054      	str	r4, [r2, #4]
 800bd16:	e7ca      	b.n	800bcae <_free_r+0x22>
 800bd18:	bd38      	pop	{r3, r4, r5, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20004d68 	.word	0x20004d68

0800bd20 <_init>:
 800bd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd22:	bf00      	nop
 800bd24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd26:	bc08      	pop	{r3}
 800bd28:	469e      	mov	lr, r3
 800bd2a:	4770      	bx	lr

0800bd2c <_fini>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr
